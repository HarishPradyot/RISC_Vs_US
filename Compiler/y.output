Terminals unused in grammar

    LEFTSHIFT
    RIGHTSHIFT
    STR
    PRINT
    SCAN
    SWITCH
    CASE
    BREAK
    DEFAULT


Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 func: func_prefix OF stmt_list CF

    5 $@1: %empty

    6 func_prefix: data_type ID $@1 OC param_list CC

    7 param_list: param_list COMMA param
    8           | param
    9           | %empty

   10 param: data_type ID
   11      | data_type ID OS CS COLON INT ID

   12 stmt_list: stmt stmt_list
   13          | %empty

   14 stmt: declaration
   15     | assign SCOL
   16     | expr SCOL
   17     | return_stmt SCOL
   18     | if_stmt

   19 declaration: data_type ID SCOL
   20            | data_type ID ASSIGN expr SCOL

   21 return_stmt: RETURN expr

   22 data_type: INT
   23          | FLOAT
   24          | CHAR

   25 expr: expr ADD expr
   26     | expr SUBTRACT expr
   27     | expr MULTIPLY expr
   28     | expr DIVIDE expr
   29     | expr LE expr
   30     | expr GE expr
   31     | expr LT expr
   32     | expr GT expr
   33     | expr EQ expr
   34     | expr NE expr
   35     | expr AND expr
   36     | expr OR expr
   37     | expr MODULO expr
   38     | expr BITAND expr
   39     | expr BITOR expr
   40     | expr XOR expr
   41     | unary_expr
   42     | primary_expr

   43 unary_expr: unary_op primary_expr

   44 primary_expr: ID
   45             | const
   46             | OC expr CC

   47 unary_op: ADD
   48         | SUBTRACT
   49         | NOT
   50         | NEGATION

   51 const: INT_NUM
   52      | CHARACTER

   53 assign: ID ASSIGN expr

   54 $@2: %empty

   55 $@3: %empty

   56 $@4: %empty

   57 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

   58 $@5: %empty

   59 $@6: %empty

   60 $@7: %empty

   61 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt
   62          | %empty

   63 else_stmt: ELSE OF stmt_list CF
   64          | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <node> (258) 11 22
    CHAR <node> (259) 24
    FLOAT <node> (260) 23
    RETURN <node> (261) 21
    INT_NUM <node> (262) 51
    ID <node> (263) 6 10 11 19 20 44 53
    LEFTSHIFT <node> (264)
    RIGHTSHIFT <node> (265)
    LE <node> (266) 29
    GE <node> (267) 30
    EQ <node> (268) 33
    NE <node> (269) 34
    GT <node> (270) 32
    LT <node> (271) 31
    AND <node> (272) 35
    OR <node> (273) 36
    NOT <node> (274) 49
    ADD <node> (275) 25 47
    SUBTRACT <node> (276) 26 48
    DIVIDE <node> (277) 28
    MULTIPLY <node> (278) 27
    MODULO <node> (279) 37
    BITAND <node> (280) 38
    BITOR <node> (281) 39
    NEGATION <node> (282) 50
    XOR <node> (283) 40
    STR <node> (284)
    CHARACTER <node> (285) 52
    CC <node> (286) 6 46 57 61
    OC <node> (287) 6 46 57 61
    CS <node> (288) 11
    OS <node> (289) 11
    CF <node> (290) 4 57 61 63
    OF <node> (291) 4 57 61 63
    COMMA <node> (292) 7
    COLON <node> (293) 11
    SCOL <node> (294) 15 16 17 19 20
    PRINT <node> (295)
    SCAN <node> (296)
    SWITCH <node> (297)
    CASE <node> (298)
    BREAK <node> (299)
    DEFAULT <node> (300)
    IF <node> (301) 57
    ELIF <node> (302) 61
    ELSE <node> (303) 63
    ASSIGN (304) 20 53


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    Program <node> (51)
        on left: 1
        on right: 0
    func_list <node> (52)
        on left: 2 3
        on right: 1 2
    func <node> (53)
        on left: 4
        on right: 2
    func_prefix <node> (54)
        on left: 6
        on right: 4
    $@1 (55)
        on left: 5
        on right: 6
    param_list <node> (56)
        on left: 7 8 9
        on right: 6 7
    param <node> (57)
        on left: 10 11
        on right: 7 8
    stmt_list <node> (58)
        on left: 12 13
        on right: 4 12 57 61 63
    stmt <node> (59)
        on left: 14 15 16 17 18
        on right: 12
    declaration <node> (60)
        on left: 19 20
        on right: 14
    return_stmt <node> (61)
        on left: 21
        on right: 17
    data_type <node> (62)
        on left: 22 23 24
        on right: 6 10 11 19 20
    expr <node> (63)
        on left: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
        on right: 16 20 21 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 46 53 57 61
    unary_expr <node> (64)
        on left: 43
        on right: 41
    primary_expr <node> (65)
        on left: 44 45 46
        on right: 42 43
    unary_op <node> (66)
        on left: 47 48 49 50
        on right: 43
    const <node> (67)
        on left: 51 52
        on right: 45
    assign <node> (68)
        on left: 53
        on right: 15
    if_stmt <node> (69)
        on left: 57
        on right: 18
    $@2 (70)
        on left: 54
        on right: 57
    $@3 (71)
        on left: 55
        on right: 57
    $@4 (72)
        on left: 56
        on right: 57
    elif_stmt <node> (73)
        on left: 61 62
        on right: 57 61
    $@5 (74)
        on left: 58
        on right: 61
    $@6 (75)
        on left: 59
        on right: 61
    $@7 (76)
        on left: 60
        on right: 61
    else_stmt <node> (77)
        on left: 63 64
        on right: 57


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 1 (Program)

    func         go to state 7
    func_prefix  go to state 8
    data_type    go to state 9


State 3

    0 $accept: Program $end .

    $default  accept


State 4

   22 data_type: INT .

    $default  reduce using rule 22 (data_type)


State 5

   24 data_type: CHAR .

    $default  reduce using rule 24 (data_type)


State 6

   23 data_type: FLOAT .

    $default  reduce using rule 23 (data_type)


State 7

    2 func_list: func_list func .

    $default  reduce using rule 2 (func_list)


State 8

    4 func: func_prefix . OF stmt_list CF

    OF  shift, and go to state 10


State 9

    6 func_prefix: data_type . ID $@1 OC param_list CC

    ID  shift, and go to state 11


State 10

    4 func: func_prefix OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    IF         shift, and go to state 21

    $default  reduce using rule 13 (stmt_list)

    stmt_list     go to state 22
    stmt          go to state 23
    declaration   go to state 24
    return_stmt   go to state 25
    data_type     go to state 26
    expr          go to state 27
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31
    assign        go to state 32
    if_stmt       go to state 33


State 11

    6 func_prefix: data_type ID . $@1 OC param_list CC

    $default  reduce using rule 5 ($@1)

    $@1  go to state 34


State 12

   21 return_stmt: RETURN . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 36
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 13

   51 const: INT_NUM .

    $default  reduce using rule 51 (const)


State 14

   44 primary_expr: ID .
   53 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 37

    $default  reduce using rule 44 (primary_expr)


State 15

   49 unary_op: NOT .

    $default  reduce using rule 49 (unary_op)


State 16

   47 unary_op: ADD .

    $default  reduce using rule 47 (unary_op)


State 17

   48 unary_op: SUBTRACT .

    $default  reduce using rule 48 (unary_op)


State 18

   50 unary_op: NEGATION .

    $default  reduce using rule 50 (unary_op)


State 19

   52 const: CHARACTER .

    $default  reduce using rule 52 (const)


State 20

   46 primary_expr: OC . expr CC

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 38
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 21

   57 if_stmt: IF . $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    $default  reduce using rule 54 ($@2)

    $@2  go to state 39


State 22

    4 func: func_prefix OF stmt_list . CF

    CF  shift, and go to state 40


State 23

   12 stmt_list: stmt . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    IF         shift, and go to state 21

    $default  reduce using rule 13 (stmt_list)

    stmt_list     go to state 41
    stmt          go to state 23
    declaration   go to state 24
    return_stmt   go to state 25
    data_type     go to state 26
    expr          go to state 27
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31
    assign        go to state 32
    if_stmt       go to state 33


State 24

   14 stmt: declaration .

    $default  reduce using rule 14 (stmt)


State 25

   17 stmt: return_stmt . SCOL

    SCOL  shift, and go to state 42


State 26

   19 declaration: data_type . ID SCOL
   20            | data_type . ID ASSIGN expr SCOL

    ID  shift, and go to state 43


State 27

   16 stmt: expr . SCOL
   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    OR        shift, and go to state 51
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59
    SCOL      shift, and go to state 60


State 28

   41 expr: unary_expr .

    $default  reduce using rule 41 (expr)


State 29

   42 expr: primary_expr .

    $default  reduce using rule 42 (expr)


State 30

   43 unary_expr: unary_op . primary_expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    primary_expr  go to state 61
    const         go to state 31


State 31

   45 primary_expr: const .

    $default  reduce using rule 45 (primary_expr)


State 32

   15 stmt: assign . SCOL

    SCOL  shift, and go to state 62


State 33

   18 stmt: if_stmt .

    $default  reduce using rule 18 (stmt)


State 34

    6 func_prefix: data_type ID $@1 . OC param_list CC

    OC  shift, and go to state 63


State 35

   44 primary_expr: ID .

    $default  reduce using rule 44 (primary_expr)


State 36

   21 return_stmt: RETURN expr .
   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    OR        shift, and go to state 51
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59

    $default  reduce using rule 21 (return_stmt)


State 37

   53 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 64
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 38

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr
   46 primary_expr: OC expr . CC

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    OR        shift, and go to state 51
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59
    CC        shift, and go to state 65


State 39

   57 if_stmt: IF $@2 . OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    OC  shift, and go to state 66


State 40

    4 func: func_prefix OF stmt_list CF .

    $default  reduce using rule 4 (func)


State 41

   12 stmt_list: stmt stmt_list .

    $default  reduce using rule 12 (stmt_list)


State 42

   17 stmt: return_stmt SCOL .

    $default  reduce using rule 17 (stmt)


State 43

   19 declaration: data_type ID . SCOL
   20            | data_type ID . ASSIGN expr SCOL

    SCOL    shift, and go to state 67
    ASSIGN  shift, and go to state 68


State 44

   29 expr: expr LE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 69
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 45

   30 expr: expr GE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 70
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 46

   33 expr: expr EQ . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 71
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 47

   34 expr: expr NE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 72
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 48

   32 expr: expr GT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 73
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 49

   31 expr: expr LT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 74
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 50

   35 expr: expr AND . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 75
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 51

   36 expr: expr OR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 76
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 52

   25 expr: expr ADD . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 77
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 53

   26 expr: expr SUBTRACT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 78
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 54

   28 expr: expr DIVIDE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 79
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 55

   27 expr: expr MULTIPLY . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 80
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 56

   37 expr: expr MODULO . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 81
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 57

   38 expr: expr BITAND . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 82
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 58

   39 expr: expr BITOR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 83
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 59

   40 expr: expr XOR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 84
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 60

   16 stmt: expr SCOL .

    $default  reduce using rule 16 (stmt)


State 61

   43 unary_expr: unary_op primary_expr .

    $default  reduce using rule 43 (unary_expr)


State 62

   15 stmt: assign SCOL .

    $default  reduce using rule 15 (stmt)


State 63

    6 func_prefix: data_type ID $@1 OC . param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 9 (param_list)

    param_list  go to state 85
    param       go to state 86
    data_type   go to state 87


State 64

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr
   53 assign: ID ASSIGN expr .

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    OR        shift, and go to state 51
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59

    $default  reduce using rule 53 (assign)


State 65

   46 primary_expr: OC expr CC .

    $default  reduce using rule 46 (primary_expr)


State 66

   57 if_stmt: IF $@2 OC . expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 88
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 67

   19 declaration: data_type ID SCOL .

    $default  reduce using rule 19 (declaration)


State 68

   20 declaration: data_type ID ASSIGN . expr SCOL

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 89
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 69

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   29     | expr LE expr .
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 29 (expr)


State 70

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   30     | expr GE expr .
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 30 (expr)


State 71

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   33     | expr EQ expr .
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 33 (expr)


State 72

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   34     | expr NE expr .
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 34 (expr)


State 73

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   32     | expr GT expr .
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 32 (expr)


State 74

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   31     | expr LT expr .
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 31 (expr)


State 75

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   35     | expr AND expr .
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59

    $default  reduce using rule 35 (expr)


State 76

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   36     | expr OR expr .
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59

    $default  reduce using rule 36 (expr)


State 77

   25 expr: expr . ADD expr
   25     | expr ADD expr .
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 25 (expr)


State 78

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   26     | expr SUBTRACT expr .
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 26 (expr)


State 79

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   28     | expr DIVIDE expr .
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    $default  reduce using rule 28 (expr)


State 80

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   27     | expr MULTIPLY expr .
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    $default  reduce using rule 27 (expr)


State 81

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   37     | expr MODULO expr .
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    $default  reduce using rule 37 (expr)


State 82

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   38     | expr BITAND expr .
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56

    $default  reduce using rule 38 (expr)


State 83

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   39     | expr BITOR expr .
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    XOR       shift, and go to state 59

    $default  reduce using rule 39 (expr)


State 84

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr
   40     | expr XOR expr .

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57

    $default  reduce using rule 40 (expr)


State 85

    6 func_prefix: data_type ID $@1 OC param_list . CC
    7 param_list: param_list . COMMA param

    CC     shift, and go to state 90
    COMMA  shift, and go to state 91


State 86

    8 param_list: param .

    $default  reduce using rule 8 (param_list)


State 87

   10 param: data_type . ID
   11      | data_type . ID OS CS COLON INT ID

    ID  shift, and go to state 92


State 88

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr
   57 if_stmt: IF $@2 OC expr . CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    OR        shift, and go to state 51
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59
    CC        shift, and go to state 93


State 89

   20 declaration: data_type ID ASSIGN expr . SCOL
   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    OR        shift, and go to state 51
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59
    SCOL      shift, and go to state 94


State 90

    6 func_prefix: data_type ID $@1 OC param_list CC .

    $default  reduce using rule 6 (func_prefix)


State 91

    7 param_list: param_list COMMA . param

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    param      go to state 95
    data_type  go to state 87


State 92

   10 param: data_type ID .
   11      | data_type ID . OS CS COLON INT ID

    OS  shift, and go to state 96

    $default  reduce using rule 10 (param)


State 93

   57 if_stmt: IF $@2 OC expr CC . $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    $default  reduce using rule 55 ($@3)

    $@3  go to state 97


State 94

   20 declaration: data_type ID ASSIGN expr SCOL .

    $default  reduce using rule 20 (declaration)


State 95

    7 param_list: param_list COMMA param .

    $default  reduce using rule 7 (param_list)


State 96

   11 param: data_type ID OS . CS COLON INT ID

    CS  shift, and go to state 98


State 97

   57 if_stmt: IF $@2 OC expr CC $@3 . OF stmt_list CF $@4 elif_stmt else_stmt

    OF  shift, and go to state 99


State 98

   11 param: data_type ID OS CS . COLON INT ID

    COLON  shift, and go to state 100


State 99

   57 if_stmt: IF $@2 OC expr CC $@3 OF . stmt_list CF $@4 elif_stmt else_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    IF         shift, and go to state 21

    $default  reduce using rule 13 (stmt_list)

    stmt_list     go to state 101
    stmt          go to state 23
    declaration   go to state 24
    return_stmt   go to state 25
    data_type     go to state 26
    expr          go to state 27
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31
    assign        go to state 32
    if_stmt       go to state 33


State 100

   11 param: data_type ID OS CS COLON . INT ID

    INT  shift, and go to state 102


State 101

   57 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list . CF $@4 elif_stmt else_stmt

    CF  shift, and go to state 103


State 102

   11 param: data_type ID OS CS COLON INT . ID

    ID  shift, and go to state 104


State 103

   57 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF . $@4 elif_stmt else_stmt

    $default  reduce using rule 56 ($@4)

    $@4  go to state 105


State 104

   11 param: data_type ID OS CS COLON INT ID .

    $default  reduce using rule 11 (param)


State 105

   57 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 . elif_stmt else_stmt

    ELIF  shift, and go to state 106

    $default  reduce using rule 62 (elif_stmt)

    elif_stmt  go to state 107


State 106

   61 elif_stmt: ELIF . $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt

    $default  reduce using rule 58 ($@5)

    $@5  go to state 108


State 107

   57 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt . else_stmt

    ELSE  shift, and go to state 109

    $default  reduce using rule 64 (else_stmt)

    else_stmt  go to state 110


State 108

   61 elif_stmt: ELIF $@5 . OC expr CC $@6 OF stmt_list CF $@7 elif_stmt

    OC  shift, and go to state 111


State 109

   63 else_stmt: ELSE . OF stmt_list CF

    OF  shift, and go to state 112


State 110

   57 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt .

    $default  reduce using rule 57 (if_stmt)


State 111

   61 elif_stmt: ELIF $@5 OC . expr CC $@6 OF stmt_list CF $@7 elif_stmt

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 35
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 113
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31


State 112

   63 else_stmt: ELSE OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    IF         shift, and go to state 21

    $default  reduce using rule 13 (stmt_list)

    stmt_list     go to state 114
    stmt          go to state 23
    declaration   go to state 24
    return_stmt   go to state 25
    data_type     go to state 26
    expr          go to state 27
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31
    assign        go to state 32
    if_stmt       go to state 33


State 113

   25 expr: expr . ADD expr
   26     | expr . SUBTRACT expr
   27     | expr . MULTIPLY expr
   28     | expr . DIVIDE expr
   29     | expr . LE expr
   30     | expr . GE expr
   31     | expr . LT expr
   32     | expr . GT expr
   33     | expr . EQ expr
   34     | expr . NE expr
   35     | expr . AND expr
   36     | expr . OR expr
   37     | expr . MODULO expr
   38     | expr . BITAND expr
   39     | expr . BITOR expr
   40     | expr . XOR expr
   61 elif_stmt: ELIF $@5 OC expr . CC $@6 OF stmt_list CF $@7 elif_stmt

    LE        shift, and go to state 44
    GE        shift, and go to state 45
    EQ        shift, and go to state 46
    NE        shift, and go to state 47
    GT        shift, and go to state 48
    LT        shift, and go to state 49
    AND       shift, and go to state 50
    OR        shift, and go to state 51
    ADD       shift, and go to state 52
    SUBTRACT  shift, and go to state 53
    DIVIDE    shift, and go to state 54
    MULTIPLY  shift, and go to state 55
    MODULO    shift, and go to state 56
    BITAND    shift, and go to state 57
    BITOR     shift, and go to state 58
    XOR       shift, and go to state 59
    CC        shift, and go to state 115


State 114

   63 else_stmt: ELSE OF stmt_list . CF

    CF  shift, and go to state 116


State 115

   61 elif_stmt: ELIF $@5 OC expr CC . $@6 OF stmt_list CF $@7 elif_stmt

    $default  reduce using rule 59 ($@6)

    $@6  go to state 117


State 116

   63 else_stmt: ELSE OF stmt_list CF .

    $default  reduce using rule 63 (else_stmt)


State 117

   61 elif_stmt: ELIF $@5 OC expr CC $@6 . OF stmt_list CF $@7 elif_stmt

    OF  shift, and go to state 118


State 118

   61 elif_stmt: ELIF $@5 OC expr CC $@6 OF . stmt_list CF $@7 elif_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    IF         shift, and go to state 21

    $default  reduce using rule 13 (stmt_list)

    stmt_list     go to state 119
    stmt          go to state 23
    declaration   go to state 24
    return_stmt   go to state 25
    data_type     go to state 26
    expr          go to state 27
    unary_expr    go to state 28
    primary_expr  go to state 29
    unary_op      go to state 30
    const         go to state 31
    assign        go to state 32
    if_stmt       go to state 33


State 119

   61 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list . CF $@7 elif_stmt

    CF  shift, and go to state 120


State 120

   61 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF . $@7 elif_stmt

    $default  reduce using rule 60 ($@7)

    $@7  go to state 121


State 121

   61 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF $@7 . elif_stmt

    ELIF  shift, and go to state 106

    $default  reduce using rule 62 (elif_stmt)

    elif_stmt  go to state 122


State 122

   61 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt .

    $default  reduce using rule 61 (elif_stmt)
