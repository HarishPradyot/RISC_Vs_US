Terminals unused in grammar

    LEFTSHIFT
    RIGHTSHIFT
    STR
    PRINT
    SCAN


Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 $@1: %empty

    5 func: $@1 func_prefix OF stmt_list CF

    6 $@2: %empty

    7 func_prefix: data_type ID $@2 OC param_list CC

    8 param_list: param_list COMMA param
    9           | param
   10           | %empty

   11 param: data_type ID
   12      | data_type ID OS CS COLON INT ID

   13 stmt_list: stmt stmt_list
   14          | %empty

   15 stmt: declaration
   16     | assign SCOL
   17     | expr SCOL
   18     | return_stmt SCOL
   19     | if_stmt
   20     | while_loop_stmt
   21     | for_loop_stmt
   22     | BREAK SCOL
   23     | CONTINUE SCOL
   24     | switch_stmt

   25 declaration: data_type ID SCOL
   26            | data_type ID ASSIGN expr SCOL

   27 return_stmt: RETURN expr

   28 data_type: INT
   29          | FLOAT
   30          | CHAR

   31 expr: expr ADD expr
   32     | expr SUBTRACT expr
   33     | expr MULTIPLY expr
   34     | expr DIVIDE expr
   35     | expr LE expr
   36     | expr GE expr
   37     | expr LT expr
   38     | expr GT expr
   39     | expr EQ expr
   40     | expr NE expr
   41     | expr AND expr
   42     | expr OR expr
   43     | expr MODULO expr
   44     | expr BITAND expr
   45     | expr BITOR expr
   46     | expr XOR expr
   47     | unary_expr
   48     | primary_expr
   49     | postfix_expr

   50 postfix_expr: func_call

   51 unary_expr: unary_op primary_expr

   52 primary_expr: ID
   53             | const
   54             | OC expr CC

   55 unary_op: ADD
   56         | SUBTRACT
   57         | NOT
   58         | NEGATION

   59 const: INT_NUM
   60      | CHARACTER

   61 assign: ID ASSIGN expr

   62 $@3: %empty

   63 $@4: %empty

   64 $@5: %empty

   65 if_stmt: IF $@3 OC expr CC $@4 OF stmt_list CF $@5 elif_stmt else_stmt

   66 $@6: %empty

   67 $@7: %empty

   68 $@8: %empty

   69 elif_stmt: ELIF $@6 OC expr CC $@7 OF stmt_list CF $@8 elif_stmt
   70          | %empty

   71 else_stmt: ELSE OF stmt_list CF
   72          | %empty

   73 $@9: %empty

   74 $@10: %empty

   75 $@11: %empty

   76 switch_stmt: SWITCH $@9 OC ID $@10 CC OF case_stmt_list $@11 default_stmt CF

   77 case_stmt_list: case_stmt case_stmt_list
   78               | %empty

   79 $@12: %empty

   80 $@13: %empty

   81 case_stmt: CASE $@12 OC const $@13 CC COLON stmt_list

   82 default_stmt: DEFAULT COLON stmt_list
   83             | %empty

   84 $@14: %empty

   85 $@15: %empty

   86 while_loop_stmt: WHILE $@14 OC expr CC $@15 OF stmt_list CF

   87 $@16: %empty

   88 $@17: %empty

   89 $@18: %empty

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 assign CC $@18 OF stmt_list CF

   91 func_call: ID OC arg_list CC

   92 arg_list: arg COMMA arg_list
   93         | arg
   94         | %empty

   95 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <node> (258) 12 28
    CHAR <node> (259) 30
    FLOAT <node> (260) 29
    RETURN <node> (261) 27
    INT_NUM <node> (262) 59
    ID <node> (263) 7 11 12 25 26 52 61 76 91
    LEFTSHIFT <node> (264)
    RIGHTSHIFT <node> (265)
    LE <node> (266) 35
    GE <node> (267) 36
    EQ <node> (268) 39
    NE <node> (269) 40
    GT <node> (270) 38
    LT <node> (271) 37
    AND <node> (272) 41
    OR <node> (273) 42
    NOT <node> (274) 57
    ADD <node> (275) 31 55
    SUBTRACT <node> (276) 32 56
    DIVIDE <node> (277) 34
    MULTIPLY <node> (278) 33
    MODULO <node> (279) 43
    BITAND <node> (280) 44
    BITOR <node> (281) 45
    NEGATION <node> (282) 58
    XOR <node> (283) 46
    STR <node> (284)
    CHARACTER <node> (285) 60
    CC <node> (286) 7 54 65 69 76 81 86 90 91
    OC <node> (287) 7 54 65 69 76 81 86 90 91
    CS <node> (288) 12
    OS <node> (289) 12
    CF <node> (290) 5 65 69 71 76 86 90
    OF <node> (291) 5 65 69 71 76 86 90
    COMMA <node> (292) 8 92
    COLON <node> (293) 12 81 82
    SCOL <node> (294) 16 17 18 22 23 25 26 90
    PRINT <node> (295)
    SCAN <node> (296)
    SWITCH <node> (297) 76
    CASE <node> (298) 81
    BREAK <node> (299) 22
    DEFAULT <node> (300) 82
    IF <node> (301) 65
    ELIF <node> (302) 69
    ELSE <node> (303) 71
    WHILE <node> (304) 86
    FOR <node> (305) 90
    CONTINUE <node> (306) 23
    ASSIGN (307) 26 61


Nonterminals, with rules where they appear

    $accept (53)
        on left: 0
    Program <node> (54)
        on left: 1
        on right: 0
    func_list <node> (55)
        on left: 2 3
        on right: 1 2
    func <node> (56)
        on left: 5
        on right: 2
    $@1 (57)
        on left: 4
        on right: 5
    func_prefix <node> (58)
        on left: 7
        on right: 5
    $@2 (59)
        on left: 6
        on right: 7
    param_list <node> (60)
        on left: 8 9 10
        on right: 7 8
    param <node> (61)
        on left: 11 12
        on right: 8 9
    stmt_list <node> (62)
        on left: 13 14
        on right: 5 13 65 69 71 81 82 86 90
    stmt <node> (63)
        on left: 15 16 17 18 19 20 21 22 23 24
        on right: 13
    declaration <node> (64)
        on left: 25 26
        on right: 15
    return_stmt <node> (65)
        on left: 27
        on right: 18
    data_type <node> (66)
        on left: 28 29 30
        on right: 7 11 12 25 26
    expr <node> (67)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
        on right: 17 26 27 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 54 61 65 69 86 90 95
    postfix_expr <node> (68)
        on left: 50
        on right: 49
    unary_expr <node> (69)
        on left: 51
        on right: 47
    primary_expr <node> (70)
        on left: 52 53 54
        on right: 48 51
    unary_op <node> (71)
        on left: 55 56 57 58
        on right: 51
    const <node> (72)
        on left: 59 60
        on right: 53 81
    assign <node> (73)
        on left: 61
        on right: 16 90
    if_stmt <node> (74)
        on left: 65
        on right: 19
    $@3 (75)
        on left: 62
        on right: 65
    $@4 (76)
        on left: 63
        on right: 65
    $@5 (77)
        on left: 64
        on right: 65
    elif_stmt <node> (78)
        on left: 69 70
        on right: 65 69
    $@6 (79)
        on left: 66
        on right: 69
    $@7 (80)
        on left: 67
        on right: 69
    $@8 (81)
        on left: 68
        on right: 69
    else_stmt <node> (82)
        on left: 71 72
        on right: 65
    switch_stmt <node> (83)
        on left: 76
        on right: 24
    $@9 (84)
        on left: 73
        on right: 76
    $@10 (85)
        on left: 74
        on right: 76
    $@11 (86)
        on left: 75
        on right: 76
    case_stmt_list <node> (87)
        on left: 77 78
        on right: 76 77
    case_stmt <node> (88)
        on left: 81
        on right: 77
    $@12 (89)
        on left: 79
        on right: 81
    $@13 (90)
        on left: 80
        on right: 81
    default_stmt (91)
        on left: 82 83
        on right: 76
    while_loop_stmt <node> (92)
        on left: 86
        on right: 20
    $@14 (93)
        on left: 84
        on right: 86
    $@15 (94)
        on left: 85
        on right: 86
    for_loop_stmt <node> (95)
        on left: 90
        on right: 21
    $@16 (96)
        on left: 87
        on right: 90
    $@17 (97)
        on left: 88
        on right: 90
    $@18 (98)
        on left: 89
        on right: 90
    func_call <node> (99)
        on left: 91
        on right: 50
    arg_list (100)
        on left: 92 93 94
        on right: 91 92
    arg (101)
        on left: 95
        on right: 92 93


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    $end      reduce using rule 1 (Program)
    $default  reduce using rule 4 ($@1)

    func  go to state 4
    $@1   go to state 5


State 3

    0 $accept: Program $end .

    $default  accept


State 4

    2 func_list: func_list func .

    $default  reduce using rule 2 (func_list)


State 5

    5 func: $@1 . func_prefix OF stmt_list CF

    INT    shift, and go to state 6
    CHAR   shift, and go to state 7
    FLOAT  shift, and go to state 8

    func_prefix  go to state 9
    data_type    go to state 10


State 6

   28 data_type: INT .

    $default  reduce using rule 28 (data_type)


State 7

   30 data_type: CHAR .

    $default  reduce using rule 30 (data_type)


State 8

   29 data_type: FLOAT .

    $default  reduce using rule 29 (data_type)


State 9

    5 func: $@1 func_prefix . OF stmt_list CF

    OF  shift, and go to state 11


State 10

    7 func_prefix: data_type . ID $@2 OC param_list CC

    ID  shift, and go to state 12


State 11

    5 func: $@1 func_prefix OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 28
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 12

    7 func_prefix: data_type ID . $@2 OC param_list CC

    $default  reduce using rule 6 ($@2)

    $@2  go to state 45


State 13

   27 return_stmt: RETURN . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 47
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 14

   59 const: INT_NUM .

    $default  reduce using rule 59 (const)


State 15

   52 primary_expr: ID .
   61 assign: ID . ASSIGN expr
   91 func_call: ID . OC arg_list CC

    OC      shift, and go to state 48
    ASSIGN  shift, and go to state 49

    $default  reduce using rule 52 (primary_expr)


State 16

   57 unary_op: NOT .

    $default  reduce using rule 57 (unary_op)


State 17

   55 unary_op: ADD .

    $default  reduce using rule 55 (unary_op)


State 18

   56 unary_op: SUBTRACT .

    $default  reduce using rule 56 (unary_op)


State 19

   58 unary_op: NEGATION .

    $default  reduce using rule 58 (unary_op)


State 20

   60 const: CHARACTER .

    $default  reduce using rule 60 (const)


State 21

   54 primary_expr: OC . expr CC

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 50
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 22

   76 switch_stmt: SWITCH . $@9 OC ID $@10 CC OF case_stmt_list $@11 default_stmt CF

    $default  reduce using rule 73 ($@9)

    $@9  go to state 51


State 23

   22 stmt: BREAK . SCOL

    SCOL  shift, and go to state 52


State 24

   65 if_stmt: IF . $@3 OC expr CC $@4 OF stmt_list CF $@5 elif_stmt else_stmt

    $default  reduce using rule 62 ($@3)

    $@3  go to state 53


State 25

   86 while_loop_stmt: WHILE . $@14 OC expr CC $@15 OF stmt_list CF

    $default  reduce using rule 84 ($@14)

    $@14  go to state 54


State 26

   90 for_loop_stmt: FOR . OC assign SCOL $@16 expr SCOL $@17 assign CC $@18 OF stmt_list CF

    OC  shift, and go to state 55


State 27

   23 stmt: CONTINUE . SCOL

    SCOL  shift, and go to state 56


State 28

    5 func: $@1 func_prefix OF stmt_list . CF

    CF  shift, and go to state 57


State 29

   13 stmt_list: stmt . stmt_list

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 58
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 30

   15 stmt: declaration .

    $default  reduce using rule 15 (stmt)


State 31

   18 stmt: return_stmt . SCOL

    SCOL  shift, and go to state 59


State 32

   25 declaration: data_type . ID SCOL
   26            | data_type . ID ASSIGN expr SCOL

    ID  shift, and go to state 60


State 33

   17 stmt: expr . SCOL
   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    SCOL      shift, and go to state 77


State 34

   49 expr: postfix_expr .

    $default  reduce using rule 49 (expr)


State 35

   47 expr: unary_expr .

    $default  reduce using rule 47 (expr)


State 36

   48 expr: primary_expr .

    $default  reduce using rule 48 (expr)


State 37

   51 unary_expr: unary_op . primary_expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 78
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    primary_expr  go to state 79
    const         go to state 38


State 38

   53 primary_expr: const .

    $default  reduce using rule 53 (primary_expr)


State 39

   16 stmt: assign . SCOL

    SCOL  shift, and go to state 80


State 40

   19 stmt: if_stmt .

    $default  reduce using rule 19 (stmt)


State 41

   24 stmt: switch_stmt .

    $default  reduce using rule 24 (stmt)


State 42

   20 stmt: while_loop_stmt .

    $default  reduce using rule 20 (stmt)


State 43

   21 stmt: for_loop_stmt .

    $default  reduce using rule 21 (stmt)


State 44

   50 postfix_expr: func_call .

    $default  reduce using rule 50 (postfix_expr)


State 45

    7 func_prefix: data_type ID $@2 . OC param_list CC

    OC  shift, and go to state 81


State 46

   52 primary_expr: ID .
   91 func_call: ID . OC arg_list CC

    OC  shift, and go to state 48

    $default  reduce using rule 52 (primary_expr)


State 47

   27 return_stmt: RETURN expr .
   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76

    $default  reduce using rule 27 (return_stmt)


State 48

   91 func_call: ID OC . arg_list CC

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    $default  reduce using rule 94 (arg_list)

    expr          go to state 82
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44
    arg_list      go to state 83
    arg           go to state 84


State 49

   61 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 85
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 50

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   54 primary_expr: OC expr . CC

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    CC        shift, and go to state 86


State 51

   76 switch_stmt: SWITCH $@9 . OC ID $@10 CC OF case_stmt_list $@11 default_stmt CF

    OC  shift, and go to state 87


State 52

   22 stmt: BREAK SCOL .

    $default  reduce using rule 22 (stmt)


State 53

   65 if_stmt: IF $@3 . OC expr CC $@4 OF stmt_list CF $@5 elif_stmt else_stmt

    OC  shift, and go to state 88


State 54

   86 while_loop_stmt: WHILE $@14 . OC expr CC $@15 OF stmt_list CF

    OC  shift, and go to state 89


State 55

   90 for_loop_stmt: FOR OC . assign SCOL $@16 expr SCOL $@17 assign CC $@18 OF stmt_list CF

    ID  shift, and go to state 90

    assign  go to state 91


State 56

   23 stmt: CONTINUE SCOL .

    $default  reduce using rule 23 (stmt)


State 57

    5 func: $@1 func_prefix OF stmt_list CF .

    $default  reduce using rule 5 (func)


State 58

   13 stmt_list: stmt stmt_list .

    $default  reduce using rule 13 (stmt_list)


State 59

   18 stmt: return_stmt SCOL .

    $default  reduce using rule 18 (stmt)


State 60

   25 declaration: data_type ID . SCOL
   26            | data_type ID . ASSIGN expr SCOL

    SCOL    shift, and go to state 92
    ASSIGN  shift, and go to state 93


State 61

   35 expr: expr LE . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 94
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 62

   36 expr: expr GE . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 95
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 63

   39 expr: expr EQ . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 96
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 64

   40 expr: expr NE . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 97
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 65

   38 expr: expr GT . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 98
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 66

   37 expr: expr LT . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 99
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 67

   41 expr: expr AND . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 100
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 68

   42 expr: expr OR . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 101
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 69

   31 expr: expr ADD . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 102
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 70

   32 expr: expr SUBTRACT . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 103
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 71

   34 expr: expr DIVIDE . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 104
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 72

   33 expr: expr MULTIPLY . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 105
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 73

   43 expr: expr MODULO . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 106
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 74

   44 expr: expr BITAND . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 107
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 75

   45 expr: expr BITOR . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 108
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 76

   46 expr: expr XOR . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 109
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 77

   17 stmt: expr SCOL .

    $default  reduce using rule 17 (stmt)


State 78

   52 primary_expr: ID .

    $default  reduce using rule 52 (primary_expr)


State 79

   51 unary_expr: unary_op primary_expr .

    $default  reduce using rule 51 (unary_expr)


State 80

   16 stmt: assign SCOL .

    $default  reduce using rule 16 (stmt)


State 81

    7 func_prefix: data_type ID $@2 OC . param_list CC

    INT    shift, and go to state 6
    CHAR   shift, and go to state 7
    FLOAT  shift, and go to state 8

    $default  reduce using rule 10 (param_list)

    param_list  go to state 110
    param       go to state 111
    data_type   go to state 112


State 82

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   95 arg: expr .

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76

    $default  reduce using rule 95 (arg)


State 83

   91 func_call: ID OC arg_list . CC

    CC  shift, and go to state 113


State 84

   92 arg_list: arg . COMMA arg_list
   93         | arg .

    COMMA  shift, and go to state 114

    $default  reduce using rule 93 (arg_list)


State 85

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   61 assign: ID ASSIGN expr .

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76

    $default  reduce using rule 61 (assign)


State 86

   54 primary_expr: OC expr CC .

    $default  reduce using rule 54 (primary_expr)


State 87

   76 switch_stmt: SWITCH $@9 OC . ID $@10 CC OF case_stmt_list $@11 default_stmt CF

    ID  shift, and go to state 115


State 88

   65 if_stmt: IF $@3 OC . expr CC $@4 OF stmt_list CF $@5 elif_stmt else_stmt

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 116
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 89

   86 while_loop_stmt: WHILE $@14 OC . expr CC $@15 OF stmt_list CF

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 117
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 90

   61 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 49


State 91

   90 for_loop_stmt: FOR OC assign . SCOL $@16 expr SCOL $@17 assign CC $@18 OF stmt_list CF

    SCOL  shift, and go to state 118


State 92

   25 declaration: data_type ID SCOL .

    $default  reduce using rule 25 (declaration)


State 93

   26 declaration: data_type ID ASSIGN . expr SCOL

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 119
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 94

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   35     | expr LE expr .
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 35 (expr)


State 95

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   36     | expr GE expr .
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 36 (expr)


State 96

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   39     | expr EQ expr .
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 39 (expr)


State 97

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   40     | expr NE expr .
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 40 (expr)


State 98

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   38     | expr GT expr .
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 38 (expr)


State 99

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   37     | expr LT expr .
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 37 (expr)


State 100

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   41     | expr AND expr .
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76

    $default  reduce using rule 41 (expr)


State 101

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   42     | expr OR expr .
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76

    $default  reduce using rule 42 (expr)


State 102

   31 expr: expr . ADD expr
   31     | expr ADD expr .
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 31 (expr)


State 103

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   32     | expr SUBTRACT expr .
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 32 (expr)


State 104

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   34     | expr DIVIDE expr .
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    $default  reduce using rule 34 (expr)


State 105

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   33     | expr MULTIPLY expr .
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    $default  reduce using rule 33 (expr)


State 106

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   43     | expr MODULO expr .
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    $default  reduce using rule 43 (expr)


State 107

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   44     | expr BITAND expr .
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 44 (expr)


State 108

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   45     | expr BITOR expr .
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    XOR       shift, and go to state 76

    $default  reduce using rule 45 (expr)


State 109

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   46     | expr XOR expr .

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74

    $default  reduce using rule 46 (expr)


State 110

    7 func_prefix: data_type ID $@2 OC param_list . CC
    8 param_list: param_list . COMMA param

    CC     shift, and go to state 120
    COMMA  shift, and go to state 121


State 111

    9 param_list: param .

    $default  reduce using rule 9 (param_list)


State 112

   11 param: data_type . ID
   12      | data_type . ID OS CS COLON INT ID

    ID  shift, and go to state 122


State 113

   91 func_call: ID OC arg_list CC .

    $default  reduce using rule 91 (func_call)


State 114

   92 arg_list: arg COMMA . arg_list

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    $default  reduce using rule 94 (arg_list)

    expr          go to state 82
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44
    arg_list      go to state 123
    arg           go to state 84


State 115

   76 switch_stmt: SWITCH $@9 OC ID . $@10 CC OF case_stmt_list $@11 default_stmt CF

    $default  reduce using rule 74 ($@10)

    $@10  go to state 124


State 116

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   65 if_stmt: IF $@3 OC expr . CC $@4 OF stmt_list CF $@5 elif_stmt else_stmt

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    CC        shift, and go to state 125


State 117

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   86 while_loop_stmt: WHILE $@14 OC expr . CC $@15 OF stmt_list CF

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    CC        shift, and go to state 126


State 118

   90 for_loop_stmt: FOR OC assign SCOL . $@16 expr SCOL $@17 assign CC $@18 OF stmt_list CF

    $default  reduce using rule 87 ($@16)

    $@16  go to state 127


State 119

   26 declaration: data_type ID ASSIGN expr . SCOL
   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    SCOL      shift, and go to state 128


State 120

    7 func_prefix: data_type ID $@2 OC param_list CC .

    $default  reduce using rule 7 (func_prefix)


State 121

    8 param_list: param_list COMMA . param

    INT    shift, and go to state 6
    CHAR   shift, and go to state 7
    FLOAT  shift, and go to state 8

    param      go to state 129
    data_type  go to state 112


State 122

   11 param: data_type ID .
   12      | data_type ID . OS CS COLON INT ID

    OS  shift, and go to state 130

    $default  reduce using rule 11 (param)


State 123

   92 arg_list: arg COMMA arg_list .

    $default  reduce using rule 92 (arg_list)


State 124

   76 switch_stmt: SWITCH $@9 OC ID $@10 . CC OF case_stmt_list $@11 default_stmt CF

    CC  shift, and go to state 131


State 125

   65 if_stmt: IF $@3 OC expr CC . $@4 OF stmt_list CF $@5 elif_stmt else_stmt

    $default  reduce using rule 63 ($@4)

    $@4  go to state 132


State 126

   86 while_loop_stmt: WHILE $@14 OC expr CC . $@15 OF stmt_list CF

    $default  reduce using rule 85 ($@15)

    $@15  go to state 133


State 127

   90 for_loop_stmt: FOR OC assign SCOL $@16 . expr SCOL $@17 assign CC $@18 OF stmt_list CF

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 134
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 128

   26 declaration: data_type ID ASSIGN expr SCOL .

    $default  reduce using rule 26 (declaration)


State 129

    8 param_list: param_list COMMA param .

    $default  reduce using rule 8 (param_list)


State 130

   12 param: data_type ID OS . CS COLON INT ID

    CS  shift, and go to state 135


State 131

   76 switch_stmt: SWITCH $@9 OC ID $@10 CC . OF case_stmt_list $@11 default_stmt CF

    OF  shift, and go to state 136


State 132

   65 if_stmt: IF $@3 OC expr CC $@4 . OF stmt_list CF $@5 elif_stmt else_stmt

    OF  shift, and go to state 137


State 133

   86 while_loop_stmt: WHILE $@14 OC expr CC $@15 . OF stmt_list CF

    OF  shift, and go to state 138


State 134

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   90 for_loop_stmt: FOR OC assign SCOL $@16 expr . SCOL $@17 assign CC $@18 OF stmt_list CF

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    SCOL      shift, and go to state 139


State 135

   12 param: data_type ID OS CS . COLON INT ID

    COLON  shift, and go to state 140


State 136

   76 switch_stmt: SWITCH $@9 OC ID $@10 CC OF . case_stmt_list $@11 default_stmt CF

    CASE  shift, and go to state 141

    $default  reduce using rule 78 (case_stmt_list)

    case_stmt_list  go to state 142
    case_stmt       go to state 143


State 137

   65 if_stmt: IF $@3 OC expr CC $@4 OF . stmt_list CF $@5 elif_stmt else_stmt

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 144
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 138

   86 while_loop_stmt: WHILE $@14 OC expr CC $@15 OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 145
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 139

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL . $@17 assign CC $@18 OF stmt_list CF

    $default  reduce using rule 88 ($@17)

    $@17  go to state 146


State 140

   12 param: data_type ID OS CS COLON . INT ID

    INT  shift, and go to state 147


State 141

   81 case_stmt: CASE . $@12 OC const $@13 CC COLON stmt_list

    $default  reduce using rule 79 ($@12)

    $@12  go to state 148


State 142

   76 switch_stmt: SWITCH $@9 OC ID $@10 CC OF case_stmt_list . $@11 default_stmt CF

    $default  reduce using rule 75 ($@11)

    $@11  go to state 149


State 143

   77 case_stmt_list: case_stmt . case_stmt_list

    CASE  shift, and go to state 141

    $default  reduce using rule 78 (case_stmt_list)

    case_stmt_list  go to state 150
    case_stmt       go to state 143


State 144

   65 if_stmt: IF $@3 OC expr CC $@4 OF stmt_list . CF $@5 elif_stmt else_stmt

    CF  shift, and go to state 151


State 145

   86 while_loop_stmt: WHILE $@14 OC expr CC $@15 OF stmt_list . CF

    CF  shift, and go to state 152


State 146

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 . assign CC $@18 OF stmt_list CF

    ID  shift, and go to state 90

    assign  go to state 153


State 147

   12 param: data_type ID OS CS COLON INT . ID

    ID  shift, and go to state 154


State 148

   81 case_stmt: CASE $@12 . OC const $@13 CC COLON stmt_list

    OC  shift, and go to state 155


State 149

   76 switch_stmt: SWITCH $@9 OC ID $@10 CC OF case_stmt_list $@11 . default_stmt CF

    DEFAULT  shift, and go to state 156

    $default  reduce using rule 83 (default_stmt)

    default_stmt  go to state 157


State 150

   77 case_stmt_list: case_stmt case_stmt_list .

    $default  reduce using rule 77 (case_stmt_list)


State 151

   65 if_stmt: IF $@3 OC expr CC $@4 OF stmt_list CF . $@5 elif_stmt else_stmt

    $default  reduce using rule 64 ($@5)

    $@5  go to state 158


State 152

   86 while_loop_stmt: WHILE $@14 OC expr CC $@15 OF stmt_list CF .

    $default  reduce using rule 86 (while_loop_stmt)


State 153

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 assign . CC $@18 OF stmt_list CF

    CC  shift, and go to state 159


State 154

   12 param: data_type ID OS CS COLON INT ID .

    $default  reduce using rule 12 (param)


State 155

   81 case_stmt: CASE $@12 OC . const $@13 CC COLON stmt_list

    INT_NUM    shift, and go to state 14
    CHARACTER  shift, and go to state 20

    const  go to state 160


State 156

   82 default_stmt: DEFAULT . COLON stmt_list

    COLON  shift, and go to state 161


State 157

   76 switch_stmt: SWITCH $@9 OC ID $@10 CC OF case_stmt_list $@11 default_stmt . CF

    CF  shift, and go to state 162


State 158

   65 if_stmt: IF $@3 OC expr CC $@4 OF stmt_list CF $@5 . elif_stmt else_stmt

    ELIF  shift, and go to state 163

    $default  reduce using rule 70 (elif_stmt)

    elif_stmt  go to state 164


State 159

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 assign CC . $@18 OF stmt_list CF

    $default  reduce using rule 89 ($@18)

    $@18  go to state 165


State 160

   81 case_stmt: CASE $@12 OC const . $@13 CC COLON stmt_list

    $default  reduce using rule 80 ($@13)

    $@13  go to state 166


State 161

   82 default_stmt: DEFAULT COLON . stmt_list

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 167
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 162

   76 switch_stmt: SWITCH $@9 OC ID $@10 CC OF case_stmt_list $@11 default_stmt CF .

    $default  reduce using rule 76 (switch_stmt)


State 163

   69 elif_stmt: ELIF . $@6 OC expr CC $@7 OF stmt_list CF $@8 elif_stmt

    $default  reduce using rule 66 ($@6)

    $@6  go to state 168


State 164

   65 if_stmt: IF $@3 OC expr CC $@4 OF stmt_list CF $@5 elif_stmt . else_stmt

    ELSE  shift, and go to state 169

    $default  reduce using rule 72 (else_stmt)

    else_stmt  go to state 170


State 165

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 assign CC $@18 . OF stmt_list CF

    OF  shift, and go to state 171


State 166

   81 case_stmt: CASE $@12 OC const $@13 . CC COLON stmt_list

    CC  shift, and go to state 172


State 167

   82 default_stmt: DEFAULT COLON stmt_list .

    $default  reduce using rule 82 (default_stmt)


State 168

   69 elif_stmt: ELIF $@6 . OC expr CC $@7 OF stmt_list CF $@8 elif_stmt

    OC  shift, and go to state 173


State 169

   71 else_stmt: ELSE . OF stmt_list CF

    OF  shift, and go to state 174


State 170

   65 if_stmt: IF $@3 OC expr CC $@4 OF stmt_list CF $@5 elif_stmt else_stmt .

    $default  reduce using rule 65 (if_stmt)


State 171

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 assign CC $@18 OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 175
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 172

   81 case_stmt: CASE $@12 OC const $@13 CC . COLON stmt_list

    COLON  shift, and go to state 176


State 173

   69 elif_stmt: ELIF $@6 OC . expr CC $@7 OF stmt_list CF $@8 elif_stmt

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 177
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44


State 174

   71 else_stmt: ELSE OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 178
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 175

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 assign CC $@18 OF stmt_list . CF

    CF  shift, and go to state 179


State 176

   81 case_stmt: CASE $@12 OC const $@13 CC COLON . stmt_list

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 180
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 177

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   69 elif_stmt: ELIF $@6 OC expr . CC $@7 OF stmt_list CF $@8 elif_stmt

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    CC        shift, and go to state 181


State 178

   71 else_stmt: ELSE OF stmt_list . CF

    CF  shift, and go to state 182


State 179

   90 for_loop_stmt: FOR OC assign SCOL $@16 expr SCOL $@17 assign CC $@18 OF stmt_list CF .

    $default  reduce using rule 90 (for_loop_stmt)


State 180

   81 case_stmt: CASE $@12 OC const $@13 CC COLON stmt_list .

    $default  reduce using rule 81 (case_stmt)


State 181

   69 elif_stmt: ELIF $@6 OC expr CC . $@7 OF stmt_list CF $@8 elif_stmt

    $default  reduce using rule 67 ($@7)

    $@7  go to state 183


State 182

   71 else_stmt: ELSE OF stmt_list CF .

    $default  reduce using rule 71 (else_stmt)


State 183

   69 elif_stmt: ELIF $@6 OC expr CC $@7 . OF stmt_list CF $@8 elif_stmt

    OF  shift, and go to state 184


State 184

   69 elif_stmt: ELIF $@6 OC expr CC $@7 OF . stmt_list CF $@8 elif_stmt

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 13
    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 15
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21
    SWITCH     shift, and go to state 22
    BREAK      shift, and go to state 23
    IF         shift, and go to state 24
    WHILE      shift, and go to state 25
    FOR        shift, and go to state 26
    CONTINUE   shift, and go to state 27

    $default  reduce using rule 14 (stmt_list)

    stmt_list        go to state 185
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


State 185

   69 elif_stmt: ELIF $@6 OC expr CC $@7 OF stmt_list . CF $@8 elif_stmt

    CF  shift, and go to state 186


State 186

   69 elif_stmt: ELIF $@6 OC expr CC $@7 OF stmt_list CF . $@8 elif_stmt

    $default  reduce using rule 68 ($@8)

    $@8  go to state 187


State 187

   69 elif_stmt: ELIF $@6 OC expr CC $@7 OF stmt_list CF $@8 . elif_stmt

    ELIF  shift, and go to state 163

    $default  reduce using rule 70 (elif_stmt)

    elif_stmt  go to state 188


State 188

   69 elif_stmt: ELIF $@6 OC expr CC $@7 OF stmt_list CF $@8 elif_stmt .

    $default  reduce using rule 69 (elif_stmt)
