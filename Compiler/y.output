Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | ε

    4 $@1: ε

    5 func: func_prefix OF $@1 stmt_list CF

    6 $@2: ε

    7 func_prefix: func_data_type ID $@2 OC param_list CC

    8 func_data_type: data_type
    9               | VOID

   10 $@3: ε

   11 param_list: param $@3 COMMA param_list
   12           | param
   13           | ε

   14 param: data_type ID

   15 stmt_list: stmt stmt_list
   16          | ε

   17 stmt: declaration
   18     | assign SCOL
   19     | expr SCOL
   20     | return_stmt SCOL
   21     | if_stmt
   22     | while_loop_stmt
   23     | for_loop_stmt
   24     | BREAK SCOL
   25     | CONTINUE SCOL
   26     | switch_stmt
   27     | INPUT OC ID CC SCOL
   28     | OUTPUT OC expr CC SCOL
   29     | OUTPUT OC STR CC SCOL

   30 declaration: data_type ID SCOL
   31            | STRING ID ASSIGN STR SCOL
   32            | data_type ID ASSIGN expr SCOL
   33            | data_type ID OS INT_NUM CS SCOL

   34 $@4: ε

   35 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

   36 $@5: ε

   37 arr_values: const $@5 COMMA arr_values
   38           | const

   39 return_stmt: RETURN expr

   40 data_type: INT
   41          | FLOAT
   42          | CHAR

   43 expr: expr ADD expr
   44     | expr SUBTRACT expr
   45     | expr MULTIPLY expr
   46     | expr DIVIDE expr
   47     | expr LE expr
   48     | expr GE expr
   49     | expr LT expr
   50     | expr GT expr
   51     | expr EQ expr
   52     | expr NE expr
   53     | expr AND expr
   54     | expr OR expr
   55     | expr MODULO expr
   56     | expr BITAND expr
   57     | expr BITOR expr
   58     | expr XOR expr
   59     | expr LEFTSHIFT expr
   60     | expr RIGHTSHIFT expr
   61     | unary_expr
   62     | primary_expr
   63     | postfix_expr

   64 postfix_expr: func_call
   65             | ID OS expr CS

   66 unary_expr: unary_op primary_expr

   67 primary_expr: ID
   68             | const
   69             | OC expr CC

   70 unary_op: ADD
   71         | SUBTRACT
   72         | NOT
   73         | NEGATION

   74 const: INT_NUM
   75      | FLOAT_NUM
   76      | CHARACTER

   77 assign: ID ASSIGN expr
   78       | ID OS expr CS ASSIGN expr

   79 $@6: ε

   80 $@7: ε

   81 $@8: ε

   82 $@9: ε

   83 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

   84 $@10: ε

   85 $@11: ε

   86 $@12: ε

   87 $@13: ε

   88 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt
   89          | ε

   90 $@14: ε

   91 else_stmt: ELSE OF $@14 stmt_list CF
   92          | ε

   93 $@15: ε

   94 $@16: ε

   95 $@17: ε

   96 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

   97 case_stmt_list: case_stmt case_stmt_list
   98               | ε

   99 $@18: ε

  100 $@19: ε

  101 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list

  102 default_stmt: DEFAULT COLON stmt_list
  103             | ε

  104 $@20: ε

  105 $@21: ε

  106 $@22: ε

  107 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF

  108 $@23: ε

  109 $@24: ε

  110 $@25: ε

  111 $@26: ε

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

  113 $@27: ε

  114 func_call: ID $@27 OC arg_list CC

  115 arg_list: arg COMMA arg_list
  116         | arg
  117         | ε

  118 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <node> (258) 40
    CHAR <node> (259) 42
    FLOAT <node> (260) 41
    STRING <node> (261) 31
    VOID <node> (262) 9
    RETURN <node> (263) 39
    INT_NUM <node> (264) 33 35 74
    FLOAT_NUM <node> (265) 75
    ID <node> (266) 7 14 27 30 31 32 33 35 65 67 77 78 96 114
    LEFTSHIFT <node> (267) 59
    RIGHTSHIFT <node> (268) 60
    LE <node> (269) 47
    GE <node> (270) 48
    EQ <node> (271) 51
    NE <node> (272) 52
    GT <node> (273) 50
    LT <node> (274) 49
    AND <node> (275) 53
    OR <node> (276) 54
    NOT <node> (277) 72
    ADD <node> (278) 43 70
    SUBTRACT <node> (279) 44 71
    DIVIDE <node> (280) 46
    MULTIPLY <node> (281) 45
    MODULO <node> (282) 55
    BITAND <node> (283) 56
    BITOR <node> (284) 57
    NEGATION <node> (285) 73
    XOR <node> (286) 58
    STR <node> (287) 29 31
    CHARACTER <node> (288) 76
    CC <node> (289) 7 27 28 29 69 83 88 96 101 107 112 114
    OC <node> (290) 7 27 28 29 69 83 88 96 101 107 112 114
    CS <node> (291) 33 35 65 78
    OS <node> (292) 33 35 65 78
    CF <node> (293) 5 35 83 88 91 96 107 112
    OF <node> (294) 5 35 83 88 91 96 107 112
    COMMA <node> (295) 11 37 115
    COLON <node> (296) 101 102
    SCOL <node> (297) 18 19 20 24 25 27 28 29 30 31 32 33 35 112
    OUTPUT <node> (298) 28 29
    INPUT <node> (299) 27
    SWITCH <node> (300) 96
    CASE <node> (301) 101
    BREAK <node> (302) 24
    DEFAULT <node> (303) 102
    IF <node> (304) 83
    ELIF <node> (305) 88
    ELSE <node> (306) 91
    WHILE <node> (307) 107
    FOR <node> (308) 112
    CONTINUE <node> (309) 25
    ASSIGN (310) 31 32 35 77 78


Nonterminals, with rules where they appear

    $accept (56)
        on left: 0
    Program <node> (57)
        on left: 1
        on right: 0
    func_list <node> (58)
        on left: 2 3
        on right: 1 2
    func <node> (59)
        on left: 5
        on right: 2
    $@1 (60)
        on left: 4
        on right: 5
    func_prefix <node> (61)
        on left: 7
        on right: 5
    $@2 (62)
        on left: 6
        on right: 7
    func_data_type <node> (63)
        on left: 8 9
        on right: 7
    param_list <node> (64)
        on left: 11 12 13
        on right: 7 11
    $@3 (65)
        on left: 10
        on right: 11
    param <node> (66)
        on left: 14
        on right: 11 12
    stmt_list <node> (67)
        on left: 15 16
        on right: 5 15 83 88 91 101 102 107 112
    stmt <node> (68)
        on left: 17 18 19 20 21 22 23 24 25 26 27 28 29
        on right: 15
    declaration <node> (69)
        on left: 30 31 32 33 35
        on right: 17
    $@4 (70)
        on left: 34
        on right: 35
    arr_values (71)
        on left: 37 38
        on right: 35 37
    $@5 (72)
        on left: 36
        on right: 37
    return_stmt <node> (73)
        on left: 39
        on right: 20
    data_type <node> (74)
        on left: 40 41 42
        on right: 8 14 30 32 33 35
    expr <node> (75)
        on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
        on right: 19 28 32 39 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 65 69 77 78 83 88 107 112 118
    postfix_expr <node> (76)
        on left: 64 65
        on right: 63
    unary_expr <node> (77)
        on left: 66
        on right: 61
    primary_expr <node> (78)
        on left: 67 68 69
        on right: 62 66
    unary_op <node> (79)
        on left: 70 71 72 73
        on right: 66
    const <node> (80)
        on left: 74 75 76
        on right: 37 38 68 101
    assign <node> (81)
        on left: 77 78
        on right: 18 112
    if_stmt <node> (82)
        on left: 83
        on right: 21
    $@6 (83)
        on left: 79
        on right: 83
    $@7 (84)
        on left: 80
        on right: 83
    $@8 (85)
        on left: 81
        on right: 83
    $@9 (86)
        on left: 82
        on right: 83
    elif_stmt <node> (87)
        on left: 88 89
        on right: 83 88
    $@10 (88)
        on left: 84
        on right: 88
    $@11 (89)
        on left: 85
        on right: 88
    $@12 (90)
        on left: 86
        on right: 88
    $@13 (91)
        on left: 87
        on right: 88
    else_stmt <node> (92)
        on left: 91 92
        on right: 83
    $@14 (93)
        on left: 90
        on right: 91
    switch_stmt <node> (94)
        on left: 96
        on right: 26
    $@15 (95)
        on left: 93
        on right: 96
    $@16 (96)
        on left: 94
        on right: 96
    $@17 (97)
        on left: 95
        on right: 96
    case_stmt_list <node> (98)
        on left: 97 98
        on right: 96 97
    case_stmt <node> (99)
        on left: 101
        on right: 97
    $@18 (100)
        on left: 99
        on right: 101
    $@19 (101)
        on left: 100
        on right: 101
    default_stmt (102)
        on left: 102 103
        on right: 96
    while_loop_stmt <node> (103)
        on left: 107
        on right: 22
    $@20 (104)
        on left: 104
        on right: 107
    $@21 (105)
        on left: 105
        on right: 107
    $@22 (106)
        on left: 106
        on right: 107
    for_loop_stmt <node> (107)
        on left: 112
        on right: 23
    $@23 (108)
        on left: 108
        on right: 112
    $@24 (109)
        on left: 109
        on right: 112
    $@25 (110)
        on left: 110
        on right: 112
    $@26 (111)
        on left: 111
        on right: 112
    func_call <node> (112)
        on left: 114
        on right: 64
    $@27 (113)
        on left: 113
        on right: 114
    arg_list <node> (114)
        on left: 115 116 117
        on right: 114 115
    arg <node> (115)
        on left: 118
        on right: 115 116


State 0

    0 $accept: • Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program • $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list •
    2 func_list: func_list • func

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6
    VOID   shift, and go to state 7

    $default  reduce using rule 1 (Program)

    func            go to state 8
    func_prefix     go to state 9
    func_data_type  go to state 10
    data_type       go to state 11


State 3

    0 $accept: Program $end •

    $default  accept


State 4

   40 data_type: INT •

    $default  reduce using rule 40 (data_type)


State 5

   42 data_type: CHAR •

    $default  reduce using rule 42 (data_type)


State 6

   41 data_type: FLOAT •

    $default  reduce using rule 41 (data_type)


State 7

    9 func_data_type: VOID •

    $default  reduce using rule 9 (func_data_type)


State 8

    2 func_list: func_list func •

    $default  reduce using rule 2 (func_list)


State 9

    5 func: func_prefix • OF $@1 stmt_list CF

    OF  shift, and go to state 12


State 10

    7 func_prefix: func_data_type • ID $@2 OC param_list CC

    ID  shift, and go to state 13


State 11

    8 func_data_type: data_type •

    $default  reduce using rule 8 (func_data_type)


State 12

    5 func: func_prefix OF • $@1 stmt_list CF

    $default  reduce using rule 4 ($@1)

    $@1  go to state 14


State 13

    7 func_prefix: func_data_type ID • $@2 OC param_list CC

    $default  reduce using rule 6 ($@2)

    $@2  go to state 15


State 14

    5 func: func_prefix OF $@1 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 35
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 15

    7 func_prefix: func_data_type ID $@2 • OC param_list CC

    OC  shift, and go to state 52


State 16

   31 declaration: STRING • ID ASSIGN STR SCOL

    ID  shift, and go to state 53


State 17

   39 return_stmt: RETURN • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 55
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 18

   74 const: INT_NUM •

    $default  reduce using rule 74 (const)


State 19

   75 const: FLOAT_NUM •

    $default  reduce using rule 75 (const)


State 20

   65 postfix_expr: ID • OS expr CS
   67 primary_expr: ID •
   77 assign: ID • ASSIGN expr
   78       | ID • OS expr CS ASSIGN expr
  114 func_call: ID • $@27 OC arg_list CC

    OS      shift, and go to state 56
    ASSIGN  shift, and go to state 57

    OC        reduce using rule 113 ($@27)
    $default  reduce using rule 67 (primary_expr)

    $@27  go to state 58


State 21

   72 unary_op: NOT •

    $default  reduce using rule 72 (unary_op)


State 22

   70 unary_op: ADD •

    $default  reduce using rule 70 (unary_op)


State 23

   71 unary_op: SUBTRACT •

    $default  reduce using rule 71 (unary_op)


State 24

   73 unary_op: NEGATION •

    $default  reduce using rule 73 (unary_op)


State 25

   76 const: CHARACTER •

    $default  reduce using rule 76 (const)


State 26

   69 primary_expr: OC • expr CC

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 59
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 27

   28 stmt: OUTPUT • OC expr CC SCOL
   29     | OUTPUT • OC STR CC SCOL

    OC  shift, and go to state 60


State 28

   27 stmt: INPUT • OC ID CC SCOL

    OC  shift, and go to state 61


State 29

   96 switch_stmt: SWITCH • $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 93 ($@15)

    $@15  go to state 62


State 30

   24 stmt: BREAK • SCOL

    SCOL  shift, and go to state 63


State 31

   83 if_stmt: IF • $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 79 ($@6)

    $@6  go to state 64


State 32

  107 while_loop_stmt: WHILE • $@20 OC expr CC $@21 OF $@22 stmt_list CF

    $default  reduce using rule 104 ($@20)

    $@20  go to state 65


State 33

  112 for_loop_stmt: FOR • OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    OC  shift, and go to state 66


State 34

   25 stmt: CONTINUE • SCOL

    SCOL  shift, and go to state 67


State 35

    5 func: func_prefix OF $@1 stmt_list • CF

    CF  shift, and go to state 68


State 36

   15 stmt_list: stmt • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 69
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 37

   17 stmt: declaration •

    $default  reduce using rule 17 (stmt)


State 38

   20 stmt: return_stmt • SCOL

    SCOL  shift, and go to state 70


State 39

   30 declaration: data_type • ID SCOL
   32            | data_type • ID ASSIGN expr SCOL
   33            | data_type • ID OS INT_NUM CS SCOL
   35            | data_type • ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    ID  shift, and go to state 71


State 40

   19 stmt: expr • SCOL
   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    SCOL        shift, and go to state 90


State 41

   63 expr: postfix_expr •

    $default  reduce using rule 63 (expr)


State 42

   61 expr: unary_expr •

    $default  reduce using rule 61 (expr)


State 43

   62 expr: primary_expr •

    $default  reduce using rule 62 (expr)


State 44

   66 unary_expr: unary_op • primary_expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 91
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    primary_expr  go to state 92
    const         go to state 45


State 45

   68 primary_expr: const •

    $default  reduce using rule 68 (primary_expr)


State 46

   18 stmt: assign • SCOL

    SCOL  shift, and go to state 93


State 47

   21 stmt: if_stmt •

    $default  reduce using rule 21 (stmt)


State 48

   26 stmt: switch_stmt •

    $default  reduce using rule 26 (stmt)


State 49

   22 stmt: while_loop_stmt •

    $default  reduce using rule 22 (stmt)


State 50

   23 stmt: for_loop_stmt •

    $default  reduce using rule 23 (stmt)


State 51

   64 postfix_expr: func_call •

    $default  reduce using rule 64 (postfix_expr)


State 52

    7 func_prefix: func_data_type ID $@2 OC • param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 13 (param_list)

    param_list  go to state 94
    param       go to state 95
    data_type   go to state 96


State 53

   31 declaration: STRING ID • ASSIGN STR SCOL

    ASSIGN  shift, and go to state 97


State 54

   65 postfix_expr: ID • OS expr CS
   67 primary_expr: ID •
  114 func_call: ID • $@27 OC arg_list CC

    OS  shift, and go to state 98

    OC        reduce using rule 113 ($@27)
    $default  reduce using rule 67 (primary_expr)

    $@27  go to state 58


State 55

   39 return_stmt: RETURN expr •
   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 39 (return_stmt)


State 56

   65 postfix_expr: ID OS • expr CS
   78 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 99
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 57

   77 assign: ID ASSIGN • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 100
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 58

  114 func_call: ID $@27 • OC arg_list CC

    OC  shift, and go to state 101


State 59

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   69 primary_expr: OC expr • CC

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 102


State 60

   28 stmt: OUTPUT OC • expr CC SCOL
   29     | OUTPUT OC • STR CC SCOL

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    STR        shift, and go to state 103
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 104
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 61

   27 stmt: INPUT OC • ID CC SCOL

    ID  shift, and go to state 105


State 62

   96 switch_stmt: SWITCH $@15 • OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    OC  shift, and go to state 106


State 63

   24 stmt: BREAK SCOL •

    $default  reduce using rule 24 (stmt)


State 64

   83 if_stmt: IF $@6 • OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OC  shift, and go to state 107


State 65

  107 while_loop_stmt: WHILE $@20 • OC expr CC $@21 OF $@22 stmt_list CF

    OC  shift, and go to state 108


State 66

  112 for_loop_stmt: FOR OC • assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    ID  shift, and go to state 109

    assign  go to state 110


State 67

   25 stmt: CONTINUE SCOL •

    $default  reduce using rule 25 (stmt)


State 68

    5 func: func_prefix OF $@1 stmt_list CF •

    $default  reduce using rule 5 (func)


State 69

   15 stmt_list: stmt stmt_list •

    $default  reduce using rule 15 (stmt_list)


State 70

   20 stmt: return_stmt SCOL •

    $default  reduce using rule 20 (stmt)


State 71

   30 declaration: data_type ID • SCOL
   32            | data_type ID • ASSIGN expr SCOL
   33            | data_type ID • OS INT_NUM CS SCOL
   35            | data_type ID • OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    OS      shift, and go to state 111
    SCOL    shift, and go to state 112
    ASSIGN  shift, and go to state 113


State 72

   59 expr: expr LEFTSHIFT • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 114
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 73

   60 expr: expr RIGHTSHIFT • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 115
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 74

   47 expr: expr LE • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 116
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 75

   48 expr: expr GE • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 117
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 76

   51 expr: expr EQ • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 118
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 77

   52 expr: expr NE • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 119
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 78

   50 expr: expr GT • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 120
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 79

   49 expr: expr LT • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 121
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 80

   53 expr: expr AND • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 122
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 81

   54 expr: expr OR • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 123
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 82

   43 expr: expr ADD • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 124
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 83

   44 expr: expr SUBTRACT • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 125
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 84

   46 expr: expr DIVIDE • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 126
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 85

   45 expr: expr MULTIPLY • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 127
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 86

   55 expr: expr MODULO • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 128
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 87

   56 expr: expr BITAND • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 129
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 88

   57 expr: expr BITOR • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 130
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 89

   58 expr: expr XOR • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 131
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 90

   19 stmt: expr SCOL •

    $default  reduce using rule 19 (stmt)


State 91

   67 primary_expr: ID •

    $default  reduce using rule 67 (primary_expr)


State 92

   66 unary_expr: unary_op primary_expr •

    $default  reduce using rule 66 (unary_expr)


State 93

   18 stmt: assign SCOL •

    $default  reduce using rule 18 (stmt)


State 94

    7 func_prefix: func_data_type ID $@2 OC param_list • CC

    CC  shift, and go to state 132


State 95

   11 param_list: param • $@3 COMMA param_list
   12           | param •

    CC        reduce using rule 12 (param_list)
    $default  reduce using rule 10 ($@3)

    $@3  go to state 133


State 96

   14 param: data_type • ID

    ID  shift, and go to state 134


State 97

   31 declaration: STRING ID ASSIGN • STR SCOL

    STR  shift, and go to state 135


State 98

   65 postfix_expr: ID OS • expr CS

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 136
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 99

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   65 postfix_expr: ID OS expr • CS
   78 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CS          shift, and go to state 137


State 100

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   77 assign: ID ASSIGN expr •

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 77 (assign)


State 101

  114 func_call: ID $@27 OC • arg_list CC

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    $default  reduce using rule 117 (arg_list)

    expr          go to state 138
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51
    arg_list      go to state 139
    arg           go to state 140


State 102

   69 primary_expr: OC expr CC •

    $default  reduce using rule 69 (primary_expr)


State 103

   29 stmt: OUTPUT OC STR • CC SCOL

    CC  shift, and go to state 141


State 104

   28 stmt: OUTPUT OC expr • CC SCOL
   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 142


State 105

   27 stmt: INPUT OC ID • CC SCOL

    CC  shift, and go to state 143


State 106

   96 switch_stmt: SWITCH $@15 OC • ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    ID  shift, and go to state 144


State 107

   83 if_stmt: IF $@6 OC • expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 145
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 108

  107 while_loop_stmt: WHILE $@20 OC • expr CC $@21 OF $@22 stmt_list CF

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 146
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 109

   77 assign: ID • ASSIGN expr
   78       | ID • OS expr CS ASSIGN expr

    OS      shift, and go to state 147
    ASSIGN  shift, and go to state 57


State 110

  112 for_loop_stmt: FOR OC assign • SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    SCOL  shift, and go to state 148


State 111

   33 declaration: data_type ID OS • INT_NUM CS SCOL
   35            | data_type ID OS • INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 149


State 112

   30 declaration: data_type ID SCOL •

    $default  reduce using rule 30 (declaration)


State 113

   32 declaration: data_type ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 150
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 114

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   59     | expr LEFTSHIFT expr •
   60     | expr • RIGHTSHIFT expr

    ADD       shift, and go to state 82
    SUBTRACT  shift, and go to state 83
    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 59 (expr)


State 115

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   60     | expr RIGHTSHIFT expr •

    ADD       shift, and go to state 82
    SUBTRACT  shift, and go to state 83
    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 60 (expr)


State 116

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   47     | expr LE expr •
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 47 (expr)


State 117

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   48     | expr GE expr •
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 48 (expr)


State 118

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   51     | expr EQ expr •
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 51 (expr)


State 119

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   52     | expr NE expr •
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 52 (expr)


State 120

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   50     | expr GT expr •
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 50 (expr)


State 121

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   49     | expr LT expr •
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 49 (expr)


State 122

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   53     | expr AND expr •
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 53 (expr)


State 123

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   54     | expr OR expr •
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 54 (expr)


State 124

   43 expr: expr • ADD expr
   43     | expr ADD expr •
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 43 (expr)


State 125

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   44     | expr SUBTRACT expr •
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 44 (expr)


State 126

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   46     | expr DIVIDE expr •
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    $default  reduce using rule 46 (expr)


State 127

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   45     | expr MULTIPLY expr •
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    $default  reduce using rule 45 (expr)


State 128

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   55     | expr MODULO expr •
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    $default  reduce using rule 55 (expr)


State 129

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   56     | expr BITAND expr •
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 56 (expr)


State 130

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   57     | expr BITOR expr •
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    XOR         shift, and go to state 89

    $default  reduce using rule 57 (expr)


State 131

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   58     | expr XOR expr •
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87

    $default  reduce using rule 58 (expr)


State 132

    7 func_prefix: func_data_type ID $@2 OC param_list CC •

    $default  reduce using rule 7 (func_prefix)


State 133

   11 param_list: param $@3 • COMMA param_list

    COMMA  shift, and go to state 151


State 134

   14 param: data_type ID •

    $default  reduce using rule 14 (param)


State 135

   31 declaration: STRING ID ASSIGN STR • SCOL

    SCOL  shift, and go to state 152


State 136

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   65 postfix_expr: ID OS expr • CS

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CS          shift, and go to state 153


State 137

   65 postfix_expr: ID OS expr CS •
   78 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 154

    $default  reduce using rule 65 (postfix_expr)


State 138

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
  118 arg: expr •

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 118 (arg)


State 139

  114 func_call: ID $@27 OC arg_list • CC

    CC  shift, and go to state 155


State 140

  115 arg_list: arg • COMMA arg_list
  116         | arg •

    COMMA  shift, and go to state 156

    $default  reduce using rule 116 (arg_list)


State 141

   29 stmt: OUTPUT OC STR CC • SCOL

    SCOL  shift, and go to state 157


State 142

   28 stmt: OUTPUT OC expr CC • SCOL

    SCOL  shift, and go to state 158


State 143

   27 stmt: INPUT OC ID CC • SCOL

    SCOL  shift, and go to state 159


State 144

   96 switch_stmt: SWITCH $@15 OC ID • $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 94 ($@16)

    $@16  go to state 160


State 145

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   83 if_stmt: IF $@6 OC expr • CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 161


State 146

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
  107 while_loop_stmt: WHILE $@20 OC expr • CC $@21 OF $@22 stmt_list CF

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 162


State 147

   78 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 163
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 148

  112 for_loop_stmt: FOR OC assign SCOL • $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 108 ($@23)

    $@23  go to state 164


State 149

   33 declaration: data_type ID OS INT_NUM • CS SCOL
   35            | data_type ID OS INT_NUM • CS ASSIGN $@4 OF arr_values CF SCOL

    CS  shift, and go to state 165


State 150

   32 declaration: data_type ID ASSIGN expr • SCOL
   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    SCOL        shift, and go to state 166


State 151

   11 param_list: param $@3 COMMA • param_list

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 13 (param_list)

    param_list  go to state 167
    param       go to state 95
    data_type   go to state 96


State 152

   31 declaration: STRING ID ASSIGN STR SCOL •

    $default  reduce using rule 31 (declaration)


State 153

   65 postfix_expr: ID OS expr CS •

    $default  reduce using rule 65 (postfix_expr)


State 154

   78 assign: ID OS expr CS ASSIGN • expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 168
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 155

  114 func_call: ID $@27 OC arg_list CC •

    $default  reduce using rule 114 (func_call)


State 156

  115 arg_list: arg COMMA • arg_list

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    $default  reduce using rule 117 (arg_list)

    expr          go to state 138
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51
    arg_list      go to state 169
    arg           go to state 140


State 157

   29 stmt: OUTPUT OC STR CC SCOL •

    $default  reduce using rule 29 (stmt)


State 158

   28 stmt: OUTPUT OC expr CC SCOL •

    $default  reduce using rule 28 (stmt)


State 159

   27 stmt: INPUT OC ID CC SCOL •

    $default  reduce using rule 27 (stmt)


State 160

   96 switch_stmt: SWITCH $@15 OC ID $@16 • CC OF case_stmt_list $@17 default_stmt CF

    CC  shift, and go to state 170


State 161

   83 if_stmt: IF $@6 OC expr CC • $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 80 ($@7)

    $@7  go to state 171


State 162

  107 while_loop_stmt: WHILE $@20 OC expr CC • $@21 OF $@22 stmt_list CF

    $default  reduce using rule 105 ($@21)

    $@21  go to state 172


State 163

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   78 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CS          shift, and go to state 173


State 164

  112 for_loop_stmt: FOR OC assign SCOL $@23 • expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 174
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 165

   33 declaration: data_type ID OS INT_NUM CS • SCOL
   35            | data_type ID OS INT_NUM CS • ASSIGN $@4 OF arr_values CF SCOL

    SCOL    shift, and go to state 175
    ASSIGN  shift, and go to state 176


State 166

   32 declaration: data_type ID ASSIGN expr SCOL •

    $default  reduce using rule 32 (declaration)


State 167

   11 param_list: param $@3 COMMA param_list •

    $default  reduce using rule 11 (param_list)


State 168

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   78 assign: ID OS expr CS ASSIGN expr •

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 78 (assign)


State 169

  115 arg_list: arg COMMA arg_list •

    $default  reduce using rule 115 (arg_list)


State 170

   96 switch_stmt: SWITCH $@15 OC ID $@16 CC • OF case_stmt_list $@17 default_stmt CF

    OF  shift, and go to state 177


State 171

   83 if_stmt: IF $@6 OC expr CC $@7 • OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OF  shift, and go to state 178


State 172

  107 while_loop_stmt: WHILE $@20 OC expr CC $@21 • OF $@22 stmt_list CF

    OF  shift, and go to state 179


State 173

   78 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 154


State 174

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
  112 for_loop_stmt: FOR OC assign SCOL $@23 expr • SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    SCOL        shift, and go to state 180


State 175

   33 declaration: data_type ID OS INT_NUM CS SCOL •

    $default  reduce using rule 33 (declaration)


State 176

   35 declaration: data_type ID OS INT_NUM CS ASSIGN • $@4 OF arr_values CF SCOL

    $default  reduce using rule 34 ($@4)

    $@4  go to state 181


State 177

   96 switch_stmt: SWITCH $@15 OC ID $@16 CC OF • case_stmt_list $@17 default_stmt CF

    CASE  shift, and go to state 182

    $default  reduce using rule 98 (case_stmt_list)

    case_stmt_list  go to state 183
    case_stmt       go to state 184


State 178

   83 if_stmt: IF $@6 OC expr CC $@7 OF • $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 81 ($@8)

    $@8  go to state 185


State 179

  107 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF • $@22 stmt_list CF

    $default  reduce using rule 106 ($@22)

    $@22  go to state 186


State 180

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL • $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 109 ($@24)

    $@24  go to state 187


State 181

   35 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 • OF arr_values CF SCOL

    OF  shift, and go to state 188


State 182

  101 case_stmt: CASE • $@18 OC const $@19 CC COLON stmt_list

    $default  reduce using rule 99 ($@18)

    $@18  go to state 189


State 183

   96 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list • $@17 default_stmt CF

    $default  reduce using rule 95 ($@17)

    $@17  go to state 190


State 184

   97 case_stmt_list: case_stmt • case_stmt_list

    CASE  shift, and go to state 182

    $default  reduce using rule 98 (case_stmt_list)

    case_stmt_list  go to state 191
    case_stmt       go to state 184


State 185

   83 if_stmt: IF $@6 OC expr CC $@7 OF $@8 • stmt_list CF $@9 elif_stmt else_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 192
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 186

  107 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 193
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 187

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 • assign CC $@25 OF $@26 stmt_list CF

    ID  shift, and go to state 109

    assign  go to state 194


State 188

   35 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF • arr_values CF SCOL

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    CHARACTER  shift, and go to state 25

    arr_values  go to state 195
    const       go to state 196


State 189

  101 case_stmt: CASE $@18 • OC const $@19 CC COLON stmt_list

    OC  shift, and go to state 197


State 190

   96 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 • default_stmt CF

    DEFAULT  shift, and go to state 198

    $default  reduce using rule 103 (default_stmt)

    default_stmt  go to state 199


State 191

   97 case_stmt_list: case_stmt case_stmt_list •

    $default  reduce using rule 97 (case_stmt_list)


State 192

   83 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list • CF $@9 elif_stmt else_stmt

    CF  shift, and go to state 200


State 193

  107 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list • CF

    CF  shift, and go to state 201


State 194

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign • CC $@25 OF $@26 stmt_list CF

    CC  shift, and go to state 202


State 195

   35 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values • CF SCOL

    CF  shift, and go to state 203


State 196

   37 arr_values: const • $@5 COMMA arr_values
   38           | const •

    CF        reduce using rule 38 (arr_values)
    $default  reduce using rule 36 ($@5)

    $@5  go to state 204


State 197

  101 case_stmt: CASE $@18 OC • const $@19 CC COLON stmt_list

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    CHARACTER  shift, and go to state 25

    const  go to state 205


State 198

  102 default_stmt: DEFAULT • COLON stmt_list

    COLON  shift, and go to state 206


State 199

   96 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt • CF

    CF  shift, and go to state 207


State 200

   83 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF • $@9 elif_stmt else_stmt

    $default  reduce using rule 82 ($@9)

    $@9  go to state 208


State 201

  107 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF •

    $default  reduce using rule 107 (while_loop_stmt)


State 202

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC • $@25 OF $@26 stmt_list CF

    $default  reduce using rule 110 ($@25)

    $@25  go to state 209


State 203

   35 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF • SCOL

    SCOL  shift, and go to state 210


State 204

   37 arr_values: const $@5 • COMMA arr_values

    COMMA  shift, and go to state 211


State 205

  101 case_stmt: CASE $@18 OC const • $@19 CC COLON stmt_list

    $default  reduce using rule 100 ($@19)

    $@19  go to state 212


State 206

  102 default_stmt: DEFAULT COLON • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 213
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 207

   96 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF •

    $default  reduce using rule 96 (switch_stmt)


State 208

   83 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 • elif_stmt else_stmt

    ELIF  shift, and go to state 214

    $default  reduce using rule 89 (elif_stmt)

    elif_stmt  go to state 215


State 209

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 • OF $@26 stmt_list CF

    OF  shift, and go to state 216


State 210

   35 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL •

    $default  reduce using rule 35 (declaration)


State 211

   37 arr_values: const $@5 COMMA • arr_values

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    CHARACTER  shift, and go to state 25

    arr_values  go to state 217
    const       go to state 196


State 212

  101 case_stmt: CASE $@18 OC const $@19 • CC COLON stmt_list

    CC  shift, and go to state 218


State 213

  102 default_stmt: DEFAULT COLON stmt_list •

    $default  reduce using rule 102 (default_stmt)


State 214

   88 elif_stmt: ELIF • $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 84 ($@10)

    $@10  go to state 219


State 215

   83 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt • else_stmt

    ELSE  shift, and go to state 220

    $default  reduce using rule 92 (else_stmt)

    else_stmt  go to state 221


State 216

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF • $@26 stmt_list CF

    $default  reduce using rule 111 ($@26)

    $@26  go to state 222


State 217

   37 arr_values: const $@5 COMMA arr_values •

    $default  reduce using rule 37 (arr_values)


State 218

  101 case_stmt: CASE $@18 OC const $@19 CC • COLON stmt_list

    COLON  shift, and go to state 223


State 219

   88 elif_stmt: ELIF $@10 • OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    OC  shift, and go to state 224


State 220

   91 else_stmt: ELSE • OF $@14 stmt_list CF

    OF  shift, and go to state 225


State 221

   83 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt •

    $default  reduce using rule 83 (if_stmt)


State 222

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 226
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 223

  101 case_stmt: CASE $@18 OC const $@19 CC COLON • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 227
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 224

   88 elif_stmt: ELIF $@10 OC • expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 228
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 225

   91 else_stmt: ELSE OF • $@14 stmt_list CF

    $default  reduce using rule 90 ($@14)

    $@14  go to state 229


State 226

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list • CF

    CF  shift, and go to state 230


State 227

  101 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list •

    $default  reduce using rule 101 (case_stmt)


State 228

   43 expr: expr • ADD expr
   44     | expr • SUBTRACT expr
   45     | expr • MULTIPLY expr
   46     | expr • DIVIDE expr
   47     | expr • LE expr
   48     | expr • GE expr
   49     | expr • LT expr
   50     | expr • GT expr
   51     | expr • EQ expr
   52     | expr • NE expr
   53     | expr • AND expr
   54     | expr • OR expr
   55     | expr • MODULO expr
   56     | expr • BITAND expr
   57     | expr • BITOR expr
   58     | expr • XOR expr
   59     | expr • LEFTSHIFT expr
   60     | expr • RIGHTSHIFT expr
   88 elif_stmt: ELIF $@10 OC expr • CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 231


State 229

   91 else_stmt: ELSE OF $@14 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 232
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 230

  112 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF •

    $default  reduce using rule 112 (for_loop_stmt)


State 231

   88 elif_stmt: ELIF $@10 OC expr CC • $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 85 ($@11)

    $@11  go to state 233


State 232

   91 else_stmt: ELSE OF $@14 stmt_list • CF

    CF  shift, and go to state 234


State 233

   88 elif_stmt: ELIF $@10 OC expr CC $@11 • OF $@12 stmt_list CF $@13 elif_stmt

    OF  shift, and go to state 235


State 234

   91 else_stmt: ELSE OF $@14 stmt_list CF •

    $default  reduce using rule 91 (else_stmt)


State 235

   88 elif_stmt: ELIF $@10 OC expr CC $@11 OF • $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 86 ($@12)

    $@12  go to state 236


State 236

   88 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 • stmt_list CF $@13 elif_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 237
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 237

   88 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list • CF $@13 elif_stmt

    CF  shift, and go to state 238


State 238

   88 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF • $@13 elif_stmt

    $default  reduce using rule 87 ($@13)

    $@13  go to state 239


State 239

   88 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 • elif_stmt

    ELIF  shift, and go to state 214

    $default  reduce using rule 89 (elif_stmt)

    elif_stmt  go to state 240


State 240

   88 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt •

    $default  reduce using rule 88 (elif_stmt)
