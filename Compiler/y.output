Terminals unused in grammar

    LEFTSHIFT
    RIGHTSHIFT
    STR
    PRINT
    SCAN


Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 $@1: ε

    5 func: func_prefix OF $@1 stmt_list CF

    6 $@2: ε

    7 func_prefix: func_data_type ID $@2 OC param_list CC

    8 func_data_type: data_type
    9               | VOID

   10 $@3: ε

   11 param_list: param $@3 COMMA param_list
   12           | param
   13           | ε

   14 param: data_type ID

   15 stmt_list: stmt stmt_list
   16          | ε

   17 stmt: declaration
   18     | assign SCOL
   19     | expr SCOL
   20     | return_stmt SCOL
   21     | if_stmt
   22     | while_loop_stmt
   23     | for_loop_stmt
   24     | BREAK SCOL
   25     | CONTINUE SCOL
   26     | switch_stmt
   27     | INPUT OC ID CC SCOL
   28     | OUTPUT OC expr CC SCOL

   29 declaration: data_type ID SCOL
   30            | data_type ID ASSIGN expr SCOL
   31            | data_type ID OS INT_NUM CS SCOL

   32 $@4: ε

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

   34 $@5: ε

   35 arr_values: const $@5 COMMA arr_values
   36           | const

   37 return_stmt: RETURN expr

   38 data_type: INT
   39          | FLOAT
   40          | CHAR

   41 expr: expr ADD expr
   42     | expr SUBTRACT expr
   43     | expr MULTIPLY expr
   44     | expr DIVIDE expr
   45     | expr LE expr
   46     | expr GE expr
   47     | expr LT expr
   48     | expr GT expr
   49     | expr EQ expr
   50     | expr NE expr
   51     | expr AND expr
   52     | expr OR expr
   53     | expr MODULO expr
   54     | expr BITAND expr
   55     | expr BITOR expr
   56     | expr XOR expr
   57     | expr LEFTSHIFT expr
   58     | expr RIGHTSHIFT expr
   59     | unary_expr
   60     | primary_expr
   61     | postfix_expr

   62 postfix_expr: func_call
   63             | ID OS expr CS

   64 unary_expr: unary_op primary_expr

   65 primary_expr: ID
   66             | const
   67             | OC expr CC

   68 unary_op: ADD
   69         | SUBTRACT
   70         | NOT
   71         | NEGATION

   72 const: INT_NUM
   73      | FLOAT_NUM
   74      | CHARACTER

   75 assign: ID ASSIGN expr
   76       | ID OS expr CS ASSIGN expr

   68 $@8: %empty

   69 elif_stmt: ELIF $@6 OC expr CC $@7 OF stmt_list CF $@8 elif_stmt
   70          | %empty

   79 $@8: ε

   80 $@9: ε

   81 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

   75 $@11: %empty

   83 $@11: ε

   84 $@12: ε

   85 $@13: ε

   86 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt
   87          | ε

   88 $@14: ε

   89 else_stmt: ELSE OF $@14 stmt_list CF
   90          | ε

   91 $@15: ε

   92 $@16: ε

   93 $@17: ε

   94 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

   95 case_stmt_list: case_stmt case_stmt_list
   96               | ε

   97 $@18: ε

   98 $@19: ε

   99 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list

  100 default_stmt: DEFAULT COLON stmt_list
  101             | ε

  102 $@20: ε

  103 $@21: ε

  104 $@22: ε

  105 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF

  106 $@23: ε

  107 $@24: ε

  108 $@25: ε

  109 $@26: ε

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

  111 $@27: ε

  112 func_call: ID $@27 OC arg_list CC

  113 arg_list: arg COMMA arg_list
  114         | arg
  115         | ε

  116 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <node> (258) 38
    CHAR <node> (259) 40
    FLOAT <node> (260) 39
    STRING <node> (261)
    VOID <node> (262) 9
    RETURN <node> (263) 37
    INT_NUM <node> (264) 31 33 72
    FLOAT_NUM <node> (265) 73
    ID <node> (266) 7 14 27 29 30 31 33 63 65 75 76 94 112
    LEFTSHIFT <node> (267) 57
    RIGHTSHIFT <node> (268) 58
    LE <node> (269) 45
    GE <node> (270) 46
    EQ <node> (271) 49
    NE <node> (272) 50
    GT <node> (273) 48
    LT <node> (274) 47
    AND <node> (275) 51
    OR <node> (276) 52
    NOT <node> (277) 70
    ADD <node> (278) 41 68
    SUBTRACT <node> (279) 42 69
    DIVIDE <node> (280) 44
    MULTIPLY <node> (281) 43
    MODULO <node> (282) 53
    BITAND <node> (283) 54
    BITOR <node> (284) 55
    NEGATION <node> (285) 71
    XOR <node> (286) 56
    STR <node> (287)
    CHARACTER <node> (288) 74
    CC <node> (289) 7 27 28 67 81 86 94 99 105 110 112
    OC <node> (290) 7 27 28 67 81 86 94 99 105 110 112
    CS <node> (291) 31 33 63 76
    OS <node> (292) 31 33 63 76
    CF <node> (293) 5 33 81 86 89 94 105 110
    OF <node> (294) 5 33 81 86 89 94 105 110
    COMMA <node> (295) 11 35 113
    COLON <node> (296) 99 100
    SCOL <node> (297) 18 19 20 24 25 27 28 29 30 31 33 110
    OUTPUT <node> (298) 28
    INPUT <node> (299) 27
    SWITCH <node> (300) 94
    CASE <node> (301) 99
    BREAK <node> (302) 24
    DEFAULT <node> (303) 100
    IF <node> (304) 81
    ELIF <node> (305) 86
    ELSE <node> (306) 89
    WHILE <node> (307) 105
    FOR <node> (308) 110
    CONTINUE <node> (309) 25
    ASSIGN (310) 30 33 75 76


Nonterminals, with rules where they appear

    $accept (53)
        on left: 0
    Program <node> (54)
        on left: 1
        on right: 0
    func_list <node> (55)
        on left: 2 3
        on right: 1 2
    func <node> (59)
        on left: 5
        on right: 2
    $@1 (60)
        on left: 4
        on right: 5
    func_prefix <node> (61)
        on left: 7
        on right: 5
    $@2 (62)
        on left: 6
        on right: 7
    func_data_type <node> (63)
        on left: 8 9
        on right: 7
    param_list <node> (64)
        on left: 11 12 13
        on right: 7 11
    $@3 (65)
        on left: 10
        on right: 11
    param <node> (66)
        on left: 14
        on right: 11 12
    stmt_list <node> (67)
        on left: 15 16
        on right: 5 15 81 86 89 99 100 105 110
    stmt <node> (68)
        on left: 17 18 19 20 21 22 23 24 25 26 27 28
        on right: 15
    declaration <node> (69)
        on left: 29 30 31 33
        on right: 17
    $@4 (70)
        on left: 32
        on right: 33
    arr_values (71)
        on left: 35 36
        on right: 33 35
    $@5 (72)
        on left: 34
        on right: 35
    return_stmt <node> (73)
        on left: 37
        on right: 20
    data_type <node> (74)
        on left: 38 39 40
        on right: 8 14 29 30 31 33
    expr <node> (75)
        on left: 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
        on right: 19 28 30 37 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 63 67 75 76 81 86 105 110 116
    postfix_expr <node> (76)
        on left: 62 63
        on right: 61
    unary_expr <node> (77)
        on left: 64
        on right: 59
    primary_expr <node> (78)
        on left: 65 66 67
        on right: 60 64
    unary_op <node> (79)
        on left: 68 69 70 71
        on right: 64
    const <node> (80)
        on left: 72 73 74
        on right: 35 36 66 99
    assign <node> (81)
        on left: 75 76
        on right: 18 110
    if_stmt <node> (82)
        on left: 81
        on right: 21
    $@6 (83)
        on left: 77
        on right: 81
    $@7 (84)
        on left: 78
        on right: 81
    $@8 (85)
        on left: 79
        on right: 81
    $@9 (86)
        on left: 80
        on right: 81
    elif_stmt <node> (87)
        on left: 86 87
        on right: 81 86
    $@10 (88)
        on left: 82
        on right: 86
    $@11 (89)
        on left: 83
        on right: 86
    $@12 (90)
        on left: 84
        on right: 86
    $@13 (91)
        on left: 85
        on right: 86
    else_stmt <node> (92)
        on left: 89 90
        on right: 81
    $@14 (93)
        on left: 88
        on right: 89
    switch_stmt <node> (94)
        on left: 94
        on right: 26
    $@15 (95)
        on left: 91
        on right: 94
    $@16 (96)
        on left: 92
        on right: 94
    $@17 (97)
        on left: 93
        on right: 94
    case_stmt_list <node> (98)
        on left: 95 96
        on right: 94 95
    case_stmt <node> (99)
        on left: 99
        on right: 95
    $@18 (100)
        on left: 97
        on right: 99
    $@19 (101)
        on left: 98
        on right: 99
    default_stmt (102)
        on left: 100 101
        on right: 94
    while_loop_stmt <node> (103)
        on left: 105
        on right: 22
    $@20 (104)
        on left: 102
        on right: 105
    $@21 (105)
        on left: 103
        on right: 105
    $@22 (106)
        on left: 104
        on right: 105
    for_loop_stmt <node> (107)
        on left: 110
        on right: 23
    $@23 (108)
        on left: 106
        on right: 110
    $@24 (109)
        on left: 107
        on right: 110
    $@25 (110)
        on left: 108
        on right: 110
    $@26 (111)
        on left: 109
        on right: 110
    func_call <node> (112)
        on left: 112
        on right: 62
    $@27 (113)
        on left: 111
        on right: 112
    arg_list <node> (114)
        on left: 113 114 115
        on right: 112 113
    arg <node> (115)
        on left: 116
        on right: 113 114


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    $end      reduce using rule 1 (Program)
    $default  reduce using rule 4 ($@1)

    func  go to state 4
    $@1   go to state 5


State 3

    0 $accept: Program $end .

    $default  accept


State 4

   38 data_type: INT •

    $default  reduce using rule 38 (data_type)


State 5

   40 data_type: CHAR •

    $default  reduce using rule 40 (data_type)


State 6

   39 data_type: FLOAT •

    $default  reduce using rule 39 (data_type)


State 7

    9 func_data_type: VOID •

    $default  reduce using rule 9 (func_data_type)


State 8

   29 data_type: FLOAT .

    $default  reduce using rule 29 (data_type)


State 9

    5 func: func_prefix • OF $@1 stmt_list CF

    OF  shift, and go to state 11


State 10

    7 func_prefix: func_data_type • ID $@2 OC param_list CC

    ID  shift, and go to state 12


State 11

    8 func_data_type: data_type •

    $default  reduce using rule 8 (func_data_type)


State 12

    5 func: func_prefix OF • $@1 stmt_list CF

    $default  reduce using rule 4 ($@1)

    $@1  go to state 14


State 13

    7 func_prefix: func_data_type ID • $@2 OC param_list CC

    $default  reduce using rule 6 ($@2)

    $@2  go to state 15


State 14

    5 func: func_prefix OF $@1 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 34
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 15

    7 func_prefix: func_data_type ID $@2 • OC param_list CC

    OC  shift, and go to state 51


State 16

   37 return_stmt: RETURN • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 53
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 17

   72 const: INT_NUM •

    $default  reduce using rule 72 (const)


State 18

   73 const: FLOAT_NUM •

    $default  reduce using rule 73 (const)


State 19

   63 postfix_expr: ID • OS expr CS
   65 primary_expr: ID •
   75 assign: ID • ASSIGN expr
   76       | ID • OS expr CS ASSIGN expr
  112 func_call: ID • $@27 OC arg_list CC

    OS      shift, and go to state 54
    ASSIGN  shift, and go to state 55

    OC        reduce using rule 111 ($@27)
    $default  reduce using rule 65 (primary_expr)

    $@27  go to state 56


State 20

   70 unary_op: NOT •

    $default  reduce using rule 70 (unary_op)


State 21

   68 unary_op: ADD •

    $default  reduce using rule 68 (unary_op)


State 22

   69 unary_op: SUBTRACT •

    $default  reduce using rule 69 (unary_op)

    $@9  go to state 51


   71 unary_op: NEGATION •

    $default  reduce using rule 71 (unary_op)


State 24

   74 const: CHARACTER •

    $default  reduce using rule 74 (const)


State 25

   67 primary_expr: OC • expr CC

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 57
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 26

   28 stmt: OUTPUT • OC expr CC SCOL

    OC  shift, and go to state 58


State 27

   27 stmt: INPUT • OC ID CC SCOL

    OC  shift, and go to state 59


State 28

   94 switch_stmt: SWITCH • $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 91 ($@15)

    $@15  go to state 60


State 29

   24 stmt: BREAK • SCOL

    SCOL  shift, and go to state 61


State 30

   81 if_stmt: IF • $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 77 ($@6)

    $@6  go to state 62


State 31

  105 while_loop_stmt: WHILE • $@20 OC expr CC $@21 OF $@22 stmt_list CF

    $default  reduce using rule 102 ($@20)

    $@20  go to state 63


State 32

  110 for_loop_stmt: FOR • OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    OC  shift, and go to state 64


State 33

   25 stmt: CONTINUE • SCOL

    SCOL  shift, and go to state 65


State 34

    5 func: func_prefix OF $@1 stmt_list • CF

    CF  shift, and go to state 66


State 35

   15 stmt_list: stmt • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 67
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 36

   17 stmt: declaration •

    $default  reduce using rule 17 (stmt)


State 37

   20 stmt: return_stmt • SCOL

    SCOL  shift, and go to state 68


State 38

   29 declaration: data_type • ID SCOL
   30            | data_type • ID ASSIGN expr SCOL
   31            | data_type • ID OS INT_NUM CS SCOL
   33            | data_type • ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    ID  shift, and go to state 69


State 39

   19 stmt: expr • SCOL
   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    SCOL        shift, and go to state 88


State 40

   61 expr: postfix_expr •

    $default  reduce using rule 61 (expr)


State 41

   59 expr: unary_expr •

    $default  reduce using rule 59 (expr)


State 42

   60 expr: primary_expr •

    $default  reduce using rule 60 (expr)


State 43

   64 unary_expr: unary_op • primary_expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 89
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    primary_expr  go to state 90
    const         go to state 44


State 44

   66 primary_expr: const •

    $default  reduce using rule 66 (primary_expr)


State 45

   18 stmt: assign • SCOL

    SCOL  shift, and go to state 91


State 46

   21 stmt: if_stmt •

    OC  shift, and go to state 48

    $default  reduce using rule 52 (primary_expr)


   26 stmt: switch_stmt •

    $default  reduce using rule 26 (stmt)


State 48

   22 stmt: while_loop_stmt •

    $default  reduce using rule 22 (stmt)

    $default  reduce using rule 94 (arg_list)

    expr          go to state 82
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44
    arg_list      go to state 83
    arg           go to state 84

   23 stmt: for_loop_stmt •

    $default  reduce using rule 23 (stmt)

   61 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

   62 postfix_expr: func_call •

    $default  reduce using rule 62 (postfix_expr)


State 51

    7 func_prefix: func_data_type ID $@2 OC • param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 13 (param_list)

    param_list  go to state 92
    param       go to state 93
    data_type   go to state 94


State 52

   63 postfix_expr: ID • OS expr CS
   65 primary_expr: ID •
  112 func_call: ID • $@27 OC arg_list CC

    OS  shift, and go to state 95

    OC        reduce using rule 111 ($@27)
    $default  reduce using rule 65 (primary_expr)

    $@27  go to state 56


State 53

   37 return_stmt: RETURN expr •
   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 37 (return_stmt)


State 54

   63 postfix_expr: ID OS • expr CS
   76 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 96
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 55

   75 assign: ID ASSIGN • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 97
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 56

  112 func_call: ID $@27 • OC arg_list CC

    OC  shift, and go to state 98


State 57

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   67 primary_expr: OC expr • CC

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 99


State 58

   28 stmt: OUTPUT OC • expr CC SCOL

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 100
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 59

   27 stmt: INPUT OC • ID CC SCOL

    ID  shift, and go to state 101


State 60

   94 switch_stmt: SWITCH $@15 • OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    OC  shift, and go to state 102


State 61

   24 stmt: BREAK SCOL •

    $default  reduce using rule 24 (stmt)


State 62

   81 if_stmt: IF $@6 • OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OC  shift, and go to state 103


State 63

  105 while_loop_stmt: WHILE $@20 • OC expr CC $@21 OF $@22 stmt_list CF

    OC  shift, and go to state 104


State 64

  110 for_loop_stmt: FOR OC • assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    ID  shift, and go to state 105

    assign  go to state 106


State 65

   25 stmt: CONTINUE SCOL •

    $default  reduce using rule 25 (stmt)


State 66

    5 func: func_prefix OF $@1 stmt_list CF •

    $default  reduce using rule 5 (func)


State 67

   15 stmt_list: stmt stmt_list •

    $default  reduce using rule 15 (stmt_list)


State 68

   20 stmt: return_stmt SCOL •

    $default  reduce using rule 20 (stmt)


State 69

   29 declaration: data_type ID • SCOL
   30            | data_type ID • ASSIGN expr SCOL
   31            | data_type ID • OS INT_NUM CS SCOL
   33            | data_type ID • OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    OS      shift, and go to state 107
    SCOL    shift, and go to state 108
    ASSIGN  shift, and go to state 109


State 70

   57 expr: expr LEFTSHIFT • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 110
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 71

   58 expr: expr RIGHTSHIFT • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 111
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 72

   45 expr: expr LE • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 112
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 73

   46 expr: expr GE • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 113
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 74

   49 expr: expr EQ • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 114
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 75

   50 expr: expr NE • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 115
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 76

   48 expr: expr GT • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 116
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 77

   47 expr: expr LT • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 117
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 78

   51 expr: expr AND • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 118
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 79

   52 expr: expr OR • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 119
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 80

   41 expr: expr ADD • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 120
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 81

   42 expr: expr SUBTRACT • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 121
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50

    $default  reduce using rule 10 (param_list)

    param_list  go to state 110
    param       go to state 111
    data_type   go to state 112

   44 expr: expr DIVIDE • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 122
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 83

   43 expr: expr MULTIPLY • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 123
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 84

   53 expr: expr MODULO • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 124
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 85

   54 expr: expr BITAND • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 125
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 86

   55 expr: expr BITOR • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 126
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 87

   56 expr: expr XOR • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 127
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 88

   19 stmt: expr SCOL •

    $default  reduce using rule 19 (stmt)


State 89

   65 primary_expr: ID •

    $default  reduce using rule 65 (primary_expr)

    INT_NUM    shift, and go to state 14
    ID         shift, and go to state 46
    NOT        shift, and go to state 16
    ADD        shift, and go to state 17
    SUBTRACT   shift, and go to state 18
    NEGATION   shift, and go to state 19
    CHARACTER  shift, and go to state 20
    OC         shift, and go to state 21

    expr          go to state 117
    postfix_expr  go to state 34
    unary_expr    go to state 35
    primary_expr  go to state 36
    unary_op      go to state 37
    const         go to state 38
    func_call     go to state 44

   64 unary_expr: unary_op primary_expr •

    $default  reduce using rule 64 (unary_expr)


State 91

   18 stmt: assign SCOL •

    $default  reduce using rule 18 (stmt)


State 92

    7 func_prefix: func_data_type ID $@2 OC param_list • CC

    CC  shift, and go to state 128

    $default  reduce using rule 25 (declaration)


   11 param_list: param • $@3 COMMA param_list
   12           | param •

    CC        reduce using rule 12 (param_list)
    $default  reduce using rule 10 ($@3)

    $@3  go to state 129


State 94

   14 param: data_type • ID

    ID  shift, and go to state 130


State 95

   63 postfix_expr: ID OS • expr CS

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 131
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 96

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   63 postfix_expr: ID OS expr • CS
   76 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CS          shift, and go to state 132


State 97

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   75 assign: ID ASSIGN expr •

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 75 (assign)


State 98

  112 func_call: ID $@27 OC • arg_list CC

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    $default  reduce using rule 115 (arg_list)

    expr          go to state 133
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50
    arg_list      go to state 134
    arg           go to state 135


State 99

   67 primary_expr: OC expr CC •

    $default  reduce using rule 67 (primary_expr)


State 100

   28 stmt: OUTPUT OC expr • CC SCOL
   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 136


State 101

   27 stmt: INPUT OC ID • CC SCOL

    CC  shift, and go to state 137


State 102

   94 switch_stmt: SWITCH $@15 OC • ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    ID  shift, and go to state 138


State 103

   81 if_stmt: IF $@6 OC • expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 139
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 104

  105 while_loop_stmt: WHILE $@20 OC • expr CC $@21 OF $@22 stmt_list CF

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 140
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 105

   75 assign: ID • ASSIGN expr
   76       | ID • OS expr CS ASSIGN expr

    OS      shift, and go to state 141
    ASSIGN  shift, and go to state 55


State 106

  110 for_loop_stmt: FOR OC assign • SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    SCOL  shift, and go to state 142


State 107

   31 declaration: data_type ID OS • INT_NUM CS SCOL
   33            | data_type ID OS • INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 143


State 108

   29 declaration: data_type ID SCOL •

    $default  reduce using rule 29 (declaration)


State 109

   30 declaration: data_type ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 144
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 110

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   57     | expr LEFTSHIFT expr •
   58     | expr • RIGHTSHIFT expr

    ADD       shift, and go to state 80
    SUBTRACT  shift, and go to state 81
    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 57 (expr)


State 111

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   58     | expr RIGHTSHIFT expr •

    ADD       shift, and go to state 80
    SUBTRACT  shift, and go to state 81
    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 58 (expr)


State 112

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   45     | expr LE expr •
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 45 (expr)


State 113

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   46     | expr GE expr •
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 91 (func_call)


State 114

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   49     | expr EQ expr •
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 49 (expr)


State 115

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   50     | expr NE expr •
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 50 (expr)

    $default  reduce using rule 74 ($@10)

    $@10  go to state 124

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   48     | expr GT expr •
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 48 (expr)

   31 expr: expr . ADD expr
   32     | expr . SUBTRACT expr
   33     | expr . MULTIPLY expr
   34     | expr . DIVIDE expr
   35     | expr . LE expr
   36     | expr . GE expr
   37     | expr . LT expr
   38     | expr . GT expr
   39     | expr . EQ expr
   40     | expr . NE expr
   41     | expr . AND expr
   42     | expr . OR expr
   43     | expr . MODULO expr
   44     | expr . BITAND expr
   45     | expr . BITOR expr
   46     | expr . XOR expr
   65 if_stmt: IF $@3 OC expr . CC $@4 OF stmt_list CF $@5 elif_stmt else_stmt

    LE        shift, and go to state 61
    GE        shift, and go to state 62
    EQ        shift, and go to state 63
    NE        shift, and go to state 64
    GT        shift, and go to state 65
    LT        shift, and go to state 66
    AND       shift, and go to state 67
    OR        shift, and go to state 68
    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MULTIPLY  shift, and go to state 72
    MODULO    shift, and go to state 73
    BITAND    shift, and go to state 74
    BITOR     shift, and go to state 75
    XOR       shift, and go to state 76
    CC        shift, and go to state 125


   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   47     | expr LT expr •
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 47 (expr)


State 118

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   51     | expr AND expr •
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 51 (expr)

    $@16  go to state 127


   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   52     | expr OR expr •
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 52 (expr)


State 120

   41 expr: expr • ADD expr
   41     | expr ADD expr •
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 41 (expr)


State 121

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   42     | expr SUBTRACT expr •
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 42 (expr)


State 122

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   44     | expr DIVIDE expr •
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    $default  reduce using rule 44 (expr)


State 123

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   43     | expr MULTIPLY expr •
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    $default  reduce using rule 43 (expr)


State 124

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   53     | expr MODULO expr •
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    $default  reduce using rule 53 (expr)


State 125

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   54     | expr BITAND expr •
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 54 (expr)


State 126

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   55     | expr BITOR expr •
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    XOR         shift, and go to state 87

    $default  reduce using rule 55 (expr)


State 127

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   56     | expr XOR expr •
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85

    $default  reduce using rule 56 (expr)


State 128

    7 func_prefix: func_data_type ID $@2 OC param_list CC •

    $default  reduce using rule 7 (func_prefix)


State 129

   11 param_list: param $@3 • COMMA param_list

    COMMA  shift, and go to state 145


State 130

   14 param: data_type ID •

    $default  reduce using rule 14 (param)


State 131

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   63 postfix_expr: ID OS expr • CS

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CS          shift, and go to state 146


State 132

   63 postfix_expr: ID OS expr CS •
   76 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 147

    $default  reduce using rule 63 (postfix_expr)


State 133

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
  116 arg: expr •

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 116 (arg)


State 134

  112 func_call: ID $@27 OC arg_list • CC

    CC  shift, and go to state 148


State 135

  113 arg_list: arg • COMMA arg_list
  114         | arg •

    COMMA  shift, and go to state 149

    $default  reduce using rule 114 (arg_list)


State 136

   28 stmt: OUTPUT OC expr CC • SCOL

    SCOL  shift, and go to state 150


State 137

   27 stmt: INPUT OC ID CC • SCOL

    SCOL  shift, and go to state 151


State 138

   94 switch_stmt: SWITCH $@15 OC ID • $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 92 ($@16)

    $@16  go to state 152


State 139

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   81 if_stmt: IF $@6 OC expr • CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 153


State 140

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
  105 while_loop_stmt: WHILE $@20 OC expr • CC $@21 OF $@22 stmt_list CF

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 154


State 141

   76 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 155
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 142

  110 for_loop_stmt: FOR OC assign SCOL • $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 106 ($@23)

    $@23  go to state 156


State 143

   31 declaration: data_type ID OS INT_NUM • CS SCOL
   33            | data_type ID OS INT_NUM • CS ASSIGN $@4 OF arr_values CF SCOL

    CS  shift, and go to state 157


State 144

   30 declaration: data_type ID ASSIGN expr • SCOL
   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    SCOL        shift, and go to state 158


State 145

   11 param_list: param $@3 COMMA • param_list

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 13 (param_list)

    param_list  go to state 159
    param       go to state 93
    data_type   go to state 94


State 146

   63 postfix_expr: ID OS expr CS •

    $default  reduce using rule 63 (postfix_expr)

    assign  go to state 153


   76 assign: ID OS expr CS ASSIGN • expr

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 160
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 148

  112 func_call: ID $@27 OC arg_list CC •

    $default  reduce using rule 112 (func_call)


State 149

  113 arg_list: arg COMMA • arg_list

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    $default  reduce using rule 115 (arg_list)

    expr          go to state 133
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50
    arg_list      go to state 161
    arg           go to state 135


State 150

   28 stmt: OUTPUT OC expr CC SCOL •

    $default  reduce using rule 28 (stmt)


State 151

   27 stmt: INPUT OC ID CC SCOL •

    $default  reduce using rule 27 (stmt)


State 152

   94 switch_stmt: SWITCH $@15 OC ID $@16 • CC OF case_stmt_list $@17 default_stmt CF

    CC  shift, and go to state 162


State 153

   81 if_stmt: IF $@6 OC expr CC • $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 78 ($@7)

    $@7  go to state 163

    CC  shift, and go to state 159


  105 while_loop_stmt: WHILE $@20 OC expr CC • $@21 OF $@22 stmt_list CF

    $default  reduce using rule 103 ($@21)

    $@21  go to state 164


State 155

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   76 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CS          shift, and go to state 165


State 156

  110 for_loop_stmt: FOR OC assign SCOL $@23 • expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 166
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 157

   31 declaration: data_type ID OS INT_NUM CS • SCOL
   33            | data_type ID OS INT_NUM CS • ASSIGN $@4 OF arr_values CF SCOL

    SCOL    shift, and go to state 167
    ASSIGN  shift, and go to state 168

   65 if_stmt: IF $@3 OC expr CC $@4 OF stmt_list CF $@5 . elif_stmt else_stmt

    ELIF  shift, and go to state 163

    $default  reduce using rule 70 (elif_stmt)

   30 declaration: data_type ID ASSIGN expr SCOL •

    $default  reduce using rule 30 (declaration)


State 159

   11 param_list: param $@3 COMMA param_list •

    $default  reduce using rule 11 (param_list)


State 160

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   76 assign: ID OS expr CS ASSIGN expr •

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 76 (assign)


State 161

  113 arg_list: arg COMMA arg_list •

    $default  reduce using rule 113 (arg_list)


State 162

   94 switch_stmt: SWITCH $@15 OC ID $@16 CC • OF case_stmt_list $@17 default_stmt CF

    OF  shift, and go to state 169


State 163

   81 if_stmt: IF $@6 OC expr CC $@7 • OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OF  shift, and go to state 170


State 164

  105 while_loop_stmt: WHILE $@20 OC expr CC $@21 • OF $@22 stmt_list CF

    OF  shift, and go to state 171


State 165

   76 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 147


State 166

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
  110 for_loop_stmt: FOR OC assign SCOL $@23 expr • SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    SCOL        shift, and go to state 172


State 167

   31 declaration: data_type ID OS INT_NUM CS SCOL •

    $default  reduce using rule 31 (declaration)


State 168

   33 declaration: data_type ID OS INT_NUM CS ASSIGN • $@4 OF arr_values CF SCOL

    $default  reduce using rule 32 ($@4)

    $@4  go to state 173


State 169

   94 switch_stmt: SWITCH $@15 OC ID $@16 CC OF • case_stmt_list $@17 default_stmt CF

    CASE  shift, and go to state 174

    $default  reduce using rule 96 (case_stmt_list)

    case_stmt_list  go to state 175
    case_stmt       go to state 176


State 170

   81 if_stmt: IF $@6 OC expr CC $@7 OF • $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 79 ($@8)

    $@8  go to state 177


State 171

  105 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF • $@22 stmt_list CF

    $default  reduce using rule 104 ($@22)

    $@22  go to state 178


State 172

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL • $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 107 ($@24)

    $@24  go to state 179


State 173

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 • OF arr_values CF SCOL

    OF  shift, and go to state 180


State 174

   99 case_stmt: CASE • $@18 OC const $@19 CC COLON stmt_list

    $default  reduce using rule 97 ($@18)

    $@18  go to state 181


State 175

   94 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list • $@17 default_stmt CF

    $default  reduce using rule 93 ($@17)

    $@17  go to state 182


State 176

   95 case_stmt_list: case_stmt • case_stmt_list

    CASE  shift, and go to state 174

    $default  reduce using rule 96 (case_stmt_list)

    case_stmt_list  go to state 183
    case_stmt       go to state 176

    stmt_list        go to state 180
    stmt             go to state 29
    declaration      go to state 30
    return_stmt      go to state 31
    data_type        go to state 32
    expr             go to state 33
    postfix_expr     go to state 34
    unary_expr       go to state 35
    primary_expr     go to state 36
    unary_op         go to state 37
    const            go to state 38
    assign           go to state 39
    if_stmt          go to state 40
    switch_stmt      go to state 41
    while_loop_stmt  go to state 42
    for_loop_stmt    go to state 43
    func_call        go to state 44


   81 if_stmt: IF $@6 OC expr CC $@7 OF $@8 • stmt_list CF $@9 elif_stmt else_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 184
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 178

  105 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 185
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 179

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 • assign CC $@25 OF $@26 stmt_list CF

    ID  shift, and go to state 105

    assign  go to state 186


State 180

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF • arr_values CF SCOL

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    CHARACTER  shift, and go to state 24

    arr_values  go to state 187
    const       go to state 188


State 181

   99 case_stmt: CASE $@18 • OC const $@19 CC COLON stmt_list

    OC  shift, and go to state 189


State 182

   94 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 • default_stmt CF

    DEFAULT  shift, and go to state 190

    $default  reduce using rule 101 (default_stmt)

    default_stmt  go to state 191


State 183

   95 case_stmt_list: case_stmt case_stmt_list •

    $default  reduce using rule 95 (case_stmt_list)


State 184

   81 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list • CF $@9 elif_stmt else_stmt

    CF  shift, and go to state 192


State 185

  105 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list • CF

    CF  shift, and go to state 193


State 186

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign • CC $@25 OF $@26 stmt_list CF

    CC  shift, and go to state 194


State 187

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values • CF SCOL

    CF  shift, and go to state 195


State 188

   35 arr_values: const • $@5 COMMA arr_values
   36           | const •

    CF        reduce using rule 36 (arr_values)
    $default  reduce using rule 34 ($@5)

    $@5  go to state 196


State 189

   99 case_stmt: CASE $@18 OC • const $@19 CC COLON stmt_list

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    CHARACTER  shift, and go to state 24

    const  go to state 197


State 190

  100 default_stmt: DEFAULT • COLON stmt_list

    COLON  shift, and go to state 198


State 191

   94 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt • CF

    CF  shift, and go to state 199


State 192

   81 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF • $@9 elif_stmt else_stmt

    $default  reduce using rule 80 ($@9)

    $@9  go to state 200


State 193

  105 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF •

    $default  reduce using rule 105 (while_loop_stmt)


State 194

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC • $@25 OF $@26 stmt_list CF

    $default  reduce using rule 108 ($@25)

    $@25  go to state 201


State 195

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF • SCOL

    SCOL  shift, and go to state 202


State 196

   35 arr_values: const $@5 • COMMA arr_values

    COMMA  shift, and go to state 203


State 197

   99 case_stmt: CASE $@18 OC const • $@19 CC COLON stmt_list

    $default  reduce using rule 98 ($@19)

    $@19  go to state 204


State 198

  100 default_stmt: DEFAULT COLON • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 205
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 199

   94 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF •

    $default  reduce using rule 94 (switch_stmt)


State 200

   81 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 • elif_stmt else_stmt

    ELIF  shift, and go to state 206

    $default  reduce using rule 87 (elif_stmt)

    elif_stmt  go to state 207


State 201

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 • OF $@26 stmt_list CF

    OF  shift, and go to state 208


State 202

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL •

    $default  reduce using rule 33 (declaration)


State 203

   35 arr_values: const $@5 COMMA • arr_values

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    CHARACTER  shift, and go to state 24

    arr_values  go to state 209
    const       go to state 188


State 204

   99 case_stmt: CASE $@18 OC const $@19 • CC COLON stmt_list

    CC  shift, and go to state 210


State 205

  100 default_stmt: DEFAULT COLON stmt_list •

    $default  reduce using rule 100 (default_stmt)


State 206

   86 elif_stmt: ELIF • $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 82 ($@10)

    $@10  go to state 211


State 207

   81 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt • else_stmt

    ELSE  shift, and go to state 212

    $default  reduce using rule 90 (else_stmt)

    else_stmt  go to state 213


State 208

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF • $@26 stmt_list CF

    $default  reduce using rule 109 ($@26)

    $@26  go to state 214


State 209

   35 arr_values: const $@5 COMMA arr_values •

    $default  reduce using rule 35 (arr_values)


State 210

   99 case_stmt: CASE $@18 OC const $@19 CC • COLON stmt_list

    COLON  shift, and go to state 215


State 211

   86 elif_stmt: ELIF $@10 • OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    OC  shift, and go to state 216


State 212

   89 else_stmt: ELSE • OF $@14 stmt_list CF

    OF  shift, and go to state 217


State 213

   81 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt •

    $default  reduce using rule 81 (if_stmt)


State 214

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 218
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 215

   99 case_stmt: CASE $@18 OC const $@19 CC COLON • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 219
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 216

   86 elif_stmt: ELIF $@10 OC • expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 52
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25

    expr          go to state 220
    postfix_expr  go to state 40
    unary_expr    go to state 41
    primary_expr  go to state 42
    unary_op      go to state 43
    const         go to state 44
    func_call     go to state 50


State 217

   89 else_stmt: ELSE OF • $@14 stmt_list CF

    $default  reduce using rule 88 ($@14)

    $@14  go to state 221


State 218

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list • CF

    CF  shift, and go to state 222


State 219

   99 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list •

    $default  reduce using rule 99 (case_stmt)


State 220

   41 expr: expr • ADD expr
   42     | expr • SUBTRACT expr
   43     | expr • MULTIPLY expr
   44     | expr • DIVIDE expr
   45     | expr • LE expr
   46     | expr • GE expr
   47     | expr • LT expr
   48     | expr • GT expr
   49     | expr • EQ expr
   50     | expr • NE expr
   51     | expr • AND expr
   52     | expr • OR expr
   53     | expr • MODULO expr
   54     | expr • BITAND expr
   55     | expr • BITOR expr
   56     | expr • XOR expr
   57     | expr • LEFTSHIFT expr
   58     | expr • RIGHTSHIFT expr
   86 elif_stmt: ELIF $@10 OC expr • CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 223


State 221

   89 else_stmt: ELSE OF $@14 • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 224
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 222

  110 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF •

    $default  reduce using rule 110 (for_loop_stmt)


State 223

   86 elif_stmt: ELIF $@10 OC expr CC • $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 83 ($@11)

    $@11  go to state 225


State 224

   89 else_stmt: ELSE OF $@14 stmt_list • CF

    CF  shift, and go to state 226


State 225

   86 elif_stmt: ELIF $@10 OC expr CC $@11 • OF $@12 stmt_list CF $@13 elif_stmt

    OF  shift, and go to state 227


State 226

   89 else_stmt: ELSE OF $@14 stmt_list CF •

    $default  reduce using rule 89 (else_stmt)


State 227

   86 elif_stmt: ELIF $@10 OC expr CC $@11 OF • $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 84 ($@12)

    $@12  go to state 228


State 228

   86 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 • stmt_list CF $@13 elif_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 16
    INT_NUM    shift, and go to state 17
    FLOAT_NUM  shift, and go to state 18
    ID         shift, and go to state 19
    NOT        shift, and go to state 20
    ADD        shift, and go to state 21
    SUBTRACT   shift, and go to state 22
    NEGATION   shift, and go to state 23
    CHARACTER  shift, and go to state 24
    OC         shift, and go to state 25
    OUTPUT     shift, and go to state 26
    INPUT      shift, and go to state 27
    SWITCH     shift, and go to state 28
    BREAK      shift, and go to state 29
    IF         shift, and go to state 30
    WHILE      shift, and go to state 31
    FOR        shift, and go to state 32
    CONTINUE   shift, and go to state 33

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 229
    stmt             go to state 35
    declaration      go to state 36
    return_stmt      go to state 37
    data_type        go to state 38
    expr             go to state 39
    postfix_expr     go to state 40
    unary_expr       go to state 41
    primary_expr     go to state 42
    unary_op         go to state 43
    const            go to state 44
    assign           go to state 45
    if_stmt          go to state 46
    switch_stmt      go to state 47
    while_loop_stmt  go to state 48
    for_loop_stmt    go to state 49
    func_call        go to state 50


State 229

   86 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list • CF $@13 elif_stmt

    CF  shift, and go to state 230


State 230

   86 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF • $@13 elif_stmt

    $default  reduce using rule 85 ($@13)

    $@13  go to state 231


State 231

   86 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 • elif_stmt

    ELIF  shift, and go to state 206

    $default  reduce using rule 87 (elif_stmt)

    elif_stmt  go to state 232


State 232

   86 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt •

    $default  reduce using rule 86 (elif_stmt)
