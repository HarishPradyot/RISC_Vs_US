Terminals unused in grammar

   LEFTSHIFT
   RIGHTSHIFT
   STR
   PRINT
   SCAN
   SWITCH
   CASE
   DEFAULT


Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 func: func_prefix OF stmt_list CF

    5 $@1: %empty

    6 func_prefix: data_type ID $@1 OC param_list CC

    7 param_list: param_list COMMA param
    8           | param
    9           | %empty

   10 param: data_type ID
   11      | data_type ID OS CS COLON INT ID

   12 stmt_list: stmt stmt_list
   13          | %empty

   14 stmt: declaration
   15     | assign SCOL
   16     | expr SCOL
   17     | return_stmt SCOL
   18     | if_stmt
   19     | while_loop_stmt
   20     | for_loop_stmt
   21     | BREAK SCOL
   22     | CONTINUE SCOL

   23 declaration: data_type ID SCOL
   24            | data_type ID ASSIGN expr SCOL

   25 return_stmt: RETURN expr

   26 data_type: INT
   27          | FLOAT
   28          | CHAR

   29 expr: expr ADD expr
   30     | expr SUBTRACT expr
   31     | expr MULTIPLY expr
   32     | expr DIVIDE expr
   33     | expr LE expr
   34     | expr GE expr
   35     | expr LT expr
   36     | expr GT expr
   37     | expr EQ expr
   38     | expr NE expr
   39     | expr AND expr
   40     | expr OR expr
   41     | expr MODULO expr
   42     | expr BITAND expr
   43     | expr BITOR expr
   44     | expr XOR expr
   45     | unary_expr
   46     | primary_expr

   47 unary_expr: unary_op primary_expr

   48 primary_expr: ID
   49             | const
   50             | OC expr CC

   51 unary_op: ADD
   52         | SUBTRACT
   53         | NOT
   54         | NEGATION

   55 const: INT_NUM
   56      | CHARACTER

   57 assign: ID ASSIGN expr

   58 $@2: %empty

   59 $@3: %empty

   60 $@4: %empty

   61 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

   62 $@5: %empty

   63 $@6: %empty

   64 $@7: %empty

   65 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt
   66          | %empty

   67 else_stmt: ELSE OF stmt_list CF
   68          | %empty

   69 $@8: %empty

   70 $@9: %empty

   71 while_loop_stmt: WHILE $@8 OC expr CC $@9 OF stmt_list CF

   72 $@10: %empty

   73 $@11: %empty

   74 $@12: %empty

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 assign CC $@12 OF stmt_list CF


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 11 26
CHAR (259) 28
FLOAT (260) 27
RETURN (261) 25
INT_NUM (262) 55
ID (263) 6 10 11 23 24 48 57
LEFTSHIFT (264)
RIGHTSHIFT (265)
LE (266) 33
GE (267) 34
EQ (268) 37
NE (269) 38
GT (270) 36
LT (271) 35
AND (272) 39
OR (273) 40
NOT (274) 53
ADD (275) 29 51
SUBTRACT (276) 30 52
DIVIDE (277) 32
MULTIPLY (278) 31
MODULO (279) 41
BITAND (280) 42
BITOR (281) 43
NEGATION (282) 54
XOR (283) 44
STR (284)
CHARACTER (285) 56
CC (286) 6 50 61 65 71 75
OC (287) 6 50 61 65 71 75
CS (288) 11
OS (289) 11
CF (290) 4 61 65 67 71 75
OF (291) 4 61 65 67 71 75
COMMA (292) 7
COLON (293) 11
SCOL (294) 15 16 17 21 22 23 24 75
PRINT (295)
SCAN (296)
SWITCH (297)
CASE (298)
BREAK (299) 21
DEFAULT (300)
IF (301) 61
ELIF (302) 65
ELSE (303) 67
WHILE (304) 71
FOR (305) 75
CONTINUE (306) 22
ASSIGN (307) 24 57


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
Program (54)
    on left: 1, on right: 0
func_list (55)
    on left: 2 3, on right: 1 2
func (56)
    on left: 4, on right: 2
func_prefix (57)
    on left: 6, on right: 4
$@1 (58)
    on left: 5, on right: 6
param_list (59)
    on left: 7 8 9, on right: 6 7
param (60)
    on left: 10 11, on right: 7 8
stmt_list (61)
    on left: 12 13, on right: 4 12 61 65 67 71 75
stmt (62)
    on left: 14 15 16 17 18 19 20 21 22, on right: 12
declaration (63)
    on left: 23 24, on right: 14
return_stmt (64)
    on left: 25, on right: 17
data_type (65)
    on left: 26 27 28, on right: 6 10 11 23 24
expr (66)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46,
    on right: 16 24 25 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    44 50 57 61 65 71 75
unary_expr (67)
    on left: 47, on right: 45
primary_expr (68)
    on left: 48 49 50, on right: 46 47
unary_op (69)
    on left: 51 52 53 54, on right: 47
const (70)
    on left: 55 56, on right: 49
assign (71)
    on left: 57, on right: 15 75
if_stmt (72)
    on left: 61, on right: 18
$@2 (73)
    on left: 58, on right: 61
$@3 (74)
    on left: 59, on right: 61
$@4 (75)
    on left: 60, on right: 61
elif_stmt (76)
    on left: 65 66, on right: 61 65
$@5 (77)
    on left: 62, on right: 65
$@6 (78)
    on left: 63, on right: 65
$@7 (79)
    on left: 64, on right: 65
else_stmt (80)
    on left: 67 68, on right: 61
while_loop_stmt (81)
    on left: 71, on right: 19
$@8 (82)
    on left: 69, on right: 71
$@9 (83)
    on left: 70, on right: 71
for_loop_stmt (84)
    on left: 75, on right: 20
$@10 (85)
    on left: 72, on right: 75
$@11 (86)
    on left: 73, on right: 75
$@12 (87)
    on left: 74, on right: 75


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 1 (Program)

    func         go to state 7
    func_prefix  go to state 8
    data_type    go to state 9


State 3

    0 $accept: Program $end .

    $default  accept


State 4

   26 data_type: INT .

    $default  reduce using rule 26 (data_type)


State 5

   28 data_type: CHAR .

    $default  reduce using rule 28 (data_type)


State 6

   27 data_type: FLOAT .

    $default  reduce using rule 27 (data_type)


State 7

    2 func_list: func_list func .

    $default  reduce using rule 2 (func_list)


State 8

    4 func: func_prefix . OF stmt_list CF

    OF  shift, and go to state 10


State 9

    6 func_prefix: data_type . ID $@1 OC param_list CC

    ID  shift, and go to state 11


State 10

    4 func: func_prefix OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    BREAK      shift, and go to state 21
    IF         shift, and go to state 22
    WHILE      shift, and go to state 23
    FOR        shift, and go to state 24
    CONTINUE   shift, and go to state 25

    $default  reduce using rule 13 (stmt_list)

    stmt_list        go to state 26
    stmt             go to state 27
    declaration      go to state 28
    return_stmt      go to state 29
    data_type        go to state 30
    expr             go to state 31
    unary_expr       go to state 32
    primary_expr     go to state 33
    unary_op         go to state 34
    const            go to state 35
    assign           go to state 36
    if_stmt          go to state 37
    while_loop_stmt  go to state 38
    for_loop_stmt    go to state 39


State 11

    6 func_prefix: data_type ID . $@1 OC param_list CC

    $default  reduce using rule 5 ($@1)

    $@1  go to state 40


State 12

   25 return_stmt: RETURN . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 42
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 13

   55 const: INT_NUM .

    $default  reduce using rule 55 (const)


State 14

   48 primary_expr: ID .
   57 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 43

    $default  reduce using rule 48 (primary_expr)


State 15

   53 unary_op: NOT .

    $default  reduce using rule 53 (unary_op)


State 16

   51 unary_op: ADD .

    $default  reduce using rule 51 (unary_op)


State 17

   52 unary_op: SUBTRACT .

    $default  reduce using rule 52 (unary_op)


State 18

   54 unary_op: NEGATION .

    $default  reduce using rule 54 (unary_op)


State 19

   56 const: CHARACTER .

    $default  reduce using rule 56 (const)


State 20

   50 primary_expr: OC . expr CC

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 44
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 21

   21 stmt: BREAK . SCOL

    SCOL  shift, and go to state 45


State 22

   61 if_stmt: IF . $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    $default  reduce using rule 58 ($@2)

    $@2  go to state 46


State 23

   71 while_loop_stmt: WHILE . $@8 OC expr CC $@9 OF stmt_list CF

    $default  reduce using rule 69 ($@8)

    $@8  go to state 47


State 24

   75 for_loop_stmt: FOR . OC assign SCOL $@10 expr SCOL $@11 assign CC $@12 OF stmt_list CF

    OC  shift, and go to state 48


State 25

   22 stmt: CONTINUE . SCOL

    SCOL  shift, and go to state 49


State 26

    4 func: func_prefix OF stmt_list . CF

    CF  shift, and go to state 50


State 27

   12 stmt_list: stmt . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    BREAK      shift, and go to state 21
    IF         shift, and go to state 22
    WHILE      shift, and go to state 23
    FOR        shift, and go to state 24
    CONTINUE   shift, and go to state 25

    $default  reduce using rule 13 (stmt_list)

    stmt_list        go to state 51
    stmt             go to state 27
    declaration      go to state 28
    return_stmt      go to state 29
    data_type        go to state 30
    expr             go to state 31
    unary_expr       go to state 32
    primary_expr     go to state 33
    unary_op         go to state 34
    const            go to state 35
    assign           go to state 36
    if_stmt          go to state 37
    while_loop_stmt  go to state 38
    for_loop_stmt    go to state 39


State 28

   14 stmt: declaration .

    $default  reduce using rule 14 (stmt)


State 29

   17 stmt: return_stmt . SCOL

    SCOL  shift, and go to state 52


State 30

   23 declaration: data_type . ID SCOL
   24            | data_type . ID ASSIGN expr SCOL

    ID  shift, and go to state 53


State 31

   16 stmt: expr . SCOL
   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69
    SCOL      shift, and go to state 70


State 32

   45 expr: unary_expr .

    $default  reduce using rule 45 (expr)


State 33

   46 expr: primary_expr .

    $default  reduce using rule 46 (expr)


State 34

   47 unary_expr: unary_op . primary_expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    primary_expr  go to state 71
    const         go to state 35


State 35

   49 primary_expr: const .

    $default  reduce using rule 49 (primary_expr)


State 36

   15 stmt: assign . SCOL

    SCOL  shift, and go to state 72


State 37

   18 stmt: if_stmt .

    $default  reduce using rule 18 (stmt)


State 38

   19 stmt: while_loop_stmt .

    $default  reduce using rule 19 (stmt)


State 39

   20 stmt: for_loop_stmt .

    $default  reduce using rule 20 (stmt)


State 40

    6 func_prefix: data_type ID $@1 . OC param_list CC

    OC  shift, and go to state 73


State 41

   48 primary_expr: ID .

    $default  reduce using rule 48 (primary_expr)


State 42

   25 return_stmt: RETURN expr .
   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69

    $default  reduce using rule 25 (return_stmt)


State 43

   57 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 74
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 44

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr
   50 primary_expr: OC expr . CC

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69
    CC        shift, and go to state 75


State 45

   21 stmt: BREAK SCOL .

    $default  reduce using rule 21 (stmt)


State 46

   61 if_stmt: IF $@2 . OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    OC  shift, and go to state 76


State 47

   71 while_loop_stmt: WHILE $@8 . OC expr CC $@9 OF stmt_list CF

    OC  shift, and go to state 77


State 48

   75 for_loop_stmt: FOR OC . assign SCOL $@10 expr SCOL $@11 assign CC $@12 OF stmt_list CF

    ID  shift, and go to state 78

    assign  go to state 79


State 49

   22 stmt: CONTINUE SCOL .

    $default  reduce using rule 22 (stmt)


State 50

    4 func: func_prefix OF stmt_list CF .

    $default  reduce using rule 4 (func)


State 51

   12 stmt_list: stmt stmt_list .

    $default  reduce using rule 12 (stmt_list)


State 52

   17 stmt: return_stmt SCOL .

    $default  reduce using rule 17 (stmt)


State 53

   23 declaration: data_type ID . SCOL
   24            | data_type ID . ASSIGN expr SCOL

    SCOL    shift, and go to state 80
    ASSIGN  shift, and go to state 81


State 54

   33 expr: expr LE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 82
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 55

   34 expr: expr GE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 83
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 56

   37 expr: expr EQ . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 84
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 57

   38 expr: expr NE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 85
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 58

   36 expr: expr GT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 86
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 59

   35 expr: expr LT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 87
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 60

   39 expr: expr AND . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 88
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 61

   40 expr: expr OR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 89
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 62

   29 expr: expr ADD . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 90
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 63

   30 expr: expr SUBTRACT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 91
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 64

   32 expr: expr DIVIDE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 92
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 65

   31 expr: expr MULTIPLY . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 93
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 66

   41 expr: expr MODULO . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 94
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 67

   42 expr: expr BITAND . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 95
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 68

   43 expr: expr BITOR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 96
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 69

   44 expr: expr XOR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 97
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 70

   16 stmt: expr SCOL .

    $default  reduce using rule 16 (stmt)


State 71

   47 unary_expr: unary_op primary_expr .

    $default  reduce using rule 47 (unary_expr)


State 72

   15 stmt: assign SCOL .

    $default  reduce using rule 15 (stmt)


State 73

    6 func_prefix: data_type ID $@1 OC . param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 9 (param_list)

    param_list  go to state 98
    param       go to state 99
    data_type   go to state 100


State 74

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr
   57 assign: ID ASSIGN expr .

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69

    $default  reduce using rule 57 (assign)


State 75

   50 primary_expr: OC expr CC .

    $default  reduce using rule 50 (primary_expr)


State 76

   61 if_stmt: IF $@2 OC . expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 101
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 77

   71 while_loop_stmt: WHILE $@8 OC . expr CC $@9 OF stmt_list CF

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 102
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 78

   57 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 43


State 79

   75 for_loop_stmt: FOR OC assign . SCOL $@10 expr SCOL $@11 assign CC $@12 OF stmt_list CF

    SCOL  shift, and go to state 103


State 80

   23 declaration: data_type ID SCOL .

    $default  reduce using rule 23 (declaration)


State 81

   24 declaration: data_type ID ASSIGN . expr SCOL

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 104
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 82

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   33     | expr LE expr .
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 33 (expr)


State 83

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   34     | expr GE expr .
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 34 (expr)


State 84

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   37     | expr EQ expr .
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 37 (expr)


State 85

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   38     | expr NE expr .
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 38 (expr)


State 86

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   36     | expr GT expr .
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 36 (expr)


State 87

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   35     | expr LT expr .
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 35 (expr)


State 88

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   39     | expr AND expr .
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69

    $default  reduce using rule 39 (expr)


State 89

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   40     | expr OR expr .
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69

    $default  reduce using rule 40 (expr)


State 90

   29 expr: expr . ADD expr
   29     | expr ADD expr .
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 29 (expr)


State 91

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   30     | expr SUBTRACT expr .
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 30 (expr)


State 92

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   32     | expr DIVIDE expr .
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    $default  reduce using rule 32 (expr)


State 93

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   31     | expr MULTIPLY expr .
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    $default  reduce using rule 31 (expr)


State 94

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   41     | expr MODULO expr .
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    $default  reduce using rule 41 (expr)


State 95

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   42     | expr BITAND expr .
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66

    $default  reduce using rule 42 (expr)


State 96

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   43     | expr BITOR expr .
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    XOR       shift, and go to state 69

    $default  reduce using rule 43 (expr)


State 97

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr
   44     | expr XOR expr .

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67

    $default  reduce using rule 44 (expr)


State 98

    6 func_prefix: data_type ID $@1 OC param_list . CC
    7 param_list: param_list . COMMA param

    CC     shift, and go to state 105
    COMMA  shift, and go to state 106


State 99

    8 param_list: param .

    $default  reduce using rule 8 (param_list)


State 100

   10 param: data_type . ID
   11      | data_type . ID OS CS COLON INT ID

    ID  shift, and go to state 107


State 101

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr
   61 if_stmt: IF $@2 OC expr . CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69
    CC        shift, and go to state 108


State 102

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr
   71 while_loop_stmt: WHILE $@8 OC expr . CC $@9 OF stmt_list CF

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69
    CC        shift, and go to state 109


State 103

   75 for_loop_stmt: FOR OC assign SCOL . $@10 expr SCOL $@11 assign CC $@12 OF stmt_list CF

    $default  reduce using rule 72 ($@10)

    $@10  go to state 110


State 104

   24 declaration: data_type ID ASSIGN expr . SCOL
   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69
    SCOL      shift, and go to state 111


State 105

    6 func_prefix: data_type ID $@1 OC param_list CC .

    $default  reduce using rule 6 (func_prefix)


State 106

    7 param_list: param_list COMMA . param

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    param      go to state 112
    data_type  go to state 100


State 107

   10 param: data_type ID .
   11      | data_type ID . OS CS COLON INT ID

    OS  shift, and go to state 113

    $default  reduce using rule 10 (param)


State 108

   61 if_stmt: IF $@2 OC expr CC . $@3 OF stmt_list CF $@4 elif_stmt else_stmt

    $default  reduce using rule 59 ($@3)

    $@3  go to state 114


State 109

   71 while_loop_stmt: WHILE $@8 OC expr CC . $@9 OF stmt_list CF

    $default  reduce using rule 70 ($@9)

    $@9  go to state 115


State 110

   75 for_loop_stmt: FOR OC assign SCOL $@10 . expr SCOL $@11 assign CC $@12 OF stmt_list CF

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 116
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 111

   24 declaration: data_type ID ASSIGN expr SCOL .

    $default  reduce using rule 24 (declaration)


State 112

    7 param_list: param_list COMMA param .

    $default  reduce using rule 7 (param_list)


State 113

   11 param: data_type ID OS . CS COLON INT ID

    CS  shift, and go to state 117


State 114

   61 if_stmt: IF $@2 OC expr CC $@3 . OF stmt_list CF $@4 elif_stmt else_stmt

    OF  shift, and go to state 118


State 115

   71 while_loop_stmt: WHILE $@8 OC expr CC $@9 . OF stmt_list CF

    OF  shift, and go to state 119


State 116

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr
   75 for_loop_stmt: FOR OC assign SCOL $@10 expr . SCOL $@11 assign CC $@12 OF stmt_list CF

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69
    SCOL      shift, and go to state 120


State 117

   11 param: data_type ID OS CS . COLON INT ID

    COLON  shift, and go to state 121


State 118

   61 if_stmt: IF $@2 OC expr CC $@3 OF . stmt_list CF $@4 elif_stmt else_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    BREAK      shift, and go to state 21
    IF         shift, and go to state 22
    WHILE      shift, and go to state 23
    FOR        shift, and go to state 24
    CONTINUE   shift, and go to state 25

    $default  reduce using rule 13 (stmt_list)

    stmt_list        go to state 122
    stmt             go to state 27
    declaration      go to state 28
    return_stmt      go to state 29
    data_type        go to state 30
    expr             go to state 31
    unary_expr       go to state 32
    primary_expr     go to state 33
    unary_op         go to state 34
    const            go to state 35
    assign           go to state 36
    if_stmt          go to state 37
    while_loop_stmt  go to state 38
    for_loop_stmt    go to state 39


State 119

   71 while_loop_stmt: WHILE $@8 OC expr CC $@9 OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    BREAK      shift, and go to state 21
    IF         shift, and go to state 22
    WHILE      shift, and go to state 23
    FOR        shift, and go to state 24
    CONTINUE   shift, and go to state 25

    $default  reduce using rule 13 (stmt_list)

    stmt_list        go to state 123
    stmt             go to state 27
    declaration      go to state 28
    return_stmt      go to state 29
    data_type        go to state 30
    expr             go to state 31
    unary_expr       go to state 32
    primary_expr     go to state 33
    unary_op         go to state 34
    const            go to state 35
    assign           go to state 36
    if_stmt          go to state 37
    while_loop_stmt  go to state 38
    for_loop_stmt    go to state 39


State 120

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL . $@11 assign CC $@12 OF stmt_list CF

    $default  reduce using rule 73 ($@11)

    $@11  go to state 124


State 121

   11 param: data_type ID OS CS COLON . INT ID

    INT  shift, and go to state 125


State 122

   61 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list . CF $@4 elif_stmt else_stmt

    CF  shift, and go to state 126


State 123

   71 while_loop_stmt: WHILE $@8 OC expr CC $@9 OF stmt_list . CF

    CF  shift, and go to state 127


State 124

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 . assign CC $@12 OF stmt_list CF

    ID  shift, and go to state 78

    assign  go to state 128


State 125

   11 param: data_type ID OS CS COLON INT . ID

    ID  shift, and go to state 129


State 126

   61 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF . $@4 elif_stmt else_stmt

    $default  reduce using rule 60 ($@4)

    $@4  go to state 130


State 127

   71 while_loop_stmt: WHILE $@8 OC expr CC $@9 OF stmt_list CF .

    $default  reduce using rule 71 (while_loop_stmt)


State 128

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 assign . CC $@12 OF stmt_list CF

    CC  shift, and go to state 131


State 129

   11 param: data_type ID OS CS COLON INT ID .

    $default  reduce using rule 11 (param)


State 130

   61 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 . elif_stmt else_stmt

    ELIF  shift, and go to state 132

    $default  reduce using rule 66 (elif_stmt)

    elif_stmt  go to state 133


State 131

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 assign CC . $@12 OF stmt_list CF

    $default  reduce using rule 74 ($@12)

    $@12  go to state 134


State 132

   65 elif_stmt: ELIF . $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt

    $default  reduce using rule 62 ($@5)

    $@5  go to state 135


State 133

   61 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt . else_stmt

    ELSE  shift, and go to state 136

    $default  reduce using rule 68 (else_stmt)

    else_stmt  go to state 137


State 134

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 assign CC $@12 . OF stmt_list CF

    OF  shift, and go to state 138


State 135

   65 elif_stmt: ELIF $@5 . OC expr CC $@6 OF stmt_list CF $@7 elif_stmt

    OC  shift, and go to state 139


State 136

   67 else_stmt: ELSE . OF stmt_list CF

    OF  shift, and go to state 140


State 137

   61 if_stmt: IF $@2 OC expr CC $@3 OF stmt_list CF $@4 elif_stmt else_stmt .

    $default  reduce using rule 61 (if_stmt)


State 138

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 assign CC $@12 OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    BREAK      shift, and go to state 21
    IF         shift, and go to state 22
    WHILE      shift, and go to state 23
    FOR        shift, and go to state 24
    CONTINUE   shift, and go to state 25

    $default  reduce using rule 13 (stmt_list)

    stmt_list        go to state 141
    stmt             go to state 27
    declaration      go to state 28
    return_stmt      go to state 29
    data_type        go to state 30
    expr             go to state 31
    unary_expr       go to state 32
    primary_expr     go to state 33
    unary_op         go to state 34
    const            go to state 35
    assign           go to state 36
    if_stmt          go to state 37
    while_loop_stmt  go to state 38
    for_loop_stmt    go to state 39


State 139

   65 elif_stmt: ELIF $@5 OC . expr CC $@6 OF stmt_list CF $@7 elif_stmt

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 41
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 142
    unary_expr    go to state 32
    primary_expr  go to state 33
    unary_op      go to state 34
    const         go to state 35


State 140

   67 else_stmt: ELSE OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    BREAK      shift, and go to state 21
    IF         shift, and go to state 22
    WHILE      shift, and go to state 23
    FOR        shift, and go to state 24
    CONTINUE   shift, and go to state 25

    $default  reduce using rule 13 (stmt_list)

    stmt_list        go to state 143
    stmt             go to state 27
    declaration      go to state 28
    return_stmt      go to state 29
    data_type        go to state 30
    expr             go to state 31
    unary_expr       go to state 32
    primary_expr     go to state 33
    unary_op         go to state 34
    const            go to state 35
    assign           go to state 36
    if_stmt          go to state 37
    while_loop_stmt  go to state 38
    for_loop_stmt    go to state 39


State 141

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 assign CC $@12 OF stmt_list . CF

    CF  shift, and go to state 144


State 142

   29 expr: expr . ADD expr
   30     | expr . SUBTRACT expr
   31     | expr . MULTIPLY expr
   32     | expr . DIVIDE expr
   33     | expr . LE expr
   34     | expr . GE expr
   35     | expr . LT expr
   36     | expr . GT expr
   37     | expr . EQ expr
   38     | expr . NE expr
   39     | expr . AND expr
   40     | expr . OR expr
   41     | expr . MODULO expr
   42     | expr . BITAND expr
   43     | expr . BITOR expr
   44     | expr . XOR expr
   65 elif_stmt: ELIF $@5 OC expr . CC $@6 OF stmt_list CF $@7 elif_stmt

    LE        shift, and go to state 54
    GE        shift, and go to state 55
    EQ        shift, and go to state 56
    NE        shift, and go to state 57
    GT        shift, and go to state 58
    LT        shift, and go to state 59
    AND       shift, and go to state 60
    OR        shift, and go to state 61
    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MULTIPLY  shift, and go to state 65
    MODULO    shift, and go to state 66
    BITAND    shift, and go to state 67
    BITOR     shift, and go to state 68
    XOR       shift, and go to state 69
    CC        shift, and go to state 145


State 143

   67 else_stmt: ELSE OF stmt_list . CF

    CF  shift, and go to state 146


State 144

   75 for_loop_stmt: FOR OC assign SCOL $@10 expr SCOL $@11 assign CC $@12 OF stmt_list CF .

    $default  reduce using rule 75 (for_loop_stmt)


State 145

   65 elif_stmt: ELIF $@5 OC expr CC . $@6 OF stmt_list CF $@7 elif_stmt

    $default  reduce using rule 63 ($@6)

    $@6  go to state 147


State 146

   67 else_stmt: ELSE OF stmt_list CF .

    $default  reduce using rule 67 (else_stmt)


State 147

   65 elif_stmt: ELIF $@5 OC expr CC $@6 . OF stmt_list CF $@7 elif_stmt

    OF  shift, and go to state 148


State 148

   65 elif_stmt: ELIF $@5 OC expr CC $@6 OF . stmt_list CF $@7 elif_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20
    BREAK      shift, and go to state 21
    IF         shift, and go to state 22
    WHILE      shift, and go to state 23
    FOR        shift, and go to state 24
    CONTINUE   shift, and go to state 25

    $default  reduce using rule 13 (stmt_list)

    stmt_list        go to state 149
    stmt             go to state 27
    declaration      go to state 28
    return_stmt      go to state 29
    data_type        go to state 30
    expr             go to state 31
    unary_expr       go to state 32
    primary_expr     go to state 33
    unary_op         go to state 34
    const            go to state 35
    assign           go to state 36
    if_stmt          go to state 37
    while_loop_stmt  go to state 38
    for_loop_stmt    go to state 39


State 149

   65 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list . CF $@7 elif_stmt

    CF  shift, and go to state 150


State 150

   65 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF . $@7 elif_stmt

    $default  reduce using rule 64 ($@7)

    $@7  go to state 151


State 151

   65 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF $@7 . elif_stmt

    ELIF  shift, and go to state 132

    $default  reduce using rule 66 (elif_stmt)

    elif_stmt  go to state 152


State 152

   65 elif_stmt: ELIF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt .

    $default  reduce using rule 65 (elif_stmt)
