Terminals unused in grammar

    LEFTSHIFT
    RIGHTSHIFT
    STR
    PRINT
    SCAN


Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 func: func_prefix OF stmt_list CF

    5 $@1: %empty

    6 func_prefix: data_type ID $@1 OC param_list CC

    7 param_list: param_list COMMA param
    8           | param
    9           | %empty

   10 param: data_type ID
   11      | data_type ID OS CS COLON INT ID

   12 stmt_list: stmt stmt_list
   13          | %empty

   14 stmt: declaration
   15     | assign SCOL
   16     | expr SCOL
   17     | return_stmt SCOL

   18 declaration: data_type ID SCOL
   19            | data_type ID ASSIGN expr SCOL

   20 return_stmt: RETURN expr

   21 data_type: INT
   22          | FLOAT
   23          | CHAR

   24 expr: expr ADD expr
   25     | expr SUBTRACT expr
   26     | expr MULTIPLY expr
   27     | expr DIVIDE expr
   28     | expr LE expr
   29     | expr GE expr
   30     | expr LT expr
   31     | expr GT expr
   32     | expr EQ expr
   33     | expr NE expr
   34     | expr AND expr
   35     | expr OR expr
   36     | expr MODULO expr
   37     | expr BITAND expr
   38     | expr BITOR expr
   39     | expr XOR expr
   40     | unary_expr
   41     | primary_expr

   42 unary_expr: unary_op primary_expr

   43 primary_expr: ID
   44             | const
   45             | OC expr CC

   46 unary_op: ADD
   47         | SUBTRACT
   48         | NOT
   49         | NEGATION

   50 const: INT_NUM
   51      | CHARACTER

   52 assign: ID ASSIGN expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <node> (258) 11 21
    CHAR <node> (259) 23
    FLOAT <node> (260) 22
    RETURN <node> (261) 20
    INT_NUM <node> (262) 50
    ID <node> (263) 6 10 11 18 19 43 52
    LEFTSHIFT <node> (264)
    RIGHTSHIFT <node> (265)
    LE <node> (266) 28
    GE <node> (267) 29
    EQ <node> (268) 32
    NE <node> (269) 33
    GT <node> (270) 31
    LT <node> (271) 30
    AND <node> (272) 34
    OR <node> (273) 35
    NOT <node> (274) 48
    ADD <node> (275) 24 46
    SUBTRACT <node> (276) 25 47
    DIVIDE <node> (277) 27
    MULTIPLY <node> (278) 26
    MODULO <node> (279) 36
    BITAND <node> (280) 37
    BITOR <node> (281) 38
    NEGATION <node> (282) 49
    XOR <node> (283) 39
    STR <node> (284)
    CHARACTER <node> (285) 51
    CC <node> (286) 6 45
    OC <node> (287) 6 45
    CS <node> (288) 11
    OS <node> (289) 11
    CF <node> (290) 4
    OF <node> (291) 4
    COMMA <node> (292) 7
    COLON <node> (293) 11
    SCOL <node> (294) 15 16 17 18 19
    PRINT <node> (295)
    SCAN <node> (296)
    ASSIGN (297) 19 52


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    Program <node> (44)
        on left: 1
        on right: 0
    func_list <node> (45)
        on left: 2 3
        on right: 1 2
    func <node> (46)
        on left: 4
        on right: 2
    func_prefix <node> (47)
        on left: 6
        on right: 4
    $@1 (48)
        on left: 5
        on right: 6
    param_list <node> (49)
        on left: 7 8 9
        on right: 6 7
    param <node> (50)
        on left: 10 11
        on right: 7 8
    stmt_list <node> (51)
        on left: 12 13
        on right: 4 12
    stmt <node> (52)
        on left: 14 15 16 17
        on right: 12
    declaration <node> (53)
        on left: 18 19
        on right: 14
    return_stmt <node> (54)
        on left: 20
        on right: 17
    data_type <node> (55)
        on left: 21 22 23
        on right: 6 10 11 18 19
    expr <node> (56)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 16 19 20 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 45 52
    unary_expr <node> (57)
        on left: 42
        on right: 40
    primary_expr <node> (58)
        on left: 43 44 45
        on right: 41 42
    unary_op <node> (59)
        on left: 46 47 48 49
        on right: 42
    const <node> (60)
        on left: 50 51
        on right: 44
    assign <node> (61)
        on left: 52
        on right: 15


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 1 (Program)

    func         go to state 7
    func_prefix  go to state 8
    data_type    go to state 9


State 3

    0 $accept: Program $end .

    $default  accept


State 4

   21 data_type: INT .

    $default  reduce using rule 21 (data_type)


State 5

   23 data_type: CHAR .

    $default  reduce using rule 23 (data_type)


State 6

   22 data_type: FLOAT .

    $default  reduce using rule 22 (data_type)


State 7

    2 func_list: func_list func .

    $default  reduce using rule 2 (func_list)


State 8

    4 func: func_prefix . OF stmt_list CF

    OF  shift, and go to state 10


State 9

    6 func_prefix: data_type . ID $@1 OC param_list CC

    ID  shift, and go to state 11


State 10

    4 func: func_prefix OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    $default  reduce using rule 13 (stmt_list)

    stmt_list     go to state 21
    stmt          go to state 22
    declaration   go to state 23
    return_stmt   go to state 24
    data_type     go to state 25
    expr          go to state 26
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30
    assign        go to state 31


State 11

    6 func_prefix: data_type ID . $@1 OC param_list CC

    $default  reduce using rule 5 ($@1)

    $@1  go to state 32


State 12

   20 return_stmt: RETURN . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 34
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 13

   50 const: INT_NUM .

    $default  reduce using rule 50 (const)


State 14

   43 primary_expr: ID .
   52 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 35

    $default  reduce using rule 43 (primary_expr)


State 15

   48 unary_op: NOT .

    $default  reduce using rule 48 (unary_op)


State 16

   46 unary_op: ADD .

    $default  reduce using rule 46 (unary_op)


State 17

   47 unary_op: SUBTRACT .

    $default  reduce using rule 47 (unary_op)


State 18

   49 unary_op: NEGATION .

    $default  reduce using rule 49 (unary_op)


State 19

   51 const: CHARACTER .

    $default  reduce using rule 51 (const)


State 20

   45 primary_expr: OC . expr CC

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 36
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 21

    4 func: func_prefix OF stmt_list . CF

    CF  shift, and go to state 37


State 22

   12 stmt_list: stmt . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 12
    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 14
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    $default  reduce using rule 13 (stmt_list)

    stmt_list     go to state 38
    stmt          go to state 22
    declaration   go to state 23
    return_stmt   go to state 24
    data_type     go to state 25
    expr          go to state 26
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30
    assign        go to state 31


State 23

   14 stmt: declaration .

    $default  reduce using rule 14 (stmt)


State 24

   17 stmt: return_stmt . SCOL

    SCOL  shift, and go to state 39


State 25

   18 declaration: data_type . ID SCOL
   19            | data_type . ID ASSIGN expr SCOL

    ID  shift, and go to state 40


State 26

   16 stmt: expr . SCOL
   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    AND       shift, and go to state 47
    OR        shift, and go to state 48
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    BITOR     shift, and go to state 55
    XOR       shift, and go to state 56
    SCOL      shift, and go to state 57


State 27

   40 expr: unary_expr .

    $default  reduce using rule 40 (expr)


State 28

   41 expr: primary_expr .

    $default  reduce using rule 41 (expr)


State 29

   42 unary_expr: unary_op . primary_expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    primary_expr  go to state 58
    const         go to state 30


State 30

   44 primary_expr: const .

    $default  reduce using rule 44 (primary_expr)


State 31

   15 stmt: assign . SCOL

    SCOL  shift, and go to state 59


State 32

    6 func_prefix: data_type ID $@1 . OC param_list CC

    OC  shift, and go to state 60


State 33

   43 primary_expr: ID .

    $default  reduce using rule 43 (primary_expr)


State 34

   20 return_stmt: RETURN expr .
   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    AND       shift, and go to state 47
    OR        shift, and go to state 48
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    BITOR     shift, and go to state 55
    XOR       shift, and go to state 56

    $default  reduce using rule 20 (return_stmt)


State 35

   52 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 61
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 36

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr
   45 primary_expr: OC expr . CC

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    AND       shift, and go to state 47
    OR        shift, and go to state 48
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    BITOR     shift, and go to state 55
    XOR       shift, and go to state 56
    CC        shift, and go to state 62


State 37

    4 func: func_prefix OF stmt_list CF .

    $default  reduce using rule 4 (func)


State 38

   12 stmt_list: stmt stmt_list .

    $default  reduce using rule 12 (stmt_list)


State 39

   17 stmt: return_stmt SCOL .

    $default  reduce using rule 17 (stmt)


State 40

   18 declaration: data_type ID . SCOL
   19            | data_type ID . ASSIGN expr SCOL

    SCOL    shift, and go to state 63
    ASSIGN  shift, and go to state 64


State 41

   28 expr: expr LE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 65
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 42

   29 expr: expr GE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 66
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 43

   32 expr: expr EQ . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 67
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 44

   33 expr: expr NE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 68
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 45

   31 expr: expr GT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 69
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 46

   30 expr: expr LT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 70
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 47

   34 expr: expr AND . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 71
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 48

   35 expr: expr OR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 72
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 49

   24 expr: expr ADD . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 73
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 50

   25 expr: expr SUBTRACT . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 74
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 51

   27 expr: expr DIVIDE . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 75
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 52

   26 expr: expr MULTIPLY . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 76
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 53

   36 expr: expr MODULO . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 77
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 54

   37 expr: expr BITAND . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 78
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 55

   38 expr: expr BITOR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 79
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 56

   39 expr: expr XOR . expr

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 80
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 57

   16 stmt: expr SCOL .

    $default  reduce using rule 16 (stmt)


State 58

   42 unary_expr: unary_op primary_expr .

    $default  reduce using rule 42 (unary_expr)


State 59

   15 stmt: assign SCOL .

    $default  reduce using rule 15 (stmt)


State 60

    6 func_prefix: data_type ID $@1 OC . param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 9 (param_list)

    param_list  go to state 81
    param       go to state 82
    data_type   go to state 83


State 61

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr
   52 assign: ID ASSIGN expr .

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    AND       shift, and go to state 47
    OR        shift, and go to state 48
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    BITOR     shift, and go to state 55
    XOR       shift, and go to state 56

    $default  reduce using rule 52 (assign)


State 62

   45 primary_expr: OC expr CC .

    $default  reduce using rule 45 (primary_expr)


State 63

   18 declaration: data_type ID SCOL .

    $default  reduce using rule 18 (declaration)


State 64

   19 declaration: data_type ID ASSIGN . expr SCOL

    INT_NUM    shift, and go to state 13
    ID         shift, and go to state 33
    NOT        shift, and go to state 15
    ADD        shift, and go to state 16
    SUBTRACT   shift, and go to state 17
    NEGATION   shift, and go to state 18
    CHARACTER  shift, and go to state 19
    OC         shift, and go to state 20

    expr          go to state 84
    unary_expr    go to state 27
    primary_expr  go to state 28
    unary_op      go to state 29
    const         go to state 30


State 65

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   28     | expr LE expr .
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 28 (expr)


State 66

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   29     | expr GE expr .
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 29 (expr)


State 67

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   32     | expr EQ expr .
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 32 (expr)


State 68

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   33     | expr NE expr .
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 33 (expr)


State 69

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   31     | expr GT expr .
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 31 (expr)


State 70

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   30     | expr LT expr .
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 30 (expr)


State 71

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   34     | expr AND expr .
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    BITOR     shift, and go to state 55
    XOR       shift, and go to state 56

    $default  reduce using rule 34 (expr)


State 72

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   35     | expr OR expr .
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    AND       shift, and go to state 47
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    BITOR     shift, and go to state 55
    XOR       shift, and go to state 56

    $default  reduce using rule 35 (expr)


State 73

   24 expr: expr . ADD expr
   24     | expr ADD expr .
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 24 (expr)


State 74

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   25     | expr SUBTRACT expr .
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 25 (expr)


State 75

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   27     | expr DIVIDE expr .
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    $default  reduce using rule 27 (expr)


State 76

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   26     | expr MULTIPLY expr .
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    $default  reduce using rule 26 (expr)


State 77

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   36     | expr MODULO expr .
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    $default  reduce using rule 36 (expr)


State 78

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   37     | expr BITAND expr .
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53

    $default  reduce using rule 37 (expr)


State 79

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   38     | expr BITOR expr .
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    XOR       shift, and go to state 56

    $default  reduce using rule 38 (expr)


State 80

   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr
   39     | expr XOR expr .

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54

    $default  reduce using rule 39 (expr)


State 81

    6 func_prefix: data_type ID $@1 OC param_list . CC
    7 param_list: param_list . COMMA param

    CC     shift, and go to state 85
    COMMA  shift, and go to state 86


State 82

    8 param_list: param .

    $default  reduce using rule 8 (param_list)


State 83

   10 param: data_type . ID
   11      | data_type . ID OS CS COLON INT ID

    ID  shift, and go to state 87


State 84

   19 declaration: data_type ID ASSIGN expr . SCOL
   24 expr: expr . ADD expr
   25     | expr . SUBTRACT expr
   26     | expr . MULTIPLY expr
   27     | expr . DIVIDE expr
   28     | expr . LE expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . GT expr
   32     | expr . EQ expr
   33     | expr . NE expr
   34     | expr . AND expr
   35     | expr . OR expr
   36     | expr . MODULO expr
   37     | expr . BITAND expr
   38     | expr . BITOR expr
   39     | expr . XOR expr

    LE        shift, and go to state 41
    GE        shift, and go to state 42
    EQ        shift, and go to state 43
    NE        shift, and go to state 44
    GT        shift, and go to state 45
    LT        shift, and go to state 46
    AND       shift, and go to state 47
    OR        shift, and go to state 48
    ADD       shift, and go to state 49
    SUBTRACT  shift, and go to state 50
    DIVIDE    shift, and go to state 51
    MULTIPLY  shift, and go to state 52
    MODULO    shift, and go to state 53
    BITAND    shift, and go to state 54
    BITOR     shift, and go to state 55
    XOR       shift, and go to state 56
    SCOL      shift, and go to state 88


State 85

    6 func_prefix: data_type ID $@1 OC param_list CC .

    $default  reduce using rule 6 (func_prefix)


State 86

    7 param_list: param_list COMMA . param

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    param      go to state 89
    data_type  go to state 83


State 87

   10 param: data_type ID .
   11      | data_type ID . OS CS COLON INT ID

    OS  shift, and go to state 90

    $default  reduce using rule 10 (param)


State 88

   19 declaration: data_type ID ASSIGN expr SCOL .

    $default  reduce using rule 19 (declaration)


State 89

    7 param_list: param_list COMMA param .

    $default  reduce using rule 7 (param_list)


State 90

   11 param: data_type ID OS . CS COLON INT ID

    CS  shift, and go to state 91


State 91

   11 param: data_type ID OS CS . COLON INT ID

    COLON  shift, and go to state 92


State 92

   11 param: data_type ID OS CS COLON . INT ID

    INT  shift, and go to state 93


State 93

   11 param: data_type ID OS CS COLON INT . ID

    ID  shift, and go to state 94


State 94

   11 param: data_type ID OS CS COLON INT ID .

    $default  reduce using rule 11 (param)
