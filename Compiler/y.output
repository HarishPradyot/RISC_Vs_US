Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 func: func_prefix OF stmt_list CF

    5 $@1: %empty

    6 func_prefix: func_data_type ID $@1 OC param_list CC

    7 func_data_type: data_type
    8               | VOID

    9 $@2: %empty

   10 param_list: param $@2 COMMA param_list
   11           | param
   12           | %empty

   13 param: data_type ID

   14 stmt_list: stmt stmt_list
   15          | %empty

   16 stmt: declaration
   17     | assign SCOL
   18     | expr SCOL
   19     | return_stmt SCOL
   20     | if_stmt
   21     | while_loop_stmt
   22     | for_loop_stmt
   23     | BREAK SCOL
   24     | CONTINUE SCOL
   25     | switch_stmt
   26     | INPUT OC ID CC SCOL
   27     | OUTPUT OC expr CC SCOL
   28     | OUTPUT OC STR CC SCOL

   29 declaration: data_type ID SCOL
   30            | STRING ID ASSIGN STR SCOL
   31            | data_type ID ASSIGN expr SCOL
   32            | data_type ID OS INT_NUM CS SCOL

   33 $@3: %empty

   34 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

   35 $@4: %empty

   36 arr_values: const $@4 COMMA arr_values
   37           | const

   38 return_stmt: RETURN expr

   39 data_type: INT
   40          | FLOAT
   41          | CHAR

   42 expr: expr ADD expr
   43     | expr SUBTRACT expr
   44     | expr MULTIPLY expr
   45     | expr DIVIDE expr
   46     | expr LE expr
   47     | expr GE expr
   48     | expr LT expr
   49     | expr GT expr
   50     | expr EQ expr
   51     | expr NE expr
   52     | expr AND expr
   53     | expr OR expr
   54     | expr MODULO expr
   55     | expr BITAND expr
   56     | expr BITOR expr
   57     | expr XOR expr
   58     | expr LEFTSHIFT expr
   59     | expr RIGHTSHIFT expr
   60     | unary_expr
   61     | primary_expr
   62     | postfix_expr

   63 postfix_expr: func_call
   64             | ID OS expr CS

   65 unary_expr: unary_op primary_expr

   66 primary_expr: ID
   67             | const
   68             | OC expr CC

   69 unary_op: ADD
   70         | SUBTRACT
   71         | NOT
   72         | NEGATION

   73 const: INT_NUM
   74      | FLOAT_NUM
   75      | CHARACTER

   76 assign: ID ASSIGN expr
   77       | ID OS expr CS ASSIGN expr

   78 $@5: %empty

   79 $@6: %empty

   80 $@7: %empty

   81 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

   82 $@8: %empty

   83 $@9: %empty

   84 $@10: %empty

   85 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt
   86          | %empty

   87 else_stmt: ELSE OF stmt_list CF
   88          | %empty

   89 $@11: %empty

   90 $@12: %empty

   91 $@13: %empty

   92 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

   93 case_stmt_list: case_stmt case_stmt_list
   94               | %empty

   95 $@14: %empty

   96 $@15: %empty

   97 case_stmt: CASE $@14 OC const $@15 CC COLON stmt_list

   98 default_stmt: DEFAULT COLON stmt_list
   99             | %empty

  100 $@16: %empty

  101 $@17: %empty

  102 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list CF

  103 $@18: %empty

  104 $@19: %empty

  105 $@20: %empty

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

  107 $@21: %empty

  108 func_call: ID $@21 OC arg_list CC

  109 arg_list: arg COMMA arg_list
  110         | arg
  111         | %empty

  112 arg: expr


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 39
CHAR (259) 41
FLOAT (260) 40
STRING (261) 30
VOID (262) 8
RETURN (263) 38
INT_NUM (264) 32 34 73
FLOAT_NUM (265) 74
ID (266) 6 13 26 29 30 31 32 34 64 66 76 77 92 108
LEFTSHIFT (267) 58
RIGHTSHIFT (268) 59
LE (269) 46
GE (270) 47
EQ (271) 50
NE (272) 51
GT (273) 49
LT (274) 48
AND (275) 52
OR (276) 53
NOT (277) 71
ADD (278) 42 69
SUBTRACT (279) 43 70
DIVIDE (280) 45
MULTIPLY (281) 44
MODULO (282) 54
BITAND (283) 55
BITOR (284) 56
NEGATION (285) 72
XOR (286) 57
STR (287) 28 30
CHARACTER (288) 75
CC (289) 6 26 27 28 68 81 85 92 97 102 106 108
OC (290) 6 26 27 28 68 81 85 92 97 102 106 108
CS (291) 32 34 64 77
OS (292) 32 34 64 77
CF (293) 4 34 81 85 87 92 102 106
OF (294) 4 34 81 85 87 92 102 106
COMMA (295) 10 36 109
COLON (296) 97 98
SCOL (297) 17 18 19 23 24 26 27 28 29 30 31 32 34 106
OUTPUT (298) 27 28
INPUT (299) 26
SWITCH (300) 92
CASE (301) 97
BREAK (302) 23
DEFAULT (303) 98
IF (304) 81
ELIF (305) 85
ELSE (306) 87
WHILE (307) 102
FOR (308) 106
CONTINUE (309) 24
ASSIGN (310) 30 31 34 76 77


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
Program (57)
    on left: 1, on right: 0
func_list (58)
    on left: 2 3, on right: 1 2
func (59)
    on left: 4, on right: 2
func_prefix (60)
    on left: 6, on right: 4
$@1 (61)
    on left: 5, on right: 6
func_data_type (62)
    on left: 7 8, on right: 6
param_list (63)
    on left: 10 11 12, on right: 6 10
$@2 (64)
    on left: 9, on right: 10
param (65)
    on left: 13, on right: 10 11
stmt_list (66)
    on left: 14 15, on right: 4 14 81 85 87 97 98 102 106
stmt (67)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28, on right: 14
declaration (68)
    on left: 29 30 31 32 34, on right: 16
$@3 (69)
    on left: 33, on right: 34
arr_values (70)
    on left: 36 37, on right: 34 36
$@4 (71)
    on left: 35, on right: 36
return_stmt (72)
    on left: 38, on right: 19
data_type (73)
    on left: 39 40 41, on right: 7 13 29 31 32 34
expr (74)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    60 61 62, on right: 18 27 31 38 42 43 44 45 46 47 48 49 50 51 52
    53 54 55 56 57 58 59 64 68 76 77 81 85 102 106 112
postfix_expr (75)
    on left: 63 64, on right: 62
unary_expr (76)
    on left: 65, on right: 60
primary_expr (77)
    on left: 66 67 68, on right: 61 65
unary_op (78)
    on left: 69 70 71 72, on right: 65
const (79)
    on left: 73 74 75, on right: 36 37 67 97
assign (80)
    on left: 76 77, on right: 17 106
if_stmt (81)
    on left: 81, on right: 20
$@5 (82)
    on left: 78, on right: 81
$@6 (83)
    on left: 79, on right: 81
$@7 (84)
    on left: 80, on right: 81
elif_stmt (85)
    on left: 85 86, on right: 81 85
$@8 (86)
    on left: 82, on right: 85
$@9 (87)
    on left: 83, on right: 85
$@10 (88)
    on left: 84, on right: 85
else_stmt (89)
    on left: 87 88, on right: 81
switch_stmt (90)
    on left: 92, on right: 25
$@11 (91)
    on left: 89, on right: 92
$@12 (92)
    on left: 90, on right: 92
$@13 (93)
    on left: 91, on right: 92
case_stmt_list (94)
    on left: 93 94, on right: 92 93
case_stmt (95)
    on left: 97, on right: 93
$@14 (96)
    on left: 95, on right: 97
$@15 (97)
    on left: 96, on right: 97
default_stmt (98)
    on left: 98 99, on right: 92
while_loop_stmt (99)
    on left: 102, on right: 21
$@16 (100)
    on left: 100, on right: 102
$@17 (101)
    on left: 101, on right: 102
for_loop_stmt (102)
    on left: 106, on right: 22
$@18 (103)
    on left: 103, on right: 106
$@19 (104)
    on left: 104, on right: 106
$@20 (105)
    on left: 105, on right: 106
func_call (106)
    on left: 108, on right: 63
$@21 (107)
    on left: 107, on right: 108
arg_list (108)
    on left: 109 110 111, on right: 108 109
arg (109)
    on left: 112, on right: 109 110


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6
    VOID   shift, and go to state 7

    $default  reduce using rule 1 (Program)

    func            go to state 8
    func_prefix     go to state 9
    func_data_type  go to state 10
    data_type       go to state 11


State 3

    0 $accept: Program $end .

    $default  accept


State 4

   39 data_type: INT .

    $default  reduce using rule 39 (data_type)


State 5

   41 data_type: CHAR .

    $default  reduce using rule 41 (data_type)


State 6

   40 data_type: FLOAT .

    $default  reduce using rule 40 (data_type)


State 7

    8 func_data_type: VOID .

    $default  reduce using rule 8 (func_data_type)


State 8

    2 func_list: func_list func .

    $default  reduce using rule 2 (func_list)


State 9

    4 func: func_prefix . OF stmt_list CF

    OF  shift, and go to state 12


State 10

    6 func_prefix: func_data_type . ID $@1 OC param_list CC

    ID  shift, and go to state 13


State 11

    7 func_data_type: data_type .

    $default  reduce using rule 7 (func_data_type)


State 12

    4 func: func_prefix OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 33
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 13

    6 func_prefix: func_data_type ID . $@1 OC param_list CC

    $default  reduce using rule 5 ($@1)

    $@1  go to state 50


State 14

   30 declaration: STRING . ID ASSIGN STR SCOL

    ID  shift, and go to state 51


State 15

   38 return_stmt: RETURN . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 53
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 16

   73 const: INT_NUM .

    $default  reduce using rule 73 (const)


State 17

   74 const: FLOAT_NUM .

    $default  reduce using rule 74 (const)


State 18

   64 postfix_expr: ID . OS expr CS
   66 primary_expr: ID .
   76 assign: ID . ASSIGN expr
   77       | ID . OS expr CS ASSIGN expr
  108 func_call: ID . $@21 OC arg_list CC

    OS      shift, and go to state 54
    ASSIGN  shift, and go to state 55

    OC        reduce using rule 107 ($@21)
    $default  reduce using rule 66 (primary_expr)

    $@21  go to state 56


State 19

   71 unary_op: NOT .

    $default  reduce using rule 71 (unary_op)


State 20

   69 unary_op: ADD .

    $default  reduce using rule 69 (unary_op)


State 21

   70 unary_op: SUBTRACT .

    $default  reduce using rule 70 (unary_op)


State 22

   72 unary_op: NEGATION .

    $default  reduce using rule 72 (unary_op)


State 23

   75 const: CHARACTER .

    $default  reduce using rule 75 (const)


State 24

   68 primary_expr: OC . expr CC

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 57
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 25

   27 stmt: OUTPUT . OC expr CC SCOL
   28     | OUTPUT . OC STR CC SCOL

    OC  shift, and go to state 58


State 26

   26 stmt: INPUT . OC ID CC SCOL

    OC  shift, and go to state 59


State 27

   92 switch_stmt: SWITCH . $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    $default  reduce using rule 89 ($@11)

    $@11  go to state 60


State 28

   23 stmt: BREAK . SCOL

    SCOL  shift, and go to state 61


State 29

   81 if_stmt: IF . $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    $default  reduce using rule 78 ($@5)

    $@5  go to state 62


State 30

  102 while_loop_stmt: WHILE . $@16 OC expr CC $@17 OF stmt_list CF

    $default  reduce using rule 100 ($@16)

    $@16  go to state 63


State 31

  106 for_loop_stmt: FOR . OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    OC  shift, and go to state 64


State 32

   24 stmt: CONTINUE . SCOL

    SCOL  shift, and go to state 65


State 33

    4 func: func_prefix OF stmt_list . CF

    CF  shift, and go to state 66


State 34

   14 stmt_list: stmt . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 67
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 35

   16 stmt: declaration .

    $default  reduce using rule 16 (stmt)


State 36

   19 stmt: return_stmt . SCOL

    SCOL  shift, and go to state 68


State 37

   29 declaration: data_type . ID SCOL
   31            | data_type . ID ASSIGN expr SCOL
   32            | data_type . ID OS INT_NUM CS SCOL
   34            | data_type . ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    ID  shift, and go to state 69


State 38

   18 stmt: expr . SCOL
   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    SCOL        shift, and go to state 88


State 39

   62 expr: postfix_expr .

    $default  reduce using rule 62 (expr)


State 40

   60 expr: unary_expr .

    $default  reduce using rule 60 (expr)


State 41

   61 expr: primary_expr .

    $default  reduce using rule 61 (expr)


State 42

   65 unary_expr: unary_op . primary_expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 89
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    primary_expr  go to state 90
    const         go to state 43


State 43

   67 primary_expr: const .

    $default  reduce using rule 67 (primary_expr)


State 44

   17 stmt: assign . SCOL

    SCOL  shift, and go to state 91


State 45

   20 stmt: if_stmt .

    $default  reduce using rule 20 (stmt)


State 46

   25 stmt: switch_stmt .

    $default  reduce using rule 25 (stmt)


State 47

   21 stmt: while_loop_stmt .

    $default  reduce using rule 21 (stmt)


State 48

   22 stmt: for_loop_stmt .

    $default  reduce using rule 22 (stmt)


State 49

   63 postfix_expr: func_call .

    $default  reduce using rule 63 (postfix_expr)


State 50

    6 func_prefix: func_data_type ID $@1 . OC param_list CC

    OC  shift, and go to state 92


State 51

   30 declaration: STRING ID . ASSIGN STR SCOL

    ASSIGN  shift, and go to state 93


State 52

   64 postfix_expr: ID . OS expr CS
   66 primary_expr: ID .
  108 func_call: ID . $@21 OC arg_list CC

    OS  shift, and go to state 94

    OC        reduce using rule 107 ($@21)
    $default  reduce using rule 66 (primary_expr)

    $@21  go to state 56


State 53

   38 return_stmt: RETURN expr .
   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 38 (return_stmt)


State 54

   64 postfix_expr: ID OS . expr CS
   77 assign: ID OS . expr CS ASSIGN expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 95
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 55

   76 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 96
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 56

  108 func_call: ID $@21 . OC arg_list CC

    OC  shift, and go to state 97


State 57

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   68 primary_expr: OC expr . CC

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 98


State 58

   27 stmt: OUTPUT OC . expr CC SCOL
   28     | OUTPUT OC . STR CC SCOL

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    STR        shift, and go to state 99
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 100
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 59

   26 stmt: INPUT OC . ID CC SCOL

    ID  shift, and go to state 101


State 60

   92 switch_stmt: SWITCH $@11 . OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    OC  shift, and go to state 102


State 61

   23 stmt: BREAK SCOL .

    $default  reduce using rule 23 (stmt)


State 62

   81 if_stmt: IF $@5 . OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    OC  shift, and go to state 103


State 63

  102 while_loop_stmt: WHILE $@16 . OC expr CC $@17 OF stmt_list CF

    OC  shift, and go to state 104


State 64

  106 for_loop_stmt: FOR OC . assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    ID  shift, and go to state 105

    assign  go to state 106


State 65

   24 stmt: CONTINUE SCOL .

    $default  reduce using rule 24 (stmt)


State 66

    4 func: func_prefix OF stmt_list CF .

    $default  reduce using rule 4 (func)


State 67

   14 stmt_list: stmt stmt_list .

    $default  reduce using rule 14 (stmt_list)


State 68

   19 stmt: return_stmt SCOL .

    $default  reduce using rule 19 (stmt)


State 69

   29 declaration: data_type ID . SCOL
   31            | data_type ID . ASSIGN expr SCOL
   32            | data_type ID . OS INT_NUM CS SCOL
   34            | data_type ID . OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    OS      shift, and go to state 107
    SCOL    shift, and go to state 108
    ASSIGN  shift, and go to state 109


State 70

   58 expr: expr LEFTSHIFT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 110
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 71

   59 expr: expr RIGHTSHIFT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 111
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 72

   46 expr: expr LE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 112
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 73

   47 expr: expr GE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 113
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 74

   50 expr: expr EQ . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 114
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 75

   51 expr: expr NE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 115
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 76

   49 expr: expr GT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 116
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 77

   48 expr: expr LT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 117
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 78

   52 expr: expr AND . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 118
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 79

   53 expr: expr OR . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 119
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 80

   42 expr: expr ADD . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 120
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 81

   43 expr: expr SUBTRACT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 121
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 82

   45 expr: expr DIVIDE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 122
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 83

   44 expr: expr MULTIPLY . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 123
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 84

   54 expr: expr MODULO . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 124
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 85

   55 expr: expr BITAND . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 125
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 86

   56 expr: expr BITOR . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 126
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 87

   57 expr: expr XOR . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 127
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 88

   18 stmt: expr SCOL .

    $default  reduce using rule 18 (stmt)


State 89

   66 primary_expr: ID .

    $default  reduce using rule 66 (primary_expr)


State 90

   65 unary_expr: unary_op primary_expr .

    $default  reduce using rule 65 (unary_expr)


State 91

   17 stmt: assign SCOL .

    $default  reduce using rule 17 (stmt)


State 92

    6 func_prefix: func_data_type ID $@1 OC . param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 12 (param_list)

    param_list  go to state 128
    param       go to state 129
    data_type   go to state 130


State 93

   30 declaration: STRING ID ASSIGN . STR SCOL

    STR  shift, and go to state 131


State 94

   64 postfix_expr: ID OS . expr CS

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 132
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 95

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   64 postfix_expr: ID OS expr . CS
   77 assign: ID OS expr . CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CS          shift, and go to state 133


State 96

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   76 assign: ID ASSIGN expr .

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 76 (assign)


State 97

  108 func_call: ID $@21 OC . arg_list CC

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    $default  reduce using rule 111 (arg_list)

    expr          go to state 134
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49
    arg_list      go to state 135
    arg           go to state 136


State 98

   68 primary_expr: OC expr CC .

    $default  reduce using rule 68 (primary_expr)


State 99

   28 stmt: OUTPUT OC STR . CC SCOL

    CC  shift, and go to state 137


State 100

   27 stmt: OUTPUT OC expr . CC SCOL
   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 138


State 101

   26 stmt: INPUT OC ID . CC SCOL

    CC  shift, and go to state 139


State 102

   92 switch_stmt: SWITCH $@11 OC . ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    ID  shift, and go to state 140


State 103

   81 if_stmt: IF $@5 OC . expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 141
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 104

  102 while_loop_stmt: WHILE $@16 OC . expr CC $@17 OF stmt_list CF

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 142
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 105

   76 assign: ID . ASSIGN expr
   77       | ID . OS expr CS ASSIGN expr

    OS      shift, and go to state 143
    ASSIGN  shift, and go to state 55


State 106

  106 for_loop_stmt: FOR OC assign . SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    SCOL  shift, and go to state 144


State 107

   32 declaration: data_type ID OS . INT_NUM CS SCOL
   34            | data_type ID OS . INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 145


State 108

   29 declaration: data_type ID SCOL .

    $default  reduce using rule 29 (declaration)


State 109

   31 declaration: data_type ID ASSIGN . expr SCOL

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 146
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 110

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   58     | expr LEFTSHIFT expr .
   59     | expr . RIGHTSHIFT expr

    ADD       shift, and go to state 80
    SUBTRACT  shift, and go to state 81
    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 58 (expr)


State 111

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   59     | expr RIGHTSHIFT expr .

    ADD       shift, and go to state 80
    SUBTRACT  shift, and go to state 81
    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 59 (expr)


State 112

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   46     | expr LE expr .
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 46 (expr)


State 113

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   47     | expr GE expr .
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 47 (expr)


State 114

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   50     | expr EQ expr .
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 50 (expr)


State 115

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   51     | expr NE expr .
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 51 (expr)


State 116

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   49     | expr GT expr .
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 49 (expr)


State 117

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   48     | expr LT expr .
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 48 (expr)


State 118

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   52     | expr AND expr .
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 52 (expr)


State 119

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   53     | expr OR expr .
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 53 (expr)


State 120

   42 expr: expr . ADD expr
   42     | expr ADD expr .
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 42 (expr)


State 121

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   43     | expr SUBTRACT expr .
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83
    MODULO    shift, and go to state 84

    $default  reduce using rule 43 (expr)


State 122

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   45     | expr DIVIDE expr .
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    $default  reduce using rule 45 (expr)


State 123

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   44     | expr MULTIPLY expr .
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    $default  reduce using rule 44 (expr)


State 124

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   54     | expr MODULO expr .
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    $default  reduce using rule 54 (expr)


State 125

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   55     | expr BITAND expr .
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84

    $default  reduce using rule 55 (expr)


State 126

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   56     | expr BITOR expr .
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    XOR         shift, and go to state 87

    $default  reduce using rule 56 (expr)


State 127

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   57     | expr XOR expr .
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85

    $default  reduce using rule 57 (expr)


State 128

    6 func_prefix: func_data_type ID $@1 OC param_list . CC

    CC  shift, and go to state 147


State 129

   10 param_list: param . $@2 COMMA param_list
   11           | param .

    CC        reduce using rule 11 (param_list)
    $default  reduce using rule 9 ($@2)

    $@2  go to state 148


State 130

   13 param: data_type . ID

    ID  shift, and go to state 149


State 131

   30 declaration: STRING ID ASSIGN STR . SCOL

    SCOL  shift, and go to state 150


State 132

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   64 postfix_expr: ID OS expr . CS

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CS          shift, and go to state 151


State 133

   64 postfix_expr: ID OS expr CS .
   77 assign: ID OS expr CS . ASSIGN expr

    ASSIGN  shift, and go to state 152

    $default  reduce using rule 64 (postfix_expr)


State 134

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
  112 arg: expr .

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 112 (arg)


State 135

  108 func_call: ID $@21 OC arg_list . CC

    CC  shift, and go to state 153


State 136

  109 arg_list: arg . COMMA arg_list
  110         | arg .

    COMMA  shift, and go to state 154

    $default  reduce using rule 110 (arg_list)


State 137

   28 stmt: OUTPUT OC STR CC . SCOL

    SCOL  shift, and go to state 155


State 138

   27 stmt: OUTPUT OC expr CC . SCOL

    SCOL  shift, and go to state 156


State 139

   26 stmt: INPUT OC ID CC . SCOL

    SCOL  shift, and go to state 157


State 140

   92 switch_stmt: SWITCH $@11 OC ID . $@12 CC OF case_stmt_list $@13 default_stmt CF

    $default  reduce using rule 90 ($@12)

    $@12  go to state 158


State 141

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   81 if_stmt: IF $@5 OC expr . CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 159


State 142

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
  102 while_loop_stmt: WHILE $@16 OC expr . CC $@17 OF stmt_list CF

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 160


State 143

   77 assign: ID OS . expr CS ASSIGN expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 161
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 144

  106 for_loop_stmt: FOR OC assign SCOL . $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    $default  reduce using rule 103 ($@18)

    $@18  go to state 162


State 145

   32 declaration: data_type ID OS INT_NUM . CS SCOL
   34            | data_type ID OS INT_NUM . CS ASSIGN $@3 OF arr_values CF SCOL

    CS  shift, and go to state 163


State 146

   31 declaration: data_type ID ASSIGN expr . SCOL
   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    SCOL        shift, and go to state 164


State 147

    6 func_prefix: func_data_type ID $@1 OC param_list CC .

    $default  reduce using rule 6 (func_prefix)


State 148

   10 param_list: param $@2 . COMMA param_list

    COMMA  shift, and go to state 165


State 149

   13 param: data_type ID .

    $default  reduce using rule 13 (param)


State 150

   30 declaration: STRING ID ASSIGN STR SCOL .

    $default  reduce using rule 30 (declaration)


State 151

   64 postfix_expr: ID OS expr CS .

    $default  reduce using rule 64 (postfix_expr)


State 152

   77 assign: ID OS expr CS ASSIGN . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 166
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 153

  108 func_call: ID $@21 OC arg_list CC .

    $default  reduce using rule 108 (func_call)


State 154

  109 arg_list: arg COMMA . arg_list

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    $default  reduce using rule 111 (arg_list)

    expr          go to state 134
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49
    arg_list      go to state 167
    arg           go to state 136


State 155

   28 stmt: OUTPUT OC STR CC SCOL .

    $default  reduce using rule 28 (stmt)


State 156

   27 stmt: OUTPUT OC expr CC SCOL .

    $default  reduce using rule 27 (stmt)


State 157

   26 stmt: INPUT OC ID CC SCOL .

    $default  reduce using rule 26 (stmt)


State 158

   92 switch_stmt: SWITCH $@11 OC ID $@12 . CC OF case_stmt_list $@13 default_stmt CF

    CC  shift, and go to state 168


State 159

   81 if_stmt: IF $@5 OC expr CC . $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    $default  reduce using rule 79 ($@6)

    $@6  go to state 169


State 160

  102 while_loop_stmt: WHILE $@16 OC expr CC . $@17 OF stmt_list CF

    $default  reduce using rule 101 ($@17)

    $@17  go to state 170


State 161

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   77 assign: ID OS expr . CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CS          shift, and go to state 171


State 162

  106 for_loop_stmt: FOR OC assign SCOL $@18 . expr SCOL $@19 assign CC $@20 OF stmt_list CF

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 172
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 163

   32 declaration: data_type ID OS INT_NUM CS . SCOL
   34            | data_type ID OS INT_NUM CS . ASSIGN $@3 OF arr_values CF SCOL

    SCOL    shift, and go to state 173
    ASSIGN  shift, and go to state 174


State 164

   31 declaration: data_type ID ASSIGN expr SCOL .

    $default  reduce using rule 31 (declaration)


State 165

   10 param_list: param $@2 COMMA . param_list

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 12 (param_list)

    param_list  go to state 175
    param       go to state 129
    data_type   go to state 130


State 166

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   77 assign: ID OS expr CS ASSIGN expr .

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87

    $default  reduce using rule 77 (assign)


State 167

  109 arg_list: arg COMMA arg_list .

    $default  reduce using rule 109 (arg_list)


State 168

   92 switch_stmt: SWITCH $@11 OC ID $@12 CC . OF case_stmt_list $@13 default_stmt CF

    OF  shift, and go to state 176


State 169

   81 if_stmt: IF $@5 OC expr CC $@6 . OF stmt_list CF $@7 elif_stmt else_stmt

    OF  shift, and go to state 177


State 170

  102 while_loop_stmt: WHILE $@16 OC expr CC $@17 . OF stmt_list CF

    OF  shift, and go to state 178


State 171

   77 assign: ID OS expr CS . ASSIGN expr

    ASSIGN  shift, and go to state 152


State 172

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
  106 for_loop_stmt: FOR OC assign SCOL $@18 expr . SCOL $@19 assign CC $@20 OF stmt_list CF

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    SCOL        shift, and go to state 179


State 173

   32 declaration: data_type ID OS INT_NUM CS SCOL .

    $default  reduce using rule 32 (declaration)


State 174

   34 declaration: data_type ID OS INT_NUM CS ASSIGN . $@3 OF arr_values CF SCOL

    $default  reduce using rule 33 ($@3)

    $@3  go to state 180


State 175

   10 param_list: param $@2 COMMA param_list .

    $default  reduce using rule 10 (param_list)


State 176

   92 switch_stmt: SWITCH $@11 OC ID $@12 CC OF . case_stmt_list $@13 default_stmt CF

    CASE  shift, and go to state 181

    $default  reduce using rule 94 (case_stmt_list)

    case_stmt_list  go to state 182
    case_stmt       go to state 183


State 177

   81 if_stmt: IF $@5 OC expr CC $@6 OF . stmt_list CF $@7 elif_stmt else_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 184
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 178

  102 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 185
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 179

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL . $@19 assign CC $@20 OF stmt_list CF

    $default  reduce using rule 104 ($@19)

    $@19  go to state 186


State 180

   34 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 . OF arr_values CF SCOL

    OF  shift, and go to state 187


State 181

   97 case_stmt: CASE . $@14 OC const $@15 CC COLON stmt_list

    $default  reduce using rule 95 ($@14)

    $@14  go to state 188


State 182

   92 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list . $@13 default_stmt CF

    $default  reduce using rule 91 ($@13)

    $@13  go to state 189


State 183

   93 case_stmt_list: case_stmt . case_stmt_list

    CASE  shift, and go to state 181

    $default  reduce using rule 94 (case_stmt_list)

    case_stmt_list  go to state 190
    case_stmt       go to state 183


State 184

   81 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list . CF $@7 elif_stmt else_stmt

    CF  shift, and go to state 191


State 185

  102 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list . CF

    CF  shift, and go to state 192


State 186

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 . assign CC $@20 OF stmt_list CF

    ID  shift, and go to state 105

    assign  go to state 193


State 187

   34 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF . arr_values CF SCOL

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    CHARACTER  shift, and go to state 23

    arr_values  go to state 194
    const       go to state 195


State 188

   97 case_stmt: CASE $@14 . OC const $@15 CC COLON stmt_list

    OC  shift, and go to state 196


State 189

   92 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 . default_stmt CF

    DEFAULT  shift, and go to state 197

    $default  reduce using rule 99 (default_stmt)

    default_stmt  go to state 198


State 190

   93 case_stmt_list: case_stmt case_stmt_list .

    $default  reduce using rule 93 (case_stmt_list)


State 191

   81 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF . $@7 elif_stmt else_stmt

    $default  reduce using rule 80 ($@7)

    $@7  go to state 199


State 192

  102 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list CF .

    $default  reduce using rule 102 (while_loop_stmt)


State 193

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign . CC $@20 OF stmt_list CF

    CC  shift, and go to state 200


State 194

   34 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values . CF SCOL

    CF  shift, and go to state 201


State 195

   36 arr_values: const . $@4 COMMA arr_values
   37           | const .

    CF        reduce using rule 37 (arr_values)
    $default  reduce using rule 35 ($@4)

    $@4  go to state 202


State 196

   97 case_stmt: CASE $@14 OC . const $@15 CC COLON stmt_list

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    CHARACTER  shift, and go to state 23

    const  go to state 203


State 197

   98 default_stmt: DEFAULT . COLON stmt_list

    COLON  shift, and go to state 204


State 198

   92 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt . CF

    CF  shift, and go to state 205


State 199

   81 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 . elif_stmt else_stmt

    ELIF  shift, and go to state 206

    $default  reduce using rule 86 (elif_stmt)

    elif_stmt  go to state 207


State 200

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC . $@20 OF stmt_list CF

    $default  reduce using rule 105 ($@20)

    $@20  go to state 208


State 201

   34 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF . SCOL

    SCOL  shift, and go to state 209


State 202

   36 arr_values: const $@4 . COMMA arr_values

    COMMA  shift, and go to state 210


State 203

   97 case_stmt: CASE $@14 OC const . $@15 CC COLON stmt_list

    $default  reduce using rule 96 ($@15)

    $@15  go to state 211


State 204

   98 default_stmt: DEFAULT COLON . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 212
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 205

   92 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF .

    $default  reduce using rule 92 (switch_stmt)


State 206

   85 elif_stmt: ELIF . $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt

    $default  reduce using rule 82 ($@8)

    $@8  go to state 213


State 207

   81 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt . else_stmt

    ELSE  shift, and go to state 214

    $default  reduce using rule 88 (else_stmt)

    else_stmt  go to state 215


State 208

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 . OF stmt_list CF

    OF  shift, and go to state 216


State 209

   34 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL .

    $default  reduce using rule 34 (declaration)


State 210

   36 arr_values: const $@4 COMMA . arr_values

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    CHARACTER  shift, and go to state 23

    arr_values  go to state 217
    const       go to state 195


State 211

   97 case_stmt: CASE $@14 OC const $@15 . CC COLON stmt_list

    CC  shift, and go to state 218


State 212

   98 default_stmt: DEFAULT COLON stmt_list .

    $default  reduce using rule 98 (default_stmt)


State 213

   85 elif_stmt: ELIF $@8 . OC expr CC $@9 OF stmt_list CF $@10 elif_stmt

    OC  shift, and go to state 219


State 214

   87 else_stmt: ELSE . OF stmt_list CF

    OF  shift, and go to state 220


State 215

   81 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt .

    $default  reduce using rule 81 (if_stmt)


State 216

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 221
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 217

   36 arr_values: const $@4 COMMA arr_values .

    $default  reduce using rule 36 (arr_values)


State 218

   97 case_stmt: CASE $@14 OC const $@15 CC . COLON stmt_list

    COLON  shift, and go to state 222


State 219

   85 elif_stmt: ELIF $@8 OC . expr CC $@9 OF stmt_list CF $@10 elif_stmt

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 52
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 223
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 220

   87 else_stmt: ELSE OF . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 224
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 221

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list . CF

    CF  shift, and go to state 225


State 222

   97 case_stmt: CASE $@14 OC const $@15 CC COLON . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 226
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 223

   42 expr: expr . ADD expr
   43     | expr . SUBTRACT expr
   44     | expr . MULTIPLY expr
   45     | expr . DIVIDE expr
   46     | expr . LE expr
   47     | expr . GE expr
   48     | expr . LT expr
   49     | expr . GT expr
   50     | expr . EQ expr
   51     | expr . NE expr
   52     | expr . AND expr
   53     | expr . OR expr
   54     | expr . MODULO expr
   55     | expr . BITAND expr
   56     | expr . BITOR expr
   57     | expr . XOR expr
   58     | expr . LEFTSHIFT expr
   59     | expr . RIGHTSHIFT expr
   85 elif_stmt: ELIF $@8 OC expr . CC $@9 OF stmt_list CF $@10 elif_stmt

    LEFTSHIFT   shift, and go to state 70
    RIGHTSHIFT  shift, and go to state 71
    LE          shift, and go to state 72
    GE          shift, and go to state 73
    EQ          shift, and go to state 74
    NE          shift, and go to state 75
    GT          shift, and go to state 76
    LT          shift, and go to state 77
    AND         shift, and go to state 78
    OR          shift, and go to state 79
    ADD         shift, and go to state 80
    SUBTRACT    shift, and go to state 81
    DIVIDE      shift, and go to state 82
    MULTIPLY    shift, and go to state 83
    MODULO      shift, and go to state 84
    BITAND      shift, and go to state 85
    BITOR       shift, and go to state 86
    XOR         shift, and go to state 87
    CC          shift, and go to state 227


State 224

   87 else_stmt: ELSE OF stmt_list . CF

    CF  shift, and go to state 228


State 225

  106 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF .

    $default  reduce using rule 106 (for_loop_stmt)


State 226

   97 case_stmt: CASE $@14 OC const $@15 CC COLON stmt_list .

    $default  reduce using rule 97 (case_stmt)


State 227

   85 elif_stmt: ELIF $@8 OC expr CC . $@9 OF stmt_list CF $@10 elif_stmt

    $default  reduce using rule 83 ($@9)

    $@9  go to state 229


State 228

   87 else_stmt: ELSE OF stmt_list CF .

    $default  reduce using rule 87 (else_stmt)


State 229

   85 elif_stmt: ELIF $@8 OC expr CC $@9 . OF stmt_list CF $@10 elif_stmt

    OF  shift, and go to state 230


State 230

   85 elif_stmt: ELIF $@8 OC expr CC $@9 OF . stmt_list CF $@10 elif_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 14
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 231
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 231

   85 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list . CF $@10 elif_stmt

    CF  shift, and go to state 232


State 232

   85 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF . $@10 elif_stmt

    $default  reduce using rule 84 ($@10)

    $@10  go to state 233


State 233

   85 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 . elif_stmt

    ELIF  shift, and go to state 206

    $default  reduce using rule 86 (elif_stmt)

    elif_stmt  go to state 234


State 234

   85 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt .

    $default  reduce using rule 85 (elif_stmt)
