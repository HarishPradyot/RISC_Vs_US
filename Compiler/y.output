Terminals unused in grammar

   STRING
   STR


Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 $@1: %empty

    5 func: $@1 func_prefix OF stmt_list CF

    6 $@2: %empty

    7 func_prefix: func_data_type ID $@2 OC param_list CC

    8 func_data_type: data_type
    9               | VOID

   10 param_list: param_list COMMA param
   11           | param
   12           | %empty

   13 param: data_type ID
   14      | data_type ID OS CS COLON INT ID

   15 stmt_list: stmt stmt_list
   16          | %empty

   17 stmt: declaration
   18     | assign SCOL
   19     | expr SCOL
   20     | return_stmt SCOL
   21     | if_stmt
   22     | while_loop_stmt
   23     | for_loop_stmt
   24     | BREAK SCOL
   25     | CONTINUE SCOL
   26     | switch_stmt
   27     | INPUT OC ID CC SCOL
   28     | OUTPUT OC expr CC SCOL

   29 declaration: data_type ID SCOL
   30            | data_type ID ASSIGN expr SCOL
   31            | data_type ID OS INT_NUM CS SCOL

   32 $@3: %empty

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

   34 $@4: %empty

   35 arr_values: const $@4 COMMA arr_values
   36           | const

   37 return_stmt: RETURN expr

   38 data_type: INT
   39          | FLOAT
   40          | CHAR

   41 expr: expr ADD expr
   42     | expr SUBTRACT expr
   43     | expr MULTIPLY expr
   44     | expr DIVIDE expr
   45     | expr LE expr
   46     | expr GE expr
   47     | expr LT expr
   48     | expr GT expr
   49     | expr EQ expr
   50     | expr NE expr
   51     | expr AND expr
   52     | expr OR expr
   53     | expr MODULO expr
   54     | expr BITAND expr
   55     | expr BITOR expr
   56     | expr XOR expr
   57     | expr LEFTSHIFT expr
   58     | expr RIGHTSHIFT expr
   59     | unary_expr
   60     | primary_expr
   61     | postfix_expr

   62 postfix_expr: func_call
   63             | ID OS expr CS

   64 unary_expr: unary_op primary_expr

   65 primary_expr: ID
   66             | const
   67             | OC expr CC

   68 unary_op: ADD
   69         | SUBTRACT
   70         | NOT
   71         | NEGATION

   72 const: INT_NUM
   73      | FLOAT_NUM
   74      | CHARACTER

   75 assign: ID ASSIGN expr
   76       | ID OS expr CS ASSIGN expr

   77 $@5: %empty

   78 $@6: %empty

   79 $@7: %empty

   80 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

   81 $@8: %empty

   82 $@9: %empty

   83 $@10: %empty

   84 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt
   85          | %empty

   86 else_stmt: ELSE OF stmt_list CF
   87          | %empty

   88 $@11: %empty

   89 $@12: %empty

   90 $@13: %empty

   91 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

   92 case_stmt_list: case_stmt case_stmt_list
   93               | %empty

   94 $@14: %empty

   95 $@15: %empty

   96 case_stmt: CASE $@14 OC const $@15 CC COLON stmt_list

   97 default_stmt: DEFAULT COLON stmt_list
   98             | %empty

   99 $@16: %empty

  100 $@17: %empty

  101 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list CF

  102 $@18: %empty

  103 $@19: %empty

  104 $@20: %empty

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

  106 func_call: ID OC arg_list CC

  107 arg_list: arg COMMA arg_list
  108         | arg
  109         | %empty

  110 arg: expr


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 14 38
CHAR (259) 40
FLOAT (260) 39
STRING (261)
VOID (262) 9
RETURN (263) 37
INT_NUM (264) 31 33 72
FLOAT_NUM (265) 73
ID (266) 7 13 14 27 29 30 31 33 63 65 75 76 91 106
LEFTSHIFT (267) 57
RIGHTSHIFT (268) 58
LE (269) 45
GE (270) 46
EQ (271) 49
NE (272) 50
GT (273) 48
LT (274) 47
AND (275) 51
OR (276) 52
NOT (277) 70
ADD (278) 41 68
SUBTRACT (279) 42 69
DIVIDE (280) 44
MULTIPLY (281) 43
MODULO (282) 53
BITAND (283) 54
BITOR (284) 55
NEGATION (285) 71
XOR (286) 56
STR (287)
CHARACTER (288) 74
CC (289) 7 27 28 67 80 84 91 96 101 105 106
OC (290) 7 27 28 67 80 84 91 96 101 105 106
CS (291) 14 31 33 63 76
OS (292) 14 31 33 63 76
CF (293) 5 33 80 84 86 91 101 105
OF (294) 5 33 80 84 86 91 101 105
COMMA (295) 10 35 107
COLON (296) 14 96 97
SCOL (297) 18 19 20 24 25 27 28 29 30 31 33 105
OUTPUT (298) 28
INPUT (299) 27
SWITCH (300) 91
CASE (301) 96
BREAK (302) 24
DEFAULT (303) 97
IF (304) 80
ELIF (305) 84
ELSE (306) 86
WHILE (307) 101
FOR (308) 105
CONTINUE (309) 25
ASSIGN (310) 30 33 75 76


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
Program (57)
    on left: 1, on right: 0
func_list (58)
    on left: 2 3, on right: 1 2
func (59)
    on left: 5, on right: 2
$@1 (60)
    on left: 4, on right: 5
func_prefix (61)
    on left: 7, on right: 5
$@2 (62)
    on left: 6, on right: 7
func_data_type (63)
    on left: 8 9, on right: 7
param_list (64)
    on left: 10 11 12, on right: 7 10
param (65)
    on left: 13 14, on right: 10 11
stmt_list (66)
    on left: 15 16, on right: 5 15 80 84 86 96 97 101 105
stmt (67)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28, on right: 15
declaration (68)
    on left: 29 30 31 33, on right: 17
$@3 (69)
    on left: 32, on right: 33
arr_values (70)
    on left: 35 36, on right: 33 35
$@4 (71)
    on left: 34, on right: 35
return_stmt (72)
    on left: 37, on right: 20
data_type (73)
    on left: 38 39 40, on right: 8 13 14 29 30 31 33
expr (74)
    on left: 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
    59 60 61, on right: 19 28 30 37 41 42 43 44 45 46 47 48 49 50 51
    52 53 54 55 56 57 58 63 67 75 76 80 84 101 105 110
postfix_expr (75)
    on left: 62 63, on right: 61
unary_expr (76)
    on left: 64, on right: 59
primary_expr (77)
    on left: 65 66 67, on right: 60 64
unary_op (78)
    on left: 68 69 70 71, on right: 64
const (79)
    on left: 72 73 74, on right: 35 36 66 96
assign (80)
    on left: 75 76, on right: 18 105
if_stmt (81)
    on left: 80, on right: 21
$@5 (82)
    on left: 77, on right: 80
$@6 (83)
    on left: 78, on right: 80
$@7 (84)
    on left: 79, on right: 80
elif_stmt (85)
    on left: 84 85, on right: 80 84
$@8 (86)
    on left: 81, on right: 84
$@9 (87)
    on left: 82, on right: 84
$@10 (88)
    on left: 83, on right: 84
else_stmt (89)
    on left: 86 87, on right: 80
switch_stmt (90)
    on left: 91, on right: 26
$@11 (91)
    on left: 88, on right: 91
$@12 (92)
    on left: 89, on right: 91
$@13 (93)
    on left: 90, on right: 91
case_stmt_list (94)
    on left: 92 93, on right: 91 92
case_stmt (95)
    on left: 96, on right: 92
$@14 (96)
    on left: 94, on right: 96
$@15 (97)
    on left: 95, on right: 96
default_stmt (98)
    on left: 97 98, on right: 91
while_loop_stmt (99)
    on left: 101, on right: 22
$@16 (100)
    on left: 99, on right: 101
$@17 (101)
    on left: 100, on right: 101
for_loop_stmt (102)
    on left: 105, on right: 23
$@18 (103)
    on left: 102, on right: 105
$@19 (104)
    on left: 103, on right: 105
$@20 (105)
    on left: 104, on right: 105
func_call (106)
    on left: 106, on right: 62
arg_list (107)
    on left: 107 108 109, on right: 106 107
arg (108)
    on left: 110, on right: 107 108


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    $end      reduce using rule 1 (Program)
    $default  reduce using rule 4 ($@1)

    func  go to state 4
    $@1   go to state 5


State 3

    0 $accept: Program $end .

    $default  accept


State 4

    2 func_list: func_list func .

    $default  reduce using rule 2 (func_list)


State 5

    5 func: $@1 . func_prefix OF stmt_list CF

    INT    shift, and go to state 6
    CHAR   shift, and go to state 7
    FLOAT  shift, and go to state 8
    VOID   shift, and go to state 9

    func_prefix     go to state 10
    func_data_type  go to state 11
    data_type       go to state 12


State 6

   38 data_type: INT .

    $default  reduce using rule 38 (data_type)


State 7

   40 data_type: CHAR .

    $default  reduce using rule 40 (data_type)


State 8

   39 data_type: FLOAT .

    $default  reduce using rule 39 (data_type)


State 9

    9 func_data_type: VOID .

    $default  reduce using rule 9 (func_data_type)


State 10

    5 func: $@1 func_prefix . OF stmt_list CF

    OF  shift, and go to state 13


State 11

    7 func_prefix: func_data_type . ID $@2 OC param_list CC

    ID  shift, and go to state 14


State 12

    8 func_data_type: data_type .

    $default  reduce using rule 8 (func_data_type)


State 13

    5 func: $@1 func_prefix OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 33
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 14

    7 func_prefix: func_data_type ID . $@2 OC param_list CC

    $default  reduce using rule 6 ($@2)

    $@2  go to state 50


State 15

   37 return_stmt: RETURN . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 52
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 16

   72 const: INT_NUM .

    $default  reduce using rule 72 (const)


State 17

   73 const: FLOAT_NUM .

    $default  reduce using rule 73 (const)


State 18

   63 postfix_expr: ID . OS expr CS
   65 primary_expr: ID .
   75 assign: ID . ASSIGN expr
   76       | ID . OS expr CS ASSIGN expr
  106 func_call: ID . OC arg_list CC

    OC      shift, and go to state 53
    OS      shift, and go to state 54
    ASSIGN  shift, and go to state 55

    $default  reduce using rule 65 (primary_expr)


State 19

   70 unary_op: NOT .

    $default  reduce using rule 70 (unary_op)


State 20

   68 unary_op: ADD .

    $default  reduce using rule 68 (unary_op)


State 21

   69 unary_op: SUBTRACT .

    $default  reduce using rule 69 (unary_op)


State 22

   71 unary_op: NEGATION .

    $default  reduce using rule 71 (unary_op)


State 23

   74 const: CHARACTER .

    $default  reduce using rule 74 (const)


State 24

   67 primary_expr: OC . expr CC

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 56
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 25

   28 stmt: OUTPUT . OC expr CC SCOL

    OC  shift, and go to state 57


State 26

   27 stmt: INPUT . OC ID CC SCOL

    OC  shift, and go to state 58


State 27

   91 switch_stmt: SWITCH . $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    $default  reduce using rule 88 ($@11)

    $@11  go to state 59


State 28

   24 stmt: BREAK . SCOL

    SCOL  shift, and go to state 60


State 29

   80 if_stmt: IF . $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    $default  reduce using rule 77 ($@5)

    $@5  go to state 61


State 30

  101 while_loop_stmt: WHILE . $@16 OC expr CC $@17 OF stmt_list CF

    $default  reduce using rule 99 ($@16)

    $@16  go to state 62


State 31

  105 for_loop_stmt: FOR . OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    OC  shift, and go to state 63


State 32

   25 stmt: CONTINUE . SCOL

    SCOL  shift, and go to state 64


State 33

    5 func: $@1 func_prefix OF stmt_list . CF

    CF  shift, and go to state 65


State 34

   15 stmt_list: stmt . stmt_list

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 66
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 35

   17 stmt: declaration .

    $default  reduce using rule 17 (stmt)


State 36

   20 stmt: return_stmt . SCOL

    SCOL  shift, and go to state 67


State 37

   29 declaration: data_type . ID SCOL
   30            | data_type . ID ASSIGN expr SCOL
   31            | data_type . ID OS INT_NUM CS SCOL
   33            | data_type . ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    ID  shift, and go to state 68


State 38

   19 stmt: expr . SCOL
   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    SCOL        shift, and go to state 87


State 39

   61 expr: postfix_expr .

    $default  reduce using rule 61 (expr)


State 40

   59 expr: unary_expr .

    $default  reduce using rule 59 (expr)


State 41

   60 expr: primary_expr .

    $default  reduce using rule 60 (expr)


State 42

   64 unary_expr: unary_op . primary_expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 88
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    primary_expr  go to state 89
    const         go to state 43


State 43

   66 primary_expr: const .

    $default  reduce using rule 66 (primary_expr)


State 44

   18 stmt: assign . SCOL

    SCOL  shift, and go to state 90


State 45

   21 stmt: if_stmt .

    $default  reduce using rule 21 (stmt)


State 46

   26 stmt: switch_stmt .

    $default  reduce using rule 26 (stmt)


State 47

   22 stmt: while_loop_stmt .

    $default  reduce using rule 22 (stmt)


State 48

   23 stmt: for_loop_stmt .

    $default  reduce using rule 23 (stmt)


State 49

   62 postfix_expr: func_call .

    $default  reduce using rule 62 (postfix_expr)


State 50

    7 func_prefix: func_data_type ID $@2 . OC param_list CC

    OC  shift, and go to state 91


State 51

   63 postfix_expr: ID . OS expr CS
   65 primary_expr: ID .
  106 func_call: ID . OC arg_list CC

    OC  shift, and go to state 53
    OS  shift, and go to state 92

    $default  reduce using rule 65 (primary_expr)


State 52

   37 return_stmt: RETURN expr .
   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86

    $default  reduce using rule 37 (return_stmt)


State 53

  106 func_call: ID OC . arg_list CC

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    $default  reduce using rule 109 (arg_list)

    expr          go to state 93
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49
    arg_list      go to state 94
    arg           go to state 95


State 54

   63 postfix_expr: ID OS . expr CS
   76 assign: ID OS . expr CS ASSIGN expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 96
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 55

   75 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 97
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 56

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   67 primary_expr: OC expr . CC

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CC          shift, and go to state 98


State 57

   28 stmt: OUTPUT OC . expr CC SCOL

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 99
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 58

   27 stmt: INPUT OC . ID CC SCOL

    ID  shift, and go to state 100


State 59

   91 switch_stmt: SWITCH $@11 . OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    OC  shift, and go to state 101


State 60

   24 stmt: BREAK SCOL .

    $default  reduce using rule 24 (stmt)


State 61

   80 if_stmt: IF $@5 . OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    OC  shift, and go to state 102


State 62

  101 while_loop_stmt: WHILE $@16 . OC expr CC $@17 OF stmt_list CF

    OC  shift, and go to state 103


State 63

  105 for_loop_stmt: FOR OC . assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    ID  shift, and go to state 104

    assign  go to state 105


State 64

   25 stmt: CONTINUE SCOL .

    $default  reduce using rule 25 (stmt)


State 65

    5 func: $@1 func_prefix OF stmt_list CF .

    $default  reduce using rule 5 (func)


State 66

   15 stmt_list: stmt stmt_list .

    $default  reduce using rule 15 (stmt_list)


State 67

   20 stmt: return_stmt SCOL .

    $default  reduce using rule 20 (stmt)


State 68

   29 declaration: data_type ID . SCOL
   30            | data_type ID . ASSIGN expr SCOL
   31            | data_type ID . OS INT_NUM CS SCOL
   33            | data_type ID . OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    OS      shift, and go to state 106
    SCOL    shift, and go to state 107
    ASSIGN  shift, and go to state 108


State 69

   57 expr: expr LEFTSHIFT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 109
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 70

   58 expr: expr RIGHTSHIFT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 110
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 71

   45 expr: expr LE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 111
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 72

   46 expr: expr GE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 112
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 73

   49 expr: expr EQ . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 113
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 74

   50 expr: expr NE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 114
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 75

   48 expr: expr GT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 115
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 76

   47 expr: expr LT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 116
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 77

   51 expr: expr AND . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 117
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 78

   52 expr: expr OR . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 118
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 79

   41 expr: expr ADD . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 119
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 80

   42 expr: expr SUBTRACT . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 120
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 81

   44 expr: expr DIVIDE . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 121
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 82

   43 expr: expr MULTIPLY . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 122
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 83

   53 expr: expr MODULO . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 123
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 84

   54 expr: expr BITAND . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 124
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 85

   55 expr: expr BITOR . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 125
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 86

   56 expr: expr XOR . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 126
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 87

   19 stmt: expr SCOL .

    $default  reduce using rule 19 (stmt)


State 88

   65 primary_expr: ID .

    $default  reduce using rule 65 (primary_expr)


State 89

   64 unary_expr: unary_op primary_expr .

    $default  reduce using rule 64 (unary_expr)


State 90

   18 stmt: assign SCOL .

    $default  reduce using rule 18 (stmt)


State 91

    7 func_prefix: func_data_type ID $@2 OC . param_list CC

    INT    shift, and go to state 6
    CHAR   shift, and go to state 7
    FLOAT  shift, and go to state 8

    $default  reduce using rule 12 (param_list)

    param_list  go to state 127
    param       go to state 128
    data_type   go to state 129


State 92

   63 postfix_expr: ID OS . expr CS

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 130
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 93

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
  110 arg: expr .

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86

    $default  reduce using rule 110 (arg)


State 94

  106 func_call: ID OC arg_list . CC

    CC  shift, and go to state 131


State 95

  107 arg_list: arg . COMMA arg_list
  108         | arg .

    COMMA  shift, and go to state 132

    $default  reduce using rule 108 (arg_list)


State 96

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   63 postfix_expr: ID OS expr . CS
   76 assign: ID OS expr . CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CS          shift, and go to state 133


State 97

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   75 assign: ID ASSIGN expr .

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86

    $default  reduce using rule 75 (assign)


State 98

   67 primary_expr: OC expr CC .

    $default  reduce using rule 67 (primary_expr)


State 99

   28 stmt: OUTPUT OC expr . CC SCOL
   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CC          shift, and go to state 134


State 100

   27 stmt: INPUT OC ID . CC SCOL

    CC  shift, and go to state 135


State 101

   91 switch_stmt: SWITCH $@11 OC . ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    ID  shift, and go to state 136


State 102

   80 if_stmt: IF $@5 OC . expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 137
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 103

  101 while_loop_stmt: WHILE $@16 OC . expr CC $@17 OF stmt_list CF

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 138
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 104

   75 assign: ID . ASSIGN expr
   76       | ID . OS expr CS ASSIGN expr

    OS      shift, and go to state 139
    ASSIGN  shift, and go to state 55


State 105

  105 for_loop_stmt: FOR OC assign . SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    SCOL  shift, and go to state 140


State 106

   31 declaration: data_type ID OS . INT_NUM CS SCOL
   33            | data_type ID OS . INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 141


State 107

   29 declaration: data_type ID SCOL .

    $default  reduce using rule 29 (declaration)


State 108

   30 declaration: data_type ID ASSIGN . expr SCOL

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 142
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 109

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   57     | expr LEFTSHIFT expr .
   58     | expr . RIGHTSHIFT expr

    ADD       shift, and go to state 79
    SUBTRACT  shift, and go to state 80
    DIVIDE    shift, and go to state 81
    MULTIPLY  shift, and go to state 82
    MODULO    shift, and go to state 83

    $default  reduce using rule 57 (expr)


State 110

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   58     | expr RIGHTSHIFT expr .

    ADD       shift, and go to state 79
    SUBTRACT  shift, and go to state 80
    DIVIDE    shift, and go to state 81
    MULTIPLY  shift, and go to state 82
    MODULO    shift, and go to state 83

    $default  reduce using rule 58 (expr)


State 111

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   45     | expr LE expr .
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83

    $default  reduce using rule 45 (expr)


State 112

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   46     | expr GE expr .
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83

    $default  reduce using rule 46 (expr)


State 113

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   49     | expr EQ expr .
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83

    $default  reduce using rule 49 (expr)


State 114

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   50     | expr NE expr .
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83

    $default  reduce using rule 50 (expr)


State 115

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   48     | expr GT expr .
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83

    $default  reduce using rule 48 (expr)


State 116

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   47     | expr LT expr .
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83

    $default  reduce using rule 47 (expr)


State 117

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   51     | expr AND expr .
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86

    $default  reduce using rule 51 (expr)


State 118

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   52     | expr OR expr .
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86

    $default  reduce using rule 52 (expr)


State 119

   41 expr: expr . ADD expr
   41     | expr ADD expr .
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    DIVIDE    shift, and go to state 81
    MULTIPLY  shift, and go to state 82
    MODULO    shift, and go to state 83

    $default  reduce using rule 41 (expr)


State 120

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   42     | expr SUBTRACT expr .
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    DIVIDE    shift, and go to state 81
    MULTIPLY  shift, and go to state 82
    MODULO    shift, and go to state 83

    $default  reduce using rule 42 (expr)


State 121

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   44     | expr DIVIDE expr .
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    $default  reduce using rule 44 (expr)


State 122

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   43     | expr MULTIPLY expr .
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    $default  reduce using rule 43 (expr)


State 123

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   53     | expr MODULO expr .
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    $default  reduce using rule 53 (expr)


State 124

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   54     | expr BITAND expr .
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83

    $default  reduce using rule 54 (expr)


State 125

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   55     | expr BITOR expr .
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    XOR         shift, and go to state 86

    $default  reduce using rule 55 (expr)


State 126

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   56     | expr XOR expr .
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84

    $default  reduce using rule 56 (expr)


State 127

    7 func_prefix: func_data_type ID $@2 OC param_list . CC
   10 param_list: param_list . COMMA param

    CC     shift, and go to state 143
    COMMA  shift, and go to state 144


State 128

   11 param_list: param .

    $default  reduce using rule 11 (param_list)


State 129

   13 param: data_type . ID
   14      | data_type . ID OS CS COLON INT ID

    ID  shift, and go to state 145


State 130

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   63 postfix_expr: ID OS expr . CS

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CS          shift, and go to state 146


State 131

  106 func_call: ID OC arg_list CC .

    $default  reduce using rule 106 (func_call)


State 132

  107 arg_list: arg COMMA . arg_list

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    $default  reduce using rule 109 (arg_list)

    expr          go to state 93
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49
    arg_list      go to state 147
    arg           go to state 95


State 133

   63 postfix_expr: ID OS expr CS .
   76 assign: ID OS expr CS . ASSIGN expr

    ASSIGN  shift, and go to state 148

    $default  reduce using rule 63 (postfix_expr)


State 134

   28 stmt: OUTPUT OC expr CC . SCOL

    SCOL  shift, and go to state 149


State 135

   27 stmt: INPUT OC ID CC . SCOL

    SCOL  shift, and go to state 150


State 136

   91 switch_stmt: SWITCH $@11 OC ID . $@12 CC OF case_stmt_list $@13 default_stmt CF

    $default  reduce using rule 89 ($@12)

    $@12  go to state 151


State 137

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   80 if_stmt: IF $@5 OC expr . CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CC          shift, and go to state 152


State 138

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
  101 while_loop_stmt: WHILE $@16 OC expr . CC $@17 OF stmt_list CF

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CC          shift, and go to state 153


State 139

   76 assign: ID OS . expr CS ASSIGN expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 154
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 140

  105 for_loop_stmt: FOR OC assign SCOL . $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    $default  reduce using rule 102 ($@18)

    $@18  go to state 155


State 141

   31 declaration: data_type ID OS INT_NUM . CS SCOL
   33            | data_type ID OS INT_NUM . CS ASSIGN $@3 OF arr_values CF SCOL

    CS  shift, and go to state 156


State 142

   30 declaration: data_type ID ASSIGN expr . SCOL
   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    SCOL        shift, and go to state 157


State 143

    7 func_prefix: func_data_type ID $@2 OC param_list CC .

    $default  reduce using rule 7 (func_prefix)


State 144

   10 param_list: param_list COMMA . param

    INT    shift, and go to state 6
    CHAR   shift, and go to state 7
    FLOAT  shift, and go to state 8

    param      go to state 158
    data_type  go to state 129


State 145

   13 param: data_type ID .
   14      | data_type ID . OS CS COLON INT ID

    OS  shift, and go to state 159

    $default  reduce using rule 13 (param)


State 146

   63 postfix_expr: ID OS expr CS .

    $default  reduce using rule 63 (postfix_expr)


State 147

  107 arg_list: arg COMMA arg_list .

    $default  reduce using rule 107 (arg_list)


State 148

   76 assign: ID OS expr CS ASSIGN . expr

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 160
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 149

   28 stmt: OUTPUT OC expr CC SCOL .

    $default  reduce using rule 28 (stmt)


State 150

   27 stmt: INPUT OC ID CC SCOL .

    $default  reduce using rule 27 (stmt)


State 151

   91 switch_stmt: SWITCH $@11 OC ID $@12 . CC OF case_stmt_list $@13 default_stmt CF

    CC  shift, and go to state 161


State 152

   80 if_stmt: IF $@5 OC expr CC . $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    $default  reduce using rule 78 ($@6)

    $@6  go to state 162


State 153

  101 while_loop_stmt: WHILE $@16 OC expr CC . $@17 OF stmt_list CF

    $default  reduce using rule 100 ($@17)

    $@17  go to state 163


State 154

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   76 assign: ID OS expr . CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CS          shift, and go to state 164


State 155

  105 for_loop_stmt: FOR OC assign SCOL $@18 . expr SCOL $@19 assign CC $@20 OF stmt_list CF

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 165
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 156

   31 declaration: data_type ID OS INT_NUM CS . SCOL
   33            | data_type ID OS INT_NUM CS . ASSIGN $@3 OF arr_values CF SCOL

    SCOL    shift, and go to state 166
    ASSIGN  shift, and go to state 167


State 157

   30 declaration: data_type ID ASSIGN expr SCOL .

    $default  reduce using rule 30 (declaration)


State 158

   10 param_list: param_list COMMA param .

    $default  reduce using rule 10 (param_list)


State 159

   14 param: data_type ID OS . CS COLON INT ID

    CS  shift, and go to state 168


State 160

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   76 assign: ID OS expr CS ASSIGN expr .

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86

    $default  reduce using rule 76 (assign)


State 161

   91 switch_stmt: SWITCH $@11 OC ID $@12 CC . OF case_stmt_list $@13 default_stmt CF

    OF  shift, and go to state 169


State 162

   80 if_stmt: IF $@5 OC expr CC $@6 . OF stmt_list CF $@7 elif_stmt else_stmt

    OF  shift, and go to state 170


State 163

  101 while_loop_stmt: WHILE $@16 OC expr CC $@17 . OF stmt_list CF

    OF  shift, and go to state 171


State 164

   76 assign: ID OS expr CS . ASSIGN expr

    ASSIGN  shift, and go to state 148


State 165

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
  105 for_loop_stmt: FOR OC assign SCOL $@18 expr . SCOL $@19 assign CC $@20 OF stmt_list CF

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    SCOL        shift, and go to state 172


State 166

   31 declaration: data_type ID OS INT_NUM CS SCOL .

    $default  reduce using rule 31 (declaration)


State 167

   33 declaration: data_type ID OS INT_NUM CS ASSIGN . $@3 OF arr_values CF SCOL

    $default  reduce using rule 32 ($@3)

    $@3  go to state 173


State 168

   14 param: data_type ID OS CS . COLON INT ID

    COLON  shift, and go to state 174


State 169

   91 switch_stmt: SWITCH $@11 OC ID $@12 CC OF . case_stmt_list $@13 default_stmt CF

    CASE  shift, and go to state 175

    $default  reduce using rule 93 (case_stmt_list)

    case_stmt_list  go to state 176
    case_stmt       go to state 177


State 170

   80 if_stmt: IF $@5 OC expr CC $@6 OF . stmt_list CF $@7 elif_stmt else_stmt

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 178
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 171

  101 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 179
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 172

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL . $@19 assign CC $@20 OF stmt_list CF

    $default  reduce using rule 103 ($@19)

    $@19  go to state 180


State 173

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 . OF arr_values CF SCOL

    OF  shift, and go to state 181


State 174

   14 param: data_type ID OS CS COLON . INT ID

    INT  shift, and go to state 182


State 175

   96 case_stmt: CASE . $@14 OC const $@15 CC COLON stmt_list

    $default  reduce using rule 94 ($@14)

    $@14  go to state 183


State 176

   91 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list . $@13 default_stmt CF

    $default  reduce using rule 90 ($@13)

    $@13  go to state 184


State 177

   92 case_stmt_list: case_stmt . case_stmt_list

    CASE  shift, and go to state 175

    $default  reduce using rule 93 (case_stmt_list)

    case_stmt_list  go to state 185
    case_stmt       go to state 177


State 178

   80 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list . CF $@7 elif_stmt else_stmt

    CF  shift, and go to state 186


State 179

  101 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list . CF

    CF  shift, and go to state 187


State 180

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 . assign CC $@20 OF stmt_list CF

    ID  shift, and go to state 104

    assign  go to state 188


State 181

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF . arr_values CF SCOL

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    CHARACTER  shift, and go to state 23

    arr_values  go to state 189
    const       go to state 190


State 182

   14 param: data_type ID OS CS COLON INT . ID

    ID  shift, and go to state 191


State 183

   96 case_stmt: CASE $@14 . OC const $@15 CC COLON stmt_list

    OC  shift, and go to state 192


State 184

   91 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 . default_stmt CF

    DEFAULT  shift, and go to state 193

    $default  reduce using rule 98 (default_stmt)

    default_stmt  go to state 194


State 185

   92 case_stmt_list: case_stmt case_stmt_list .

    $default  reduce using rule 92 (case_stmt_list)


State 186

   80 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF . $@7 elif_stmt else_stmt

    $default  reduce using rule 79 ($@7)

    $@7  go to state 195


State 187

  101 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list CF .

    $default  reduce using rule 101 (while_loop_stmt)


State 188

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign . CC $@20 OF stmt_list CF

    CC  shift, and go to state 196


State 189

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values . CF SCOL

    CF  shift, and go to state 197


State 190

   35 arr_values: const . $@4 COMMA arr_values
   36           | const .

    CF        reduce using rule 36 (arr_values)
    $default  reduce using rule 34 ($@4)

    $@4  go to state 198


State 191

   14 param: data_type ID OS CS COLON INT ID .

    $default  reduce using rule 14 (param)


State 192

   96 case_stmt: CASE $@14 OC . const $@15 CC COLON stmt_list

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    CHARACTER  shift, and go to state 23

    const  go to state 199


State 193

   97 default_stmt: DEFAULT . COLON stmt_list

    COLON  shift, and go to state 200


State 194

   91 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt . CF

    CF  shift, and go to state 201


State 195

   80 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 . elif_stmt else_stmt

    ELIF  shift, and go to state 202

    $default  reduce using rule 85 (elif_stmt)

    elif_stmt  go to state 203


State 196

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC . $@20 OF stmt_list CF

    $default  reduce using rule 104 ($@20)

    $@20  go to state 204


State 197

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF . SCOL

    SCOL  shift, and go to state 205


State 198

   35 arr_values: const $@4 . COMMA arr_values

    COMMA  shift, and go to state 206


State 199

   96 case_stmt: CASE $@14 OC const . $@15 CC COLON stmt_list

    $default  reduce using rule 95 ($@15)

    $@15  go to state 207


State 200

   97 default_stmt: DEFAULT COLON . stmt_list

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 208
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 201

   91 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF .

    $default  reduce using rule 91 (switch_stmt)


State 202

   84 elif_stmt: ELIF . $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt

    $default  reduce using rule 81 ($@8)

    $@8  go to state 209


State 203

   80 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt . else_stmt

    ELSE  shift, and go to state 210

    $default  reduce using rule 87 (else_stmt)

    else_stmt  go to state 211


State 204

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 . OF stmt_list CF

    OF  shift, and go to state 212


State 205

   33 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL .

    $default  reduce using rule 33 (declaration)


State 206

   35 arr_values: const $@4 COMMA . arr_values

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    CHARACTER  shift, and go to state 23

    arr_values  go to state 213
    const       go to state 190


State 207

   96 case_stmt: CASE $@14 OC const $@15 . CC COLON stmt_list

    CC  shift, and go to state 214


State 208

   97 default_stmt: DEFAULT COLON stmt_list .

    $default  reduce using rule 97 (default_stmt)


State 209

   84 elif_stmt: ELIF $@8 . OC expr CC $@9 OF stmt_list CF $@10 elif_stmt

    OC  shift, and go to state 215


State 210

   86 else_stmt: ELSE . OF stmt_list CF

    OF  shift, and go to state 216


State 211

   80 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt .

    $default  reduce using rule 80 (if_stmt)


State 212

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 217
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 213

   35 arr_values: const $@4 COMMA arr_values .

    $default  reduce using rule 35 (arr_values)


State 214

   96 case_stmt: CASE $@14 OC const $@15 CC . COLON stmt_list

    COLON  shift, and go to state 218


State 215

   84 elif_stmt: ELIF $@8 OC . expr CC $@9 OF stmt_list CF $@10 elif_stmt

    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 51
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24

    expr          go to state 219
    postfix_expr  go to state 39
    unary_expr    go to state 40
    primary_expr  go to state 41
    unary_op      go to state 42
    const         go to state 43
    func_call     go to state 49


State 216

   86 else_stmt: ELSE OF . stmt_list CF

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 220
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 217

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list . CF

    CF  shift, and go to state 221


State 218

   96 case_stmt: CASE $@14 OC const $@15 CC COLON . stmt_list

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 222
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 219

   41 expr: expr . ADD expr
   42     | expr . SUBTRACT expr
   43     | expr . MULTIPLY expr
   44     | expr . DIVIDE expr
   45     | expr . LE expr
   46     | expr . GE expr
   47     | expr . LT expr
   48     | expr . GT expr
   49     | expr . EQ expr
   50     | expr . NE expr
   51     | expr . AND expr
   52     | expr . OR expr
   53     | expr . MODULO expr
   54     | expr . BITAND expr
   55     | expr . BITOR expr
   56     | expr . XOR expr
   57     | expr . LEFTSHIFT expr
   58     | expr . RIGHTSHIFT expr
   84 elif_stmt: ELIF $@8 OC expr . CC $@9 OF stmt_list CF $@10 elif_stmt

    LEFTSHIFT   shift, and go to state 69
    RIGHTSHIFT  shift, and go to state 70
    LE          shift, and go to state 71
    GE          shift, and go to state 72
    EQ          shift, and go to state 73
    NE          shift, and go to state 74
    GT          shift, and go to state 75
    LT          shift, and go to state 76
    AND         shift, and go to state 77
    OR          shift, and go to state 78
    ADD         shift, and go to state 79
    SUBTRACT    shift, and go to state 80
    DIVIDE      shift, and go to state 81
    MULTIPLY    shift, and go to state 82
    MODULO      shift, and go to state 83
    BITAND      shift, and go to state 84
    BITOR       shift, and go to state 85
    XOR         shift, and go to state 86
    CC          shift, and go to state 223


State 220

   86 else_stmt: ELSE OF stmt_list . CF

    CF  shift, and go to state 224


State 221

  105 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF .

    $default  reduce using rule 105 (for_loop_stmt)


State 222

   96 case_stmt: CASE $@14 OC const $@15 CC COLON stmt_list .

    $default  reduce using rule 96 (case_stmt)


State 223

   84 elif_stmt: ELIF $@8 OC expr CC . $@9 OF stmt_list CF $@10 elif_stmt

    $default  reduce using rule 82 ($@9)

    $@9  go to state 225


State 224

   86 else_stmt: ELSE OF stmt_list CF .

    $default  reduce using rule 86 (else_stmt)


State 225

   84 elif_stmt: ELIF $@8 OC expr CC $@9 . OF stmt_list CF $@10 elif_stmt

    OF  shift, and go to state 226


State 226

   84 elif_stmt: ELIF $@8 OC expr CC $@9 OF . stmt_list CF $@10 elif_stmt

    INT        shift, and go to state 6
    CHAR       shift, and go to state 7
    FLOAT      shift, and go to state 8
    RETURN     shift, and go to state 15
    INT_NUM    shift, and go to state 16
    FLOAT_NUM  shift, and go to state 17
    ID         shift, and go to state 18
    NOT        shift, and go to state 19
    ADD        shift, and go to state 20
    SUBTRACT   shift, and go to state 21
    NEGATION   shift, and go to state 22
    CHARACTER  shift, and go to state 23
    OC         shift, and go to state 24
    OUTPUT     shift, and go to state 25
    INPUT      shift, and go to state 26
    SWITCH     shift, and go to state 27
    BREAK      shift, and go to state 28
    IF         shift, and go to state 29
    WHILE      shift, and go to state 30
    FOR        shift, and go to state 31
    CONTINUE   shift, and go to state 32

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 227
    stmt             go to state 34
    declaration      go to state 35
    return_stmt      go to state 36
    data_type        go to state 37
    expr             go to state 38
    postfix_expr     go to state 39
    unary_expr       go to state 40
    primary_expr     go to state 41
    unary_op         go to state 42
    const            go to state 43
    assign           go to state 44
    if_stmt          go to state 45
    switch_stmt      go to state 46
    while_loop_stmt  go to state 47
    for_loop_stmt    go to state 48
    func_call        go to state 49


State 227

   84 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list . CF $@10 elif_stmt

    CF  shift, and go to state 228


State 228

   84 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF . $@10 elif_stmt

    $default  reduce using rule 83 ($@10)

    $@10  go to state 229


State 229

   84 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 . elif_stmt

    ELIF  shift, and go to state 202

    $default  reduce using rule 85 (elif_stmt)

    elif_stmt  go to state 230


State 230

   84 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt .

    $default  reduce using rule 84 (elif_stmt)
