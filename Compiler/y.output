Terminals unused in grammar

    STRING
    STR


Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | ε

    4 func: func_prefix OF stmt_list CF

    5 $@1: ε

    6 func_prefix: func_data_type ID $@1 OC param_list CC

    7 func_data_type: data_type
    8               | VOID

    9 $@2: ε

   10 param_list: param $@2 COMMA param_list
   11           | param
   12           | ε

   13 param: data_type ID

   14 stmt_list: stmt stmt_list
   15          | ε

   16 stmt: declaration
   17     | assign SCOL
   18     | expr SCOL
   19     | return_stmt SCOL
   20     | if_stmt
   21     | while_loop_stmt
   22     | for_loop_stmt
   23     | BREAK SCOL
   24     | CONTINUE SCOL
   25     | switch_stmt
   26     | INPUT OC ID CC SCOL
   27     | OUTPUT OC expr CC SCOL

   28 declaration: data_type ID SCOL
   29            | data_type ID ASSIGN expr SCOL
   30            | data_type ID OS INT_NUM CS SCOL

   31 $@3: ε

   32 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

   33 $@4: ε

   34 arr_values: const $@4 COMMA arr_values
   35           | const

   36 return_stmt: RETURN expr

   37 data_type: INT
   38          | FLOAT
   39          | CHAR

   40 expr: expr ADD expr
   41     | expr SUBTRACT expr
   42     | expr MULTIPLY expr
   43     | expr DIVIDE expr
   44     | expr LE expr
   45     | expr GE expr
   46     | expr LT expr
   47     | expr GT expr
   48     | expr EQ expr
   49     | expr NE expr
   50     | expr AND expr
   51     | expr OR expr
   52     | expr MODULO expr
   53     | expr BITAND expr
   54     | expr BITOR expr
   55     | expr XOR expr
   56     | expr LEFTSHIFT expr
   57     | expr RIGHTSHIFT expr
   58     | unary_expr
   59     | primary_expr
   60     | postfix_expr

   61 postfix_expr: func_call
   62             | ID OS expr CS

   63 unary_expr: unary_op primary_expr

   64 primary_expr: ID
   65             | const
   66             | OC expr CC

   67 unary_op: ADD
   68         | SUBTRACT
   69         | NOT
   70         | NEGATION

   71 const: INT_NUM
   72      | FLOAT_NUM
   73      | CHARACTER

   74 assign: ID ASSIGN expr
   75       | ID OS expr CS ASSIGN expr

   76 $@5: ε

   77 $@6: ε

   78 $@7: ε

   79 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

   80 $@8: ε

   81 $@9: ε

   82 $@10: ε

   83 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt
   84          | ε

   85 else_stmt: ELSE OF stmt_list CF
   86          | ε

   87 $@11: ε

   88 $@12: ε

   89 $@13: ε

   90 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

   91 case_stmt_list: case_stmt case_stmt_list
   92               | ε

   93 $@14: ε

   94 $@15: ε

   95 case_stmt: CASE $@14 OC const $@15 CC COLON stmt_list

   96 default_stmt: DEFAULT COLON stmt_list
   97             | ε

   98 $@16: ε

   99 $@17: ε

  100 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list CF

  101 $@18: ε

  102 $@19: ε

  103 $@20: ε

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

  105 $@21: ε

  106 func_call: ID $@21 OC arg_list CC

  107 arg_list: arg COMMA arg_list
  108         | arg
  109         | ε

  110 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT <node> (258) 37
    CHAR <node> (259) 39
    FLOAT <node> (260) 38
    STRING <node> (261)
    VOID <node> (262) 8
    RETURN <node> (263) 36
    INT_NUM <node> (264) 30 32 71
    FLOAT_NUM <node> (265) 72
    ID <node> (266) 6 13 26 28 29 30 32 62 64 74 75 90 106
    LEFTSHIFT <node> (267) 56
    RIGHTSHIFT <node> (268) 57
    LE <node> (269) 44
    GE <node> (270) 45
    EQ <node> (271) 48
    NE <node> (272) 49
    GT <node> (273) 47
    LT <node> (274) 46
    AND <node> (275) 50
    OR <node> (276) 51
    NOT <node> (277) 69
    ADD <node> (278) 40 67
    SUBTRACT <node> (279) 41 68
    DIVIDE <node> (280) 43
    MULTIPLY <node> (281) 42
    MODULO <node> (282) 52
    BITAND <node> (283) 53
    BITOR <node> (284) 54
    NEGATION <node> (285) 70
    XOR <node> (286) 55
    STR <node> (287)
    CHARACTER <node> (288) 73
    CC <node> (289) 6 26 27 66 79 83 90 95 100 104 106
    OC <node> (290) 6 26 27 66 79 83 90 95 100 104 106
    CS <node> (291) 30 32 62 75
    OS <node> (292) 30 32 62 75
    CF <node> (293) 4 32 79 83 85 90 100 104
    OF <node> (294) 4 32 79 83 85 90 100 104
    COMMA <node> (295) 10 34 107
    COLON <node> (296) 95 96
    SCOL <node> (297) 17 18 19 23 24 26 27 28 29 30 32 104
    OUTPUT <node> (298) 27
    INPUT <node> (299) 26
    SWITCH <node> (300) 90
    CASE <node> (301) 95
    BREAK <node> (302) 23
    DEFAULT <node> (303) 96
    IF <node> (304) 79
    ELIF <node> (305) 83
    ELSE <node> (306) 85
    WHILE <node> (307) 100
    FOR <node> (308) 104
    CONTINUE <node> (309) 24
    ASSIGN (310) 29 32 74 75


Nonterminals, with rules where they appear

    $accept (56)
        on left: 0
    Program <node> (57)
        on left: 1
        on right: 0
    func_list <node> (58)
        on left: 2 3
        on right: 1 2
    func <node> (59)
        on left: 4
        on right: 2
    func_prefix <node> (60)
        on left: 6
        on right: 4
    $@1 (61)
        on left: 5
        on right: 6
    func_data_type <node> (62)
        on left: 7 8
        on right: 6
    param_list <node> (63)
        on left: 10 11 12
        on right: 6 10
    $@2 (64)
        on left: 9
        on right: 10
    param <node> (65)
        on left: 13
        on right: 10 11
    stmt_list <node> (66)
        on left: 14 15
        on right: 4 14 79 83 85 95 96 100 104
    stmt <node> (67)
        on left: 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 14
    declaration <node> (68)
        on left: 28 29 30 32
        on right: 16
    $@3 (69)
        on left: 31
        on right: 32
    arr_values (70)
        on left: 34 35
        on right: 32 34
    $@4 (71)
        on left: 33
        on right: 34
    return_stmt <node> (72)
        on left: 36
        on right: 19
    data_type <node> (73)
        on left: 37 38 39
        on right: 7 13 28 29 30 32
    expr <node> (74)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
        on right: 18 27 29 36 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 62 66 74 75 79 83 100 104 110
    postfix_expr <node> (75)
        on left: 61 62
        on right: 60
    unary_expr <node> (76)
        on left: 63
        on right: 58
    primary_expr <node> (77)
        on left: 64 65 66
        on right: 59 63
    unary_op <node> (78)
        on left: 67 68 69 70
        on right: 63
    const <node> (79)
        on left: 71 72 73
        on right: 34 35 65 95
    assign <node> (80)
        on left: 74 75
        on right: 17 104
    if_stmt <node> (81)
        on left: 79
        on right: 20
    $@5 (82)
        on left: 76
        on right: 79
    $@6 (83)
        on left: 77
        on right: 79
    $@7 (84)
        on left: 78
        on right: 79
    elif_stmt <node> (85)
        on left: 83 84
        on right: 79 83
    $@8 (86)
        on left: 80
        on right: 83
    $@9 (87)
        on left: 81
        on right: 83
    $@10 (88)
        on left: 82
        on right: 83
    else_stmt <node> (89)
        on left: 85 86
        on right: 79
    switch_stmt <node> (90)
        on left: 90
        on right: 25
    $@11 (91)
        on left: 87
        on right: 90
    $@12 (92)
        on left: 88
        on right: 90
    $@13 (93)
        on left: 89
        on right: 90
    case_stmt_list <node> (94)
        on left: 91 92
        on right: 90 91
    case_stmt <node> (95)
        on left: 95
        on right: 91
    $@14 (96)
        on left: 93
        on right: 95
    $@15 (97)
        on left: 94
        on right: 95
    default_stmt (98)
        on left: 96 97
        on right: 90
    while_loop_stmt <node> (99)
        on left: 100
        on right: 21
    $@16 (100)
        on left: 98
        on right: 100
    $@17 (101)
        on left: 99
        on right: 100
    for_loop_stmt <node> (102)
        on left: 104
        on right: 22
    $@18 (103)
        on left: 101
        on right: 104
    $@19 (104)
        on left: 102
        on right: 104
    $@20 (105)
        on left: 103
        on right: 104
    func_call <node> (106)
        on left: 106
        on right: 61
    $@21 (107)
        on left: 105
        on right: 106
    arg_list <node> (108)
        on left: 107 108 109
        on right: 106 107
    arg <node> (109)
        on left: 110
        on right: 107 108


State 0

    0 $accept: • Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program • $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list •
    2 func_list: func_list • func

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6
    VOID   shift, and go to state 7

    $default  reduce using rule 1 (Program)

    func            go to state 8
    func_prefix     go to state 9
    func_data_type  go to state 10
    data_type       go to state 11


State 3

    0 $accept: Program $end •

    $default  accept


State 4

   37 data_type: INT •

    $default  reduce using rule 37 (data_type)


State 5

   39 data_type: CHAR •

    $default  reduce using rule 39 (data_type)


State 6

   38 data_type: FLOAT •

    $default  reduce using rule 38 (data_type)


State 7

    8 func_data_type: VOID •

    $default  reduce using rule 8 (func_data_type)


State 8

    2 func_list: func_list func •

    $default  reduce using rule 2 (func_list)


State 9

    4 func: func_prefix • OF stmt_list CF

    OF  shift, and go to state 12


State 10

    6 func_prefix: func_data_type • ID $@1 OC param_list CC

    ID  shift, and go to state 13


State 11

    7 func_data_type: data_type •

    $default  reduce using rule 7 (func_data_type)


State 12

    4 func: func_prefix OF • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 32
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 13

    6 func_prefix: func_data_type ID • $@1 OC param_list CC

    $default  reduce using rule 5 ($@1)

    $@1  go to state 49


State 14

   36 return_stmt: RETURN • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 51
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 15

   71 const: INT_NUM •

    $default  reduce using rule 71 (const)


State 16

   72 const: FLOAT_NUM •

    $default  reduce using rule 72 (const)


State 17

   62 postfix_expr: ID • OS expr CS
   64 primary_expr: ID •
   74 assign: ID • ASSIGN expr
   75       | ID • OS expr CS ASSIGN expr
  106 func_call: ID • $@21 OC arg_list CC

    OS      shift, and go to state 52
    ASSIGN  shift, and go to state 53

    OC        reduce using rule 105 ($@21)
    $default  reduce using rule 64 (primary_expr)

    $@21  go to state 54


State 18

   69 unary_op: NOT •

    $default  reduce using rule 69 (unary_op)


State 19

   67 unary_op: ADD •

    $default  reduce using rule 67 (unary_op)


State 20

   68 unary_op: SUBTRACT •

    $default  reduce using rule 68 (unary_op)


State 21

   70 unary_op: NEGATION •

    $default  reduce using rule 70 (unary_op)


State 22

   73 const: CHARACTER •

    $default  reduce using rule 73 (const)


State 23

   66 primary_expr: OC • expr CC

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 55
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 24

   27 stmt: OUTPUT • OC expr CC SCOL

    OC  shift, and go to state 56


State 25

   26 stmt: INPUT • OC ID CC SCOL

    OC  shift, and go to state 57


State 26

   90 switch_stmt: SWITCH • $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    $default  reduce using rule 87 ($@11)

    $@11  go to state 58


State 27

   23 stmt: BREAK • SCOL

    SCOL  shift, and go to state 59


State 28

   79 if_stmt: IF • $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    $default  reduce using rule 76 ($@5)

    $@5  go to state 60


State 29

  100 while_loop_stmt: WHILE • $@16 OC expr CC $@17 OF stmt_list CF

    $default  reduce using rule 98 ($@16)

    $@16  go to state 61


State 30

  104 for_loop_stmt: FOR • OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    OC  shift, and go to state 62


State 31

   24 stmt: CONTINUE • SCOL

    SCOL  shift, and go to state 63


State 32

    4 func: func_prefix OF stmt_list • CF

    CF  shift, and go to state 64


State 33

   14 stmt_list: stmt • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 65
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 34

   16 stmt: declaration •

    $default  reduce using rule 16 (stmt)


State 35

   19 stmt: return_stmt • SCOL

    SCOL  shift, and go to state 66


State 36

   28 declaration: data_type • ID SCOL
   29            | data_type • ID ASSIGN expr SCOL
   30            | data_type • ID OS INT_NUM CS SCOL
   32            | data_type • ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    ID  shift, and go to state 67


State 37

   18 stmt: expr • SCOL
   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    SCOL        shift, and go to state 86


State 38

   60 expr: postfix_expr •

    $default  reduce using rule 60 (expr)


State 39

   58 expr: unary_expr •

    $default  reduce using rule 58 (expr)


State 40

   59 expr: primary_expr •

    $default  reduce using rule 59 (expr)


State 41

   63 unary_expr: unary_op • primary_expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 87
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    primary_expr  go to state 88
    const         go to state 42


State 42

   65 primary_expr: const •

    $default  reduce using rule 65 (primary_expr)


State 43

   17 stmt: assign • SCOL

    SCOL  shift, and go to state 89


State 44

   20 stmt: if_stmt •

    $default  reduce using rule 20 (stmt)


State 45

   25 stmt: switch_stmt •

    $default  reduce using rule 25 (stmt)


State 46

   21 stmt: while_loop_stmt •

    $default  reduce using rule 21 (stmt)


State 47

   22 stmt: for_loop_stmt •

    $default  reduce using rule 22 (stmt)


State 48

   61 postfix_expr: func_call •

    $default  reduce using rule 61 (postfix_expr)


State 49

    6 func_prefix: func_data_type ID $@1 • OC param_list CC

    OC  shift, and go to state 90


State 50

   62 postfix_expr: ID • OS expr CS
   64 primary_expr: ID •
  106 func_call: ID • $@21 OC arg_list CC

    OS  shift, and go to state 91

    OC        reduce using rule 105 ($@21)
    $default  reduce using rule 64 (primary_expr)

    $@21  go to state 54


State 51

   36 return_stmt: RETURN expr •
   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85

    $default  reduce using rule 36 (return_stmt)


State 52

   62 postfix_expr: ID OS • expr CS
   75 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 92
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 53

   74 assign: ID ASSIGN • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 93
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 54

  106 func_call: ID $@21 • OC arg_list CC

    OC  shift, and go to state 94


State 55

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   66 primary_expr: OC expr • CC

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CC          shift, and go to state 95


State 56

   27 stmt: OUTPUT OC • expr CC SCOL

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 96
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 57

   26 stmt: INPUT OC • ID CC SCOL

    ID  shift, and go to state 97


State 58

   90 switch_stmt: SWITCH $@11 • OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    OC  shift, and go to state 98


State 59

   23 stmt: BREAK SCOL •

    $default  reduce using rule 23 (stmt)


State 60

   79 if_stmt: IF $@5 • OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    OC  shift, and go to state 99


State 61

  100 while_loop_stmt: WHILE $@16 • OC expr CC $@17 OF stmt_list CF

    OC  shift, and go to state 100


State 62

  104 for_loop_stmt: FOR OC • assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    ID  shift, and go to state 101

    assign  go to state 102


State 63

   24 stmt: CONTINUE SCOL •

    $default  reduce using rule 24 (stmt)


State 64

    4 func: func_prefix OF stmt_list CF •

    $default  reduce using rule 4 (func)


State 65

   14 stmt_list: stmt stmt_list •

    $default  reduce using rule 14 (stmt_list)


State 66

   19 stmt: return_stmt SCOL •

    $default  reduce using rule 19 (stmt)


State 67

   28 declaration: data_type ID • SCOL
   29            | data_type ID • ASSIGN expr SCOL
   30            | data_type ID • OS INT_NUM CS SCOL
   32            | data_type ID • OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    OS      shift, and go to state 103
    SCOL    shift, and go to state 104
    ASSIGN  shift, and go to state 105


State 68

   56 expr: expr LEFTSHIFT • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 106
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 69

   57 expr: expr RIGHTSHIFT • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 107
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 70

   44 expr: expr LE • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 108
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 71

   45 expr: expr GE • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 109
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 72

   48 expr: expr EQ • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 110
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 73

   49 expr: expr NE • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 111
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 74

   47 expr: expr GT • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 112
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 75

   46 expr: expr LT • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 113
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 76

   50 expr: expr AND • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 114
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 77

   51 expr: expr OR • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 115
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 78

   40 expr: expr ADD • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 116
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 79

   41 expr: expr SUBTRACT • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 117
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 80

   43 expr: expr DIVIDE • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 118
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 81

   42 expr: expr MULTIPLY • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 119
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 82

   52 expr: expr MODULO • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 120
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 83

   53 expr: expr BITAND • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 121
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 84

   54 expr: expr BITOR • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 122
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 85

   55 expr: expr XOR • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 123
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 86

   18 stmt: expr SCOL •

    $default  reduce using rule 18 (stmt)


State 87

   64 primary_expr: ID •

    $default  reduce using rule 64 (primary_expr)


State 88

   63 unary_expr: unary_op primary_expr •

    $default  reduce using rule 63 (unary_expr)


State 89

   17 stmt: assign SCOL •

    $default  reduce using rule 17 (stmt)


State 90

    6 func_prefix: func_data_type ID $@1 OC • param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 12 (param_list)

    param_list  go to state 124
    param       go to state 125
    data_type   go to state 126


State 91

   62 postfix_expr: ID OS • expr CS

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 127
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 92

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   62 postfix_expr: ID OS expr • CS
   75 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CS          shift, and go to state 128


State 93

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   74 assign: ID ASSIGN expr •

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85

    $default  reduce using rule 74 (assign)


State 94

  106 func_call: ID $@21 OC • arg_list CC

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    $default  reduce using rule 109 (arg_list)

    expr          go to state 129
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48
    arg_list      go to state 130
    arg           go to state 131


State 95

   66 primary_expr: OC expr CC •

    $default  reduce using rule 66 (primary_expr)


State 96

   27 stmt: OUTPUT OC expr • CC SCOL
   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CC          shift, and go to state 132


State 97

   26 stmt: INPUT OC ID • CC SCOL

    CC  shift, and go to state 133


State 98

   90 switch_stmt: SWITCH $@11 OC • ID $@12 CC OF case_stmt_list $@13 default_stmt CF

    ID  shift, and go to state 134


State 99

   79 if_stmt: IF $@5 OC • expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 135
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 100

  100 while_loop_stmt: WHILE $@16 OC • expr CC $@17 OF stmt_list CF

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 136
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 101

   74 assign: ID • ASSIGN expr
   75       | ID • OS expr CS ASSIGN expr

    OS      shift, and go to state 137
    ASSIGN  shift, and go to state 53


State 102

  104 for_loop_stmt: FOR OC assign • SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    SCOL  shift, and go to state 138


State 103

   30 declaration: data_type ID OS • INT_NUM CS SCOL
   32            | data_type ID OS • INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 139


State 104

   28 declaration: data_type ID SCOL •

    $default  reduce using rule 28 (declaration)


State 105

   29 declaration: data_type ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 140
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 106

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   56     | expr LEFTSHIFT expr •
   57     | expr • RIGHTSHIFT expr

    ADD       shift, and go to state 78
    SUBTRACT  shift, and go to state 79
    DIVIDE    shift, and go to state 80
    MULTIPLY  shift, and go to state 81
    MODULO    shift, and go to state 82

    $default  reduce using rule 56 (expr)


State 107

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   57     | expr RIGHTSHIFT expr •

    ADD       shift, and go to state 78
    SUBTRACT  shift, and go to state 79
    DIVIDE    shift, and go to state 80
    MULTIPLY  shift, and go to state 81
    MODULO    shift, and go to state 82

    $default  reduce using rule 57 (expr)


State 108

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   44     | expr LE expr •
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82

    $default  reduce using rule 44 (expr)


State 109

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   45     | expr GE expr •
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82

    $default  reduce using rule 45 (expr)


State 110

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   48     | expr EQ expr •
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82

    $default  reduce using rule 48 (expr)


State 111

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   49     | expr NE expr •
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82

    $default  reduce using rule 49 (expr)


State 112

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   47     | expr GT expr •
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82

    $default  reduce using rule 47 (expr)


State 113

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   46     | expr LT expr •
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82

    $default  reduce using rule 46 (expr)


State 114

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   50     | expr AND expr •
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85

    $default  reduce using rule 50 (expr)


State 115

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   51     | expr OR expr •
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85

    $default  reduce using rule 51 (expr)


State 116

   40 expr: expr • ADD expr
   40     | expr ADD expr •
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    DIVIDE    shift, and go to state 80
    MULTIPLY  shift, and go to state 81
    MODULO    shift, and go to state 82

    $default  reduce using rule 40 (expr)


State 117

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   41     | expr SUBTRACT expr •
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    DIVIDE    shift, and go to state 80
    MULTIPLY  shift, and go to state 81
    MODULO    shift, and go to state 82

    $default  reduce using rule 41 (expr)


State 118

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   43     | expr DIVIDE expr •
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    $default  reduce using rule 43 (expr)


State 119

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   42     | expr MULTIPLY expr •
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    $default  reduce using rule 42 (expr)


State 120

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   52     | expr MODULO expr •
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    $default  reduce using rule 52 (expr)


State 121

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   53     | expr BITAND expr •
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82

    $default  reduce using rule 53 (expr)


State 122

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   54     | expr BITOR expr •
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    XOR         shift, and go to state 85

    $default  reduce using rule 54 (expr)


State 123

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   55     | expr XOR expr •
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83

    $default  reduce using rule 55 (expr)


State 124

    6 func_prefix: func_data_type ID $@1 OC param_list • CC

    CC  shift, and go to state 141


State 125

   10 param_list: param • $@2 COMMA param_list
   11           | param •

    CC        reduce using rule 11 (param_list)
    $default  reduce using rule 9 ($@2)

    $@2  go to state 142


State 126

   13 param: data_type • ID

    ID  shift, and go to state 143


State 127

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   62 postfix_expr: ID OS expr • CS

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CS          shift, and go to state 144


State 128

   62 postfix_expr: ID OS expr CS •
   75 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 145

    $default  reduce using rule 62 (postfix_expr)


State 129

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
  110 arg: expr •

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85

    $default  reduce using rule 110 (arg)


State 130

  106 func_call: ID $@21 OC arg_list • CC

    CC  shift, and go to state 146


State 131

  107 arg_list: arg • COMMA arg_list
  108         | arg •

    COMMA  shift, and go to state 147

    $default  reduce using rule 108 (arg_list)


State 132

   27 stmt: OUTPUT OC expr CC • SCOL

    SCOL  shift, and go to state 148


State 133

   26 stmt: INPUT OC ID CC • SCOL

    SCOL  shift, and go to state 149


State 134

   90 switch_stmt: SWITCH $@11 OC ID • $@12 CC OF case_stmt_list $@13 default_stmt CF

    $default  reduce using rule 88 ($@12)

    $@12  go to state 150


State 135

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   79 if_stmt: IF $@5 OC expr • CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CC          shift, and go to state 151


State 136

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
  100 while_loop_stmt: WHILE $@16 OC expr • CC $@17 OF stmt_list CF

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CC          shift, and go to state 152


State 137

   75 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 153
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 138

  104 for_loop_stmt: FOR OC assign SCOL • $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF

    $default  reduce using rule 101 ($@18)

    $@18  go to state 154


State 139

   30 declaration: data_type ID OS INT_NUM • CS SCOL
   32            | data_type ID OS INT_NUM • CS ASSIGN $@3 OF arr_values CF SCOL

    CS  shift, and go to state 155


State 140

   29 declaration: data_type ID ASSIGN expr • SCOL
   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    SCOL        shift, and go to state 156


State 141

    6 func_prefix: func_data_type ID $@1 OC param_list CC •

    $default  reduce using rule 6 (func_prefix)


State 142

   10 param_list: param $@2 • COMMA param_list

    COMMA  shift, and go to state 157


State 143

   13 param: data_type ID •

    $default  reduce using rule 13 (param)


State 144

   62 postfix_expr: ID OS expr CS •

    $default  reduce using rule 62 (postfix_expr)


State 145

   75 assign: ID OS expr CS ASSIGN • expr

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 158
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 146

  106 func_call: ID $@21 OC arg_list CC •

    $default  reduce using rule 106 (func_call)


State 147

  107 arg_list: arg COMMA • arg_list

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    $default  reduce using rule 109 (arg_list)

    expr          go to state 129
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48
    arg_list      go to state 159
    arg           go to state 131


State 148

   27 stmt: OUTPUT OC expr CC SCOL •

    $default  reduce using rule 27 (stmt)


State 149

   26 stmt: INPUT OC ID CC SCOL •

    $default  reduce using rule 26 (stmt)


State 150

   90 switch_stmt: SWITCH $@11 OC ID $@12 • CC OF case_stmt_list $@13 default_stmt CF

    CC  shift, and go to state 160


State 151

   79 if_stmt: IF $@5 OC expr CC • $@6 OF stmt_list CF $@7 elif_stmt else_stmt

    $default  reduce using rule 77 ($@6)

    $@6  go to state 161


State 152

  100 while_loop_stmt: WHILE $@16 OC expr CC • $@17 OF stmt_list CF

    $default  reduce using rule 99 ($@17)

    $@17  go to state 162


State 153

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   75 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CS          shift, and go to state 163


State 154

  104 for_loop_stmt: FOR OC assign SCOL $@18 • expr SCOL $@19 assign CC $@20 OF stmt_list CF

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 164
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 155

   30 declaration: data_type ID OS INT_NUM CS • SCOL
   32            | data_type ID OS INT_NUM CS • ASSIGN $@3 OF arr_values CF SCOL

    SCOL    shift, and go to state 165
    ASSIGN  shift, and go to state 166


State 156

   29 declaration: data_type ID ASSIGN expr SCOL •

    $default  reduce using rule 29 (declaration)


State 157

   10 param_list: param $@2 COMMA • param_list

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 12 (param_list)

    param_list  go to state 167
    param       go to state 125
    data_type   go to state 126


State 158

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   75 assign: ID OS expr CS ASSIGN expr •

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85

    $default  reduce using rule 75 (assign)


State 159

  107 arg_list: arg COMMA arg_list •

    $default  reduce using rule 107 (arg_list)


State 160

   90 switch_stmt: SWITCH $@11 OC ID $@12 CC • OF case_stmt_list $@13 default_stmt CF

    OF  shift, and go to state 168


State 161

   79 if_stmt: IF $@5 OC expr CC $@6 • OF stmt_list CF $@7 elif_stmt else_stmt

    OF  shift, and go to state 169


State 162

  100 while_loop_stmt: WHILE $@16 OC expr CC $@17 • OF stmt_list CF

    OF  shift, and go to state 170


State 163

   75 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 145


State 164

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
  104 for_loop_stmt: FOR OC assign SCOL $@18 expr • SCOL $@19 assign CC $@20 OF stmt_list CF

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    SCOL        shift, and go to state 171


State 165

   30 declaration: data_type ID OS INT_NUM CS SCOL •

    $default  reduce using rule 30 (declaration)


State 166

   32 declaration: data_type ID OS INT_NUM CS ASSIGN • $@3 OF arr_values CF SCOL

    $default  reduce using rule 31 ($@3)

    $@3  go to state 172


State 167

   10 param_list: param $@2 COMMA param_list •

    $default  reduce using rule 10 (param_list)


State 168

   90 switch_stmt: SWITCH $@11 OC ID $@12 CC OF • case_stmt_list $@13 default_stmt CF

    CASE  shift, and go to state 173

    $default  reduce using rule 92 (case_stmt_list)

    case_stmt_list  go to state 174
    case_stmt       go to state 175


State 169

   79 if_stmt: IF $@5 OC expr CC $@6 OF • stmt_list CF $@7 elif_stmt else_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 176
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 170

  100 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 177
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 171

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL • $@19 assign CC $@20 OF stmt_list CF

    $default  reduce using rule 102 ($@19)

    $@19  go to state 178


State 172

   32 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 • OF arr_values CF SCOL

    OF  shift, and go to state 179


State 173

   95 case_stmt: CASE • $@14 OC const $@15 CC COLON stmt_list

    $default  reduce using rule 93 ($@14)

    $@14  go to state 180


State 174

   90 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list • $@13 default_stmt CF

    $default  reduce using rule 89 ($@13)

    $@13  go to state 181


State 175

   91 case_stmt_list: case_stmt • case_stmt_list

    CASE  shift, and go to state 173

    $default  reduce using rule 92 (case_stmt_list)

    case_stmt_list  go to state 182
    case_stmt       go to state 175


State 176

   79 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list • CF $@7 elif_stmt else_stmt

    CF  shift, and go to state 183


State 177

  100 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list • CF

    CF  shift, and go to state 184


State 178

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 • assign CC $@20 OF stmt_list CF

    ID  shift, and go to state 101

    assign  go to state 185


State 179

   32 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF • arr_values CF SCOL

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    CHARACTER  shift, and go to state 22

    arr_values  go to state 186
    const       go to state 187


State 180

   95 case_stmt: CASE $@14 • OC const $@15 CC COLON stmt_list

    OC  shift, and go to state 188


State 181

   90 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 • default_stmt CF

    DEFAULT  shift, and go to state 189

    $default  reduce using rule 97 (default_stmt)

    default_stmt  go to state 190


State 182

   91 case_stmt_list: case_stmt case_stmt_list •

    $default  reduce using rule 91 (case_stmt_list)


State 183

   79 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF • $@7 elif_stmt else_stmt

    $default  reduce using rule 78 ($@7)

    $@7  go to state 191


State 184

  100 while_loop_stmt: WHILE $@16 OC expr CC $@17 OF stmt_list CF •

    $default  reduce using rule 100 (while_loop_stmt)


State 185

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign • CC $@20 OF stmt_list CF

    CC  shift, and go to state 192


State 186

   32 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values • CF SCOL

    CF  shift, and go to state 193


State 187

   34 arr_values: const • $@4 COMMA arr_values
   35           | const •

    CF        reduce using rule 35 (arr_values)
    $default  reduce using rule 33 ($@4)

    $@4  go to state 194


State 188

   95 case_stmt: CASE $@14 OC • const $@15 CC COLON stmt_list

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    CHARACTER  shift, and go to state 22

    const  go to state 195


State 189

   96 default_stmt: DEFAULT • COLON stmt_list

    COLON  shift, and go to state 196


State 190

   90 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt • CF

    CF  shift, and go to state 197


State 191

   79 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 • elif_stmt else_stmt

    ELIF  shift, and go to state 198

    $default  reduce using rule 84 (elif_stmt)

    elif_stmt  go to state 199


State 192

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC • $@20 OF stmt_list CF

    $default  reduce using rule 103 ($@20)

    $@20  go to state 200


State 193

   32 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF • SCOL

    SCOL  shift, and go to state 201


State 194

   34 arr_values: const $@4 • COMMA arr_values

    COMMA  shift, and go to state 202


State 195

   95 case_stmt: CASE $@14 OC const • $@15 CC COLON stmt_list

    $default  reduce using rule 94 ($@15)

    $@15  go to state 203


State 196

   96 default_stmt: DEFAULT COLON • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 204
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 197

   90 switch_stmt: SWITCH $@11 OC ID $@12 CC OF case_stmt_list $@13 default_stmt CF •

    $default  reduce using rule 90 (switch_stmt)


State 198

   83 elif_stmt: ELIF • $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt

    $default  reduce using rule 80 ($@8)

    $@8  go to state 205


State 199

   79 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt • else_stmt

    ELSE  shift, and go to state 206

    $default  reduce using rule 86 (else_stmt)

    else_stmt  go to state 207


State 200

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 • OF stmt_list CF

    OF  shift, and go to state 208


State 201

   32 declaration: data_type ID OS INT_NUM CS ASSIGN $@3 OF arr_values CF SCOL •

    $default  reduce using rule 32 (declaration)


State 202

   34 arr_values: const $@4 COMMA • arr_values

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    CHARACTER  shift, and go to state 22

    arr_values  go to state 209
    const       go to state 187


State 203

   95 case_stmt: CASE $@14 OC const $@15 • CC COLON stmt_list

    CC  shift, and go to state 210


State 204

   96 default_stmt: DEFAULT COLON stmt_list •

    $default  reduce using rule 96 (default_stmt)


State 205

   83 elif_stmt: ELIF $@8 • OC expr CC $@9 OF stmt_list CF $@10 elif_stmt

    OC  shift, and go to state 211


State 206

   85 else_stmt: ELSE • OF stmt_list CF

    OF  shift, and go to state 212


State 207

   79 if_stmt: IF $@5 OC expr CC $@6 OF stmt_list CF $@7 elif_stmt else_stmt •

    $default  reduce using rule 79 (if_stmt)


State 208

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 213
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 209

   34 arr_values: const $@4 COMMA arr_values •

    $default  reduce using rule 34 (arr_values)


State 210

   95 case_stmt: CASE $@14 OC const $@15 CC • COLON stmt_list

    COLON  shift, and go to state 214


State 211

   83 elif_stmt: ELIF $@8 OC • expr CC $@9 OF stmt_list CF $@10 elif_stmt

    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 50
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23

    expr          go to state 215
    postfix_expr  go to state 38
    unary_expr    go to state 39
    primary_expr  go to state 40
    unary_op      go to state 41
    const         go to state 42
    func_call     go to state 48


State 212

   85 else_stmt: ELSE OF • stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 216
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 213

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list • CF

    CF  shift, and go to state 217


State 214

   95 case_stmt: CASE $@14 OC const $@15 CC COLON • stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 218
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 215

   40 expr: expr • ADD expr
   41     | expr • SUBTRACT expr
   42     | expr • MULTIPLY expr
   43     | expr • DIVIDE expr
   44     | expr • LE expr
   45     | expr • GE expr
   46     | expr • LT expr
   47     | expr • GT expr
   48     | expr • EQ expr
   49     | expr • NE expr
   50     | expr • AND expr
   51     | expr • OR expr
   52     | expr • MODULO expr
   53     | expr • BITAND expr
   54     | expr • BITOR expr
   55     | expr • XOR expr
   56     | expr • LEFTSHIFT expr
   57     | expr • RIGHTSHIFT expr
   83 elif_stmt: ELIF $@8 OC expr • CC $@9 OF stmt_list CF $@10 elif_stmt

    LEFTSHIFT   shift, and go to state 68
    RIGHTSHIFT  shift, and go to state 69
    LE          shift, and go to state 70
    GE          shift, and go to state 71
    EQ          shift, and go to state 72
    NE          shift, and go to state 73
    GT          shift, and go to state 74
    LT          shift, and go to state 75
    AND         shift, and go to state 76
    OR          shift, and go to state 77
    ADD         shift, and go to state 78
    SUBTRACT    shift, and go to state 79
    DIVIDE      shift, and go to state 80
    MULTIPLY    shift, and go to state 81
    MODULO      shift, and go to state 82
    BITAND      shift, and go to state 83
    BITOR       shift, and go to state 84
    XOR         shift, and go to state 85
    CC          shift, and go to state 219


State 216

   85 else_stmt: ELSE OF stmt_list • CF

    CF  shift, and go to state 220


State 217

  104 for_loop_stmt: FOR OC assign SCOL $@18 expr SCOL $@19 assign CC $@20 OF stmt_list CF •

    $default  reduce using rule 104 (for_loop_stmt)


State 218

   95 case_stmt: CASE $@14 OC const $@15 CC COLON stmt_list •

    $default  reduce using rule 95 (case_stmt)


State 219

   83 elif_stmt: ELIF $@8 OC expr CC • $@9 OF stmt_list CF $@10 elif_stmt

    $default  reduce using rule 81 ($@9)

    $@9  go to state 221


State 220

   85 else_stmt: ELSE OF stmt_list CF •

    $default  reduce using rule 85 (else_stmt)


State 221

   83 elif_stmt: ELIF $@8 OC expr CC $@9 • OF stmt_list CF $@10 elif_stmt

    OF  shift, and go to state 222


State 222

   83 elif_stmt: ELIF $@8 OC expr CC $@9 OF • stmt_list CF $@10 elif_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    RETURN     shift, and go to state 14
    INT_NUM    shift, and go to state 15
    FLOAT_NUM  shift, and go to state 16
    ID         shift, and go to state 17
    NOT        shift, and go to state 18
    ADD        shift, and go to state 19
    SUBTRACT   shift, and go to state 20
    NEGATION   shift, and go to state 21
    CHARACTER  shift, and go to state 22
    OC         shift, and go to state 23
    OUTPUT     shift, and go to state 24
    INPUT      shift, and go to state 25
    SWITCH     shift, and go to state 26
    BREAK      shift, and go to state 27
    IF         shift, and go to state 28
    WHILE      shift, and go to state 29
    FOR        shift, and go to state 30
    CONTINUE   shift, and go to state 31

    $default  reduce using rule 15 (stmt_list)

    stmt_list        go to state 223
    stmt             go to state 33
    declaration      go to state 34
    return_stmt      go to state 35
    data_type        go to state 36
    expr             go to state 37
    postfix_expr     go to state 38
    unary_expr       go to state 39
    primary_expr     go to state 40
    unary_op         go to state 41
    const            go to state 42
    assign           go to state 43
    if_stmt          go to state 44
    switch_stmt      go to state 45
    while_loop_stmt  go to state 46
    for_loop_stmt    go to state 47
    func_call        go to state 48


State 223

   83 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list • CF $@10 elif_stmt

    CF  shift, and go to state 224


State 224

   83 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF • $@10 elif_stmt

    $default  reduce using rule 82 ($@10)

    $@10  go to state 225


State 225

   83 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 • elif_stmt

    ELIF  shift, and go to state 198

    $default  reduce using rule 84 (elif_stmt)

    elif_stmt  go to state 226


State 226

   83 elif_stmt: ELIF $@8 OC expr CC $@9 OF stmt_list CF $@10 elif_stmt •

    $default  reduce using rule 83 (elif_stmt)
